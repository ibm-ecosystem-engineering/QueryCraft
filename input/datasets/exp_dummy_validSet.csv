Unnamed: 0,db_id,query,question,query_toks,query_toks_no_value,question_toks,context
4868,school_player,SELECT avg(Enrollment) FROM school,What is the average enrollment of schools?,['SELECT' 'avg' '(' 'Enrollment' ')' 'FROM' 'school'],['select' 'avg' '(' 'enrollment' ')' 'from' 'school'],['What' 'is' 'the' 'average' 'enrollment' 'of' 'schools' '?'],"['CREATE TABLE ""school"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Enrollment"" real, ""Founded"" real, ""Denomination"" text, ""Boys_or_Girls"" text, ""Day_or_Boarding"" text, ""Year_Entered_Competition"" real, ""School_Colors"" text, PRIMARY KEY (""School_Id"") )', 'CREATE TABLE ""school_details"" ( ""School_ID"" int, ""Nickname"" text, ""Colors"" text, ""League"" text, ""Class"" text, ""Division"" text, PRIMARY KEY (""School_Id""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""school_performance"" ( ""School_Id"" int, ""School_Year"" text, ""Class_A"" text, ""Class_AA"" text, PRIMARY KEY (""School_Id"",""School_Year""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Team"" text, ""Age"" int, ""Position"" text, ""School_ID"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )']"
4048,student_1,SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1,Find the first names of the teachers that teach first grade.,"['SELECT' 'DISTINCT' 'T2.firstname' 'FROM' 'list' 'AS' 'T1' 'JOIN'
 'teachers' 'AS' 'T2' 'ON' 'T1.classroom' '=' 'T2.classroom' 'WHERE'
 'grade' '=' '1']","['select' 'distinct' 't2' '.' 'firstname' 'from' 'list' 'as' 't1' 'join'
 'teachers' 'as' 't2' 'on' 't1' '.' 'classroom' '=' 't2' '.' 'classroom'
 'where' 'grade' '=' 'value']","['Find' 'the' 'first' 'names' 'of' 'the' 'teachers' 'that' 'teach' 'first'
 'grade' '.']","['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
2304,perpetrator,SELECT Date FROM perpetrator ORDER BY Killed DESC,List the date of perpetrators in descending order of the number of people killed.,['SELECT' 'Date' 'FROM' 'perpetrator' 'ORDER' 'BY' 'Killed' 'DESC'],['select' 'date' 'from' 'perpetrator' 'order' 'by' 'killed' 'desc'],"['List' 'the' 'date' 'of' 'perpetrators' 'in' 'descending' 'order' 'of'
 'the' 'number' 'of' 'people' 'killed' '.']","['CREATE TABLE ""perpetrator"" ( ""Perpetrator_ID"" int, ""People_ID"" int, ""Date"" text, ""Year"" real, ""Location"" text, ""Country"" text, ""Killed"" int, ""Injured"" int, PRIMARY KEY (""Perpetrator_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Home Town"" text, PRIMARY KEY (""People_ID"") )']"
5016,soccer_2,SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%',Which colleges do the tryout players whose name starts with letter D go to?,"['SELECT' 'T1.cName' 'FROM' 'tryout' 'AS' 'T1' 'JOIN' 'player' 'AS' 'T2'
 'ON' 'T1.pID' '=' 'T2.pID' 'WHERE' 'T2.pName' 'LIKE' ""'D"" '%' ""'""]","['select' 't1' '.' 'cname' 'from' 'tryout' 'as' 't1' 'join' 'player' 'as'
 't2' 'on' 't1' '.' 'pid' '=' 't2' '.' 'pid' 'where' 't2' '.' 'pname'
 'like' 'value']","['Which' 'colleges' 'do' 'the' 'tryout' 'players' 'whose' 'name' 'starts'
 'with' 'letter' 'D' 'go' 'to' '?']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
1891,school_finance,"SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school","Show the average, maximum, minimum enrollment of all schools.","['SELECT' 'avg' '(' 'enrollment' ')' ',' 'max' '(' 'enrollment' ')' ','
 'min' '(' 'enrollment' ')' 'FROM' 'school']","['select' 'avg' '(' 'enrollment' ')' ',' 'max' '(' 'enrollment' ')' ','
 'min' '(' 'enrollment' ')' 'from' 'school']","['Show' 'the' 'average' ',' 'maximum' ',' 'minimum' 'enrollment' 'of'
 'all' 'schools' '.']","['CREATE TABLE ""School"" ( ""School_id"" text, ""School_name"" text, ""Location"" text, ""Mascot"" text, ""Enrollment"" int, ""IHSAA_Class"" text, ""IHSAA_Football_Class"" text, ""County"" text, PRIMARY KEY (""School_id"") )', 'CREATE TABLE ""budget"" ( ""School_id"" int, ""Year"" int, ""Budgeted"" int, ""total_budget_percent_budgeted"" real, ""Invested"" int, ""total_budget_percent_invested"" real, ""Budget_invested_percent"" text, PRIMARY KEY(""School_id"",""YEAR""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"") )', 'CREATE TABLE ""endowment"" ( ""endowment_id"" int, ""School_id"" int, ""donator_name"" text, ""amount"" real, PRIMARY KEY(""endowment_id""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"") )']"
3979,hospital_1,"SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",What are the names of procedures physician John Wen was trained in?,"['SELECT' 'T3.name' 'FROM' 'physician' 'AS' 'T1' 'JOIN' 'trained_in' 'AS'
 'T2' 'ON' 'T1.employeeid' '=' 'T2.physician' 'JOIN' 'procedures' 'AS'
 'T3' 'ON' 'T3.code' '=' 'T2.treatment' 'WHERE' 'T1.name' '=' '``' 'John'
 'Wen' ""''""]","['select' 't3' '.' 'name' 'from' 'physician' 'as' 't1' 'join' 'trained_in'
 'as' 't2' 'on' 't1' '.' 'employeeid' '=' 't2' '.' 'physician' 'join'
 'procedures' 'as' 't3' 'on' 't3' '.' 'code' '=' 't2' '.' 'treatment'
 'where' 't1' '.' 'name' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'procedures' 'physician' 'John' 'Wen'
 'was' 'trained' 'in' '?']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
6959,architecture,"SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1","What is the most common mill type, and how many are there?","['SELECT' 'TYPE' ',' 'count' '(' '*' ')' 'FROM' 'mill' 'GROUP' 'BY' 'TYPE'
 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'type' ',' 'count' '(' '*' ')' 'from' 'mill' 'group' 'by' 'type'
 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'most' 'common' 'mill' 'type' ',' 'and' 'how' 'many'
 'are' 'there' '?']","['CREATE TABLE ""architect"" ( ""id"" text, ""name"" text, ""nationality"" text, ""gender"" text, primary key(""id"") )', 'CREATE TABLE ""bridge"" ( ""architect_id"" int, ""id"" int, ""name"" text, ""location"" text, ""length_meters"" real, ""length_feet"" real, primary key(""id""), foreign key (""architect_id"" ) references `architect`(""id"") )', 'CREATE TABLE ""mill"" ( ""architect_id"" int, ""id"" int, ""location"" text, ""name"" text, ""type"" text, ""built_year"" int, ""notes"" text, primary key (""id""), foreign key (""architect_id"" ) references `architect`(""id"") )']"
1760,gymnast,"SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",What are the hometowns of gymnasts and the corresponding number of gymnasts?,"['SELECT' 'T2.Hometown' ',' 'COUNT' '(' '*' ')' 'FROM' 'gymnast' 'AS' 'T1'
 'JOIN' 'people' 'AS' 'T2' 'ON' 'T1.Gymnast_ID' '=' 'T2.People_ID' 'GROUP'
 'BY' 'T2.Hometown']","['select' 't2' '.' 'hometown' ',' 'count' '(' '*' ')' 'from' 'gymnast'
 'as' 't1' 'join' 'people' 'as' 't2' 'on' 't1' '.' 'gymnast_id' '=' 't2'
 '.' 'people_id' 'group' 'by' 't2' '.' 'hometown']","['What' 'are' 'the' 'hometowns' 'of' 'gymnasts' 'and' 'the'
 'corresponding' 'number' 'of' 'gymnasts' '?']","['CREATE TABLE ""gymnast"" ( ""Gymnast_ID"" int, ""Floor_Exercise_Points"" real, ""Pommel_Horse_Points"" real, ""Rings_Points"" real, ""Vault_Points"" real, ""Parallel_Bars_Points"" real, ""Horizontal_Bar_Points"" real, ""Total_Points"" real, PRIMARY KEY (""Gymnast_ID""), FOREIGN KEY (""Gymnast_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Age"" real, ""Height"" real, ""Hometown"" text, PRIMARY KEY (""People_ID"") )']"
6408,cre_Docs_and_Epenses,"SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  ""BK"" GROUP BY project_id",Count the number of documents with the type code BK that correspond to each product id.,"['SELECT' 'count' '(' '*' ')' ',' 'project_id' 'FROM' 'Documents' 'WHERE'
 'document_type_code' '=' '``' 'BK' ""''"" 'GROUP' 'BY' 'project_id']","['select' 'count' '(' '*' ')' ',' 'project_id' 'from' 'documents' 'where'
 'document_type_code' '=' 'value' 'group' 'by' 'project_id']","['Count' 'the' 'number' 'of' 'documents' 'with' 'the' 'type' 'code' 'BK'
 'that' 'correspond' 'to' 'each' 'product' 'id' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
2425,candidate_poll,"SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",Count the number of people of each sex who have a weight higher than 85.,"['SELECT' 'count' '(' '*' ')' ',' 'sex' 'FROM' 'people' 'WHERE' 'weight'
 '>' '85' 'GROUP' 'BY' 'sex']","['select' 'count' '(' '*' ')' ',' 'sex' 'from' 'people' 'where' 'weight'
 '>' 'value' 'group' 'by' 'sex']","['Count' 'the' 'number' 'of' 'people' 'of' 'each' 'sex' 'who' 'have' 'a'
 'weight' 'higher' 'than' '85' '.']","['CREATE TABLE ""candidate"" ( ""Candidate_ID"" int, ""People_ID"" int, ""Poll_Source"" text, ""Date"" text, ""Support_rate"" real, ""Consider_rate"" real, ""Oppose_rate"" real, ""Unsure_rate"" real, PRIMARY KEY (""Candidate_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Sex"" text, ""Name"" text, ""Date_of_Birth"" text, ""Height"" real, ""Weight"" real, PRIMARY KEY (""People_ID"") )']"
4282,club_1,"SELECT clubdesc FROM club WHERE clubname  =  ""Pen and Paper Gaming""","Find the description of the club ""Pen and Paper Gaming"".","['SELECT' 'clubdesc' 'FROM' 'club' 'WHERE' 'clubname' '=' '``' 'Pen' 'and'
 'Paper' 'Gaming' ""''""]",['select' 'clubdesc' 'from' 'club' 'where' 'clubname' '=' 'value'],"['Find' 'the' 'description' 'of' 'the' 'club' '``' 'Pen' 'and' 'Paper'
 'Gaming' ""''"" '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Club ( ClubID INTEGER PRIMARY KEY, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) )', 'CREATE TABLE Member_of_club ( StuID INTEGER, ClubID INTEGER, Position VARCHAR(40), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ClubID) REFERENCES Club(ClubID) )']"
1238,apartment_rentals,SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4,Show the facility codes of apartments with more than 4 bedrooms.,"['SELECT' 'T1.facility_code' 'FROM' 'Apartment_Facilities' 'AS' 'T1'
 'JOIN' 'Apartments' 'AS' 'T2' 'ON' 'T1.apt_id' '=' 'T2.apt_id' 'WHERE'
 'T2.bedroom_count' '>' '4']","['select' 't1' '.' 'facility_code' 'from' 'apartment_facilities' 'as' 't1'
 'join' 'apartments' 'as' 't2' 'on' 't1' '.' 'apt_id' '=' 't2' '.'
 'apt_id' 'where' 't2' '.' 'bedroom_count' '>' 'value']","['Show' 'the' 'facility' 'codes' 'of' 'apartments' 'with' 'more' 'than'
 '4' 'bedrooms' '.']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
1138,climbing,"SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",Please show the countries and the number of climbers from each country.,"['SELECT' 'Country' ',' 'COUNT' '(' '*' ')' 'FROM' 'climber' 'GROUP' 'BY'
 'Country']","['select' 'country' ',' 'count' '(' '*' ')' 'from' 'climber' 'group' 'by'
 'country']","['Please' 'show' 'the' 'countries' 'and' 'the' 'number' 'of' 'climbers'
 'from' 'each' 'country' '.']","['CREATE TABLE ""mountain"" ( ""Mountain_ID"" int, ""Name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, PRIMARY KEY (""Mountain_ID"") )', 'CREATE TABLE ""climber"" ( ""Climber_ID"" int, ""Name"" text, ""Country"" text, ""Time"" text, ""Points"" real, ""Mountain_ID"" int, PRIMARY KEY (""Climber_ID""), FOREIGN KEY (""Mountain_ID"") REFERENCES ""mountain""(""Mountain_ID"") )']"
5710,dorm_1,SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name,List in alphabetic order all different amenities.,['SELECT' 'amenity_name' 'FROM' 'dorm_amenity' 'ORDER' 'BY' 'amenity_name'],['select' 'amenity_name' 'from' 'dorm_amenity' 'order' 'by' 'amenity_name'],['List' 'in' 'alphabetic' 'order' 'all' 'different' 'amenities' '.'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
3462,hr_1,"SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",What are all the employee ids and the names of the countries in which they work?,"['SELECT' 'T1.employee_id' ',' 'T4.country_name' 'FROM' 'employees' 'AS'
 'T1' 'JOIN' 'departments' 'AS' 'T2' 'ON' 'T1.department_id' '='
 'T2.department_id' 'JOIN' 'locations' 'AS' 'T3' 'ON' 'T2.location_id' '='
 'T3.location_id' 'JOIN' 'countries' 'AS' 'T4' 'ON' 'T3.country_id' '='
 'T4.country_id']","['select' 't1' '.' 'employee_id' ',' 't4' '.' 'country_name' 'from'
 'employees' 'as' 't1' 'join' 'departments' 'as' 't2' 'on' 't1' '.'
 'department_id' '=' 't2' '.' 'department_id' 'join' 'locations' 'as' 't3'
 'on' 't2' '.' 'location_id' '=' 't3' '.' 'location_id' 'join' 'countries'
 'as' 't4' 'on' 't3' '.' 'country_id' '=' 't4' '.' 'country_id']","['What' 'are' 'all' 'the' 'employee' 'ids' 'and' 'the' 'names' 'of' 'the'
 'countries' 'in' 'which' 'they' 'work' '?']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
3885,insurance_policies,SELECT DISTINCT customer_details FROM Customers,Return the distinct customer details.,['SELECT' 'DISTINCT' 'customer_details' 'FROM' 'Customers'],['select' 'distinct' 'customer_details' 'from' 'customers'],['Return' 'the' 'distinct' 'customer' 'details' '.'],"['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )', 'CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) )']"
3707,baseball_1,SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;,Which cities have 2 to 4 parks?,"['SELECT' 'city' 'FROM' 'park' 'GROUP' 'BY' 'city' 'HAVING' 'count' '('
 '*' ')' 'BETWEEN' '2' 'AND' '4' ';']","['select' 'city' 'from' 'park' 'group' 'by' 'city' 'having' 'count' '('
 '*' ')' 'between' 'value' 'and' 'value']",['Which' 'cities' 'have' '2' 'to' '4' 'parks' '?'],"['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
3077,loan_1,"SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",What are the names and cities of bank branches that offer loans for business?,"['SELECT' 'T1.bname' ',' 'T1.city' 'FROM' 'bank' 'AS' 'T1' 'JOIN' 'loan'
 'AS' 'T2' 'ON' 'T1.branch_id' '=' 'T2.branch_id' 'WHERE' 'T2.loan_type'
 '=' ""'Business"" ""'""]","['select' 't1' '.' 'bname' ',' 't1' '.' 'city' 'from' 'bank' 'as' 't1'
 'join' 'loan' 'as' 't2' 'on' 't1' '.' 'branch_id' '=' 't2' '.'
 'branch_id' 'where' 't2' '.' 'loan_type' '=' 'value']","['What' 'are' 'the' 'names' 'and' 'cities' 'of' 'bank' 'branches' 'that'
 'offer' 'loans' 'for' 'business' '?']","['CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20))', 'CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID))', 'CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID))']"
5471,voter_2,"SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",List all the distinct president votes and the vice president votes.,"['SELECT' 'DISTINCT' 'President_Vote' ',' 'VICE_President_Vote' 'FROM'
 'VOTING_RECORD']","['select' 'distinct' 'president_vote' ',' 'vice_president_vote' 'from'
 'voting_record']","['List' 'all' 'the' 'distinct' 'president' 'votes' 'and' 'the' 'vice'
 'president' 'votes' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
2047,party_people,SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959,Show the minister who took office after 1961 or before 1959.,"['SELECT' 'minister' 'FROM' 'party' 'WHERE' 'took_office' '>' '1961' 'OR'
 'took_office' '<' '1959']","['select' 'minister' 'from' 'party' 'where' 'took_office' '>' 'value' 'or'
 'took_office' '<' 'value']","['Show' 'the' 'minister' 'who' 'took' 'office' 'after' '1961' 'or'
 'before' '1959' '.']","['CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) )', 'CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) )']"
3165,station_weather,"SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",What is the average high temperature for each day of week?,"['SELECT' 'avg' '(' 'high_temperature' ')' ',' 'day_of_week' 'FROM'
 'weekly_weather' 'GROUP' 'BY' 'day_of_week']","['select' 'avg' '(' 'high_temperature' ')' ',' 'day_of_week' 'from'
 'weekly_weather' 'group' 'by' 'day_of_week']","['What' 'is' 'the' 'average' 'high' 'temperature' 'for' 'each' 'day' 'of'
 'week' '?']","['CREATE TABLE ""train"" ( ""id"" int, ""train_number"" int, ""name"" text, ""origin"" text, ""destination"" text, ""time"" text, ""interval"" text, primary key (""id"") )', 'CREATE TABLE ""station"" ( ""id"" int, ""network_name"" text, ""services"" text, ""local_authority"" text, primary key (""id"") )', 'CREATE TABLE ""route"" ( ""train_id"" int, ""station_id"" int, primary key (""train_id"", ""station_id""), foreign key (""train_id"") references `train`(""id""), foreign key (""station_id"") references `station`(""id"") )', 'CREATE TABLE ""weekly_weather"" ( ""station_id"" int, ""day_of_week"" text, ""high_temperature"" int, ""low_temperature"" int, ""precipitation"" real, ""wind_speed_mph"" int, primary key (""station_id"", ""day_of_week""), foreign key (""station_id"") references ""station""(""id"") )']"
436,flight_1,"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",What is the salaray and name of the employee that is certified to fly the most planes?,"['SELECT' 'T1.name' ',' 'T1.salary' 'FROM' 'Employee' 'AS' 'T1' 'JOIN'
 'Certificate' 'AS' 'T2' 'ON' 'T1.eid' '=' 'T2.eid' 'GROUP' 'BY' 'T1.eid'
 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'name' ',' 't1' '.' 'salary' 'from' 'employee' 'as'
 't1' 'join' 'certificate' 'as' 't2' 'on' 't1' '.' 'eid' '=' 't2' '.'
 'eid' 'group' 'by' 't1' '.' 'eid' 'order' 'by' 'count' '(' '*' ')' 'desc'
 'limit' 'value']","['What' 'is' 'the' 'salaray' 'and' 'name' 'of' 'the' 'employee' 'that'
 'is' 'certified' 'to' 'fly' 'the' 'most' 'planes' '?']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
1575,customers_and_invoices,"SELECT gender ,  count(*) FROM Customers GROUP BY gender",Show the number of customers for each gender.,"['SELECT' 'gender' ',' 'count' '(' '*' ')' 'FROM' 'Customers' 'GROUP' 'BY'
 'gender']","['select' 'gender' ',' 'count' '(' '*' ')' 'from' 'customers' 'group' 'by'
 'gender']",['Show' 'the' 'number' 'of' 'customers' 'for' 'each' 'gender' '.'],"['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
3412,hr_1,"SELECT * FROM employees WHERE department_id  =  ""null""",What are all the employees without a department number?,"['SELECT' '*' 'FROM' 'employees' 'WHERE' 'department_id' '=' '``' 'null'
 ""''""]",['select' '*' 'from' 'employees' 'where' 'department_id' '=' 'value'],"['What' 'are' 'all' 'the' 'employees' 'without' 'a' 'department' 'number'
 '?']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
6905,tracking_orders,"SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= ""2009-01-01"" AND T2.date_order_placed <= ""2010-01-01""",Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.,"['SELECT' 'T1.customer_name' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE'
 'T2.date_order_placed' '>' '=' '``' '2009-01-01' ""''"" 'AND'
 'T2.date_order_placed' '<' '=' '``' '2010-01-01' ""''""]","['select' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1' 'join'
 'orders' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id'
 'where' 't2' '.' 'date_order_placed' '>' '=' 'value' 'and' 't2' '.'
 'date_order_placed' '<' '=' 'value']","['Give' 'me' 'the' 'names' 'of' 'customers' 'who' 'have' 'placed' 'orders'
 'between' '2009-01-01' 'and' '2010-01-01' '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
4559,company_office,SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1,Find the stories of the building with the largest height.,"['SELECT' 'Stories' 'FROM' 'buildings' 'ORDER' 'BY' 'Height' 'DESC'
 'LIMIT' '1']","['select' 'stories' 'from' 'buildings' 'order' 'by' 'height' 'desc'
 'limit' 'value']","['Find' 'the' 'stories' 'of' 'the' 'building' 'with' 'the' 'largest'
 'height' '.']","['CREATE TABLE ""buildings"" ( ""id"" int, ""name"" text, ""City"" text, ""Height"" int, ""Stories"" int, ""Status"" text, PRIMARY KEY(""id"") )', 'CREATE TABLE ""Companies"" ( ""id"" int, ""name"" text, ""Headquarters"" text, ""Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value_billion"" text, PRIMARY KEY (""id"") )', 'CREATE TABLE ""Office_locations"" ( ""building_id"" int, ""company_id"" int, ""move_in_year"" int, PRIMARY KEY (""building_id"", ""company_id""), FOREIGN KEY (""building_id"") REFERENCES ""buildings""(""id""), FOREIGN KEY (""company_id"") REFERENCES ""Companies""(""id"") )']"
2008,gas_company,"SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",What are the main indstries and total market value for each industry?,"['SELECT' 'main_industry' ',' 'sum' '(' 'market_value' ')' 'FROM'
 'company' 'GROUP' 'BY' 'main_industry']","['select' 'main_industry' ',' 'sum' '(' 'market_value' ')' 'from'
 'company' 'group' 'by' 'main_industry']","['What' 'are' 'the' 'main' 'indstries' 'and' 'total' 'market' 'value'
 'for' 'each' 'industry' '?']","['CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") )', 'CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") )', 'CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) )']"
1806,small_bank_1,"SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",Find the total saving balance for each account name.,"['SELECT' 'sum' '(' 'T2.balance' ')' ',' 'T1.name' 'FROM' 'accounts' 'AS'
 'T1' 'JOIN' 'savings' 'AS' 'T2' 'ON' 'T1.custid' '=' 'T2.custid' 'GROUP'
 'BY' 'T1.name']","['select' 'sum' '(' 't2' '.' 'balance' ')' ',' 't1' '.' 'name' 'from'
 'accounts' 'as' 't1' 'join' 'savings' 'as' 't2' 'on' 't1' '.' 'custid'
 '=' 't2' '.' 'custid' 'group' 'by' 't1' '.' 'name']",['Find' 'the' 'total' 'saving' 'balance' 'for' 'each' 'account' 'name' '.'],"['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
285,twitter_1,SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift'),"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift"".","['SELECT' 'T1.name' 'FROM' 'user_profiles' 'AS' 'T1' 'JOIN' 'follows' 'AS'
 'T2' 'ON' 'T1.uid' '=' 'T2.f1' 'GROUP' 'BY' 'T2.f1' 'HAVING' 'count' '('
 '*' ')' '>' '(' 'SELECT' 'count' '(' '*' ')' 'FROM' 'user_profiles' 'AS'
 'T1' 'JOIN' 'follows' 'AS' 'T2' 'ON' 'T1.uid' '=' 'T2.f1' 'WHERE'
 'T1.name' '=' ""'Tyler"" 'Swift' ""'"" ')']","['select' 't1' '.' 'name' 'from' 'user_profiles' 'as' 't1' 'join'
 'follows' 'as' 't2' 'on' 't1' '.' 'uid' '=' 't2' '.' 'f1' 'group' 'by'
 't2' '.' 'f1' 'having' 'count' '(' '*' ')' '>' '(' 'select' 'count' '('
 '*' ')' 'from' 'user_profiles' 'as' 't1' 'join' 'follows' 'as' 't2' 'on'
 't1' '.' 'uid' '=' 't2' '.' 'f1' 'where' 't1' '.' 'name' '=' 'value' ')']","['Find' 'the' 'names' 'of' 'the' 'users' 'whose' 'number' 'of' 'followers'
 'is' 'greater' 'than' 'that' 'of' 'the' 'user' 'named' '``' 'Tyler'
 'Swift' ""''"" '.']","['CREATE TABLE `follows` ( `f1` int(11) NOT NULL, `f2` int(11) NOT NULL, PRIMARY KEY (`f1`,`f2`), FOREIGN KEY (`f1`) REFERENCES `user_profiles`(`uid`), FOREIGN KEY (`f2`) REFERENCES `user_profiles`(`uid`) )', 'CREATE TABLE `tweets` ( `id` bigint(20) NOT NULL, `uid` int(11) NOT NULL, `text` char(140) NOT NULL, `createdate` datetime DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FOREIGN KEY (`uid`) REFERENCES `user_profiles`(`uid`) )', 'CREATE TABLE ""user_profiles"" (`uid` int(11) NOT NULL, `name` varchar(255) DEFAULT NULL, `email` varchar(255) DEFAULT NULL, `partitionid` int(11) DEFAULT NULL, `followers` int(11) DEFAULT NULL, PRIMARY KEY (`uid`))']"
3251,college_1,SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting',How many students are enrolled in the class taught by some professor from the accounting department?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'CLASS' 'AS' 'T1' 'JOIN' 'enroll'
 'AS' 'T2' 'ON' 'T1.class_code' '=' 'T2.class_code' 'JOIN' 'course' 'AS'
 'T3' 'ON' 'T1.crs_code' '=' 'T3.crs_code' 'JOIN' 'department' 'AS' 'T4'
 'ON' 'T3.dept_code' '=' 'T4.dept_code' 'WHERE' 'T4.dept_name' '='
 ""'Accounting"" ""'""]","['select' 'count' '(' '*' ')' 'from' 'class' 'as' 't1' 'join' 'enroll'
 'as' 't2' 'on' 't1' '.' 'class_code' '=' 't2' '.' 'class_code' 'join'
 'course' 'as' 't3' 'on' 't1' '.' 'crs_code' '=' 't3' '.' 'crs_code'
 'join' 'department' 'as' 't4' 'on' 't3' '.' 'dept_code' '=' 't4' '.'
 'dept_code' 'where' 't4' '.' 'dept_name' '=' 'value']","['How' 'many' 'students' 'are' 'enrolled' 'in' 'the' 'class' 'taught' 'by'
 'some' 'professor' 'from' 'the' 'accounting' 'department' '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
6643,driving_school,"SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn"";",In what city does Janessa Sawayn live?,"['SELECT' 'T1.city' 'FROM' 'Addresses' 'AS' 'T1' 'JOIN' 'Staff' 'AS' 'T2'
 'ON' 'T1.address_id' '=' 'T2.staff_address_id' 'WHERE' 'T2.first_name'
 '=' '``' 'Janessa' ""''"" 'AND' 'T2.last_name' '=' '``' 'Sawayn' ""''"" ';']","['select' 't1' '.' 'city' 'from' 'addresses' 'as' 't1' 'join' 'staff' 'as'
 't2' 'on' 't1' '.' 'address_id' '=' 't2' '.' 'staff_address_id' 'where'
 't2' '.' 'first_name' '=' 'value' 'and' 't2' '.' 'last_name' '=' 'value']",['In' 'what' 'city' 'does' 'Janessa' 'Sawayn' 'live' '?'],"['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
6717,activity_1,SELECT DISTINCT rank FROM Faculty,What ranks do we have for faculty?,['SELECT' 'DISTINCT' 'rank' 'FROM' 'Faculty'],['select' 'distinct' 'rank' 'from' 'faculty'],['What' 'ranks' 'do' 'we' 'have' 'for' 'faculty' '?'],"['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
6089,customers_and_addresses,SELECT city FROM addresses WHERE zip_postcode  =  255,Find the city with post code 255.,['SELECT' 'city' 'FROM' 'addresses' 'WHERE' 'zip_postcode' '=' '255'],['select' 'city' 'from' 'addresses' 'where' 'zip_postcode' '=' 'value'],['Find' 'the' 'city' 'with' 'post' 'code' '255' '.'],"['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
3017,loan_1,"SELECT city ,  state FROM bank WHERE bname  =  'morningside'",What city and state is the bank with the name morningside in?,"['SELECT' 'city' ',' 'state' 'FROM' 'bank' 'WHERE' 'bname' '='
 ""'morningside"" ""'""]","['select' 'city' ',' 'state' 'from' 'bank' 'where' 'bname' '=' 'value']","['What' 'city' 'and' 'state' 'is' 'the' 'bank' 'with' 'the' 'name'
 'morningside' 'in' '?']","['CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20))', 'CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID))', 'CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID))']"
5739,dorm_1,"SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid","For each dorm, how many amenities does it have?","['SELECT' 'count' '(' '*' ')' ',' 'T1.dormid' 'FROM' 'dorm' 'AS' 'T1'
 'JOIN' 'has_amenity' 'AS' 'T2' 'ON' 'T1.dormid' '=' 'T2.dormid' 'WHERE'
 'T1.student_capacity' '>' '100' 'GROUP' 'BY' 'T1.dormid']","['select' 'count' '(' '*' ')' ',' 't1' '.' 'dormid' 'from' 'dorm' 'as'
 't1' 'join' 'has_amenity' 'as' 't2' 'on' 't1' '.' 'dormid' '=' 't2' '.'
 'dormid' 'where' 't1' '.' 'student_capacity' '>' 'value' 'group' 'by'
 't1' '.' 'dormid']","['For' 'each' 'dorm' ',' 'how' 'many' 'amenities' 'does' 'it' 'have' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
3486,hr_1,SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2,What are the employee ids for those who had two or more jobs.,"['SELECT' 'employee_id' 'FROM' 'job_history' 'GROUP' 'BY' 'employee_id'
 'HAVING' 'COUNT' '(' '*' ')' '>' '=' '2']","['select' 'employee_id' 'from' 'job_history' 'group' 'by' 'employee_id'
 'having' 'count' '(' '*' ')' '>' '=' 'value']","['What' 'are' 'the' 'employee' 'ids' 'for' 'those' 'who' 'had' 'two' 'or'
 'more' 'jobs' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
3895,insurance_policies,"SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1","Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.","['SELECT' 'T1.claim_id' ',' 'T1.date_claim_made' ','
 'T1.Date_Claim_Settled' 'FROM' 'Claims' 'AS' 'T1' 'JOIN' 'Settlements'
 'AS' 'T2' 'ON' 'T1.Claim_id' '=' 'T2.Claim_id' 'GROUP' 'BY' 'T1.claim_id'
 'HAVING' 'count' '(' '*' ')' '=' '1']","['select' 't1' '.' 'claim_id' ',' 't1' '.' 'date_claim_made' ',' 't1' '.'
 'date_claim_settled' 'from' 'claims' 'as' 't1' 'join' 'settlements' 'as'
 't2' 'on' 't1' '.' 'claim_id' '=' 't2' '.' 'claim_id' 'group' 'by' 't1'
 '.' 'claim_id' 'having' 'count' '(' '*' ')' '=' 'value']","['Which' 'claims' 'had' 'exactly' 'one' 'settlement' '?' 'For' 'each' ','
 'tell' 'me' 'the' 'the' 'date' 'the' 'claim' 'was' 'made' ',' 'the'
 'date' 'it' 'was' 'settled' 'and' 'the' 'amount' 'settled' '.']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )', 'CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) )']"
6034,game_1,SELECT count(DISTINCT StuID) FROM Plays_games,How many different students play games?,['SELECT' 'count' '(' 'DISTINCT' 'StuID' ')' 'FROM' 'Plays_games'],['select' 'count' '(' 'distinct' 'stuid' ')' 'from' 'plays_games'],['How' 'many' 'different' 'students' 'play' 'games' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
4588,solvency_ii,SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1,What is the name of the product with the highest price?,"['SELECT' 'Product_Name' 'FROM' 'Products' 'ORDER' 'BY' 'Product_Price'
 'DESC' 'LIMIT' '1']","['select' 'product_name' 'from' 'products' 'order' 'by' 'product_price'
 'desc' 'limit' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'product' 'with' 'the' 'highest'
 'price' '?']","['CREATE TABLE Addresses ( Address_ID INTEGER NOT NULL , address_details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Products ( Product_ID INTEGER NOT NULL, Product_Type_Code CHAR(15), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Parties ( Party_ID INTEGER NOT NULL, Party_Details VARCHAR(255), PRIMARY KEY (Party_ID) )', 'CREATE TABLE Assets ( Asset_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Asset_ID) )', 'CREATE TABLE Channels ( Channel_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Channel_ID) )', 'CREATE TABLE Finances ( Finance_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Finance_ID) )', 'CREATE TABLE Events ( Event_ID INTEGER NOT NULL , Address_ID INTEGER, Channel_ID INTEGER NOT NULL, Event_Type_Code CHAR(15), Finance_ID INTEGER NOT NULL, Location_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID), UNIQUE (Event_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Finance_ID) REFERENCES Finances (Finance_ID) )', 'CREATE TABLE Products_in_Events ( Product_in_Event_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Product_in_Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Parties_in_Events ( Party_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Role_Code CHAR(15), PRIMARY KEY (Party_ID, Event_ID), FOREIGN KEY (Party_ID) REFERENCES Parties (Party_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )', 'CREATE TABLE Agreements ( Document_ID INTEGER NOT NULL , Event_ID INTEGER NOT NULL, PRIMARY KEY (Document_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )', 'CREATE TABLE Assets_in_Events ( Asset_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, PRIMARY KEY (Asset_ID, Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )']"
2184,formula_1,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1,What are all the different first names of the drivers who are in position as standing and won?,"['SELECT' 'DISTINCT' 'T1.forename' 'FROM' 'drivers' 'AS' 'T1' 'JOIN'
 'driverstandings' 'AS' 'T2' 'ON' 'T1.driverid' '=' 'T2.driverid' 'WHERE'
 'T2.position' '=' '1' 'AND' 'T2.wins' '=' '1']","['select' 'distinct' 't1' '.' 'forename' 'from' 'drivers' 'as' 't1' 'join'
 'driverstandings' 'as' 't2' 'on' 't1' '.' 'driverid' '=' 't2' '.'
 'driverid' 'where' 't2' '.' 'position' '=' 'value' 'and' 't2' '.' 'wins'
 '=' 'value']","['What' 'are' 'all' 'the' 'different' 'first' 'names' 'of' 'the' 'drivers'
 'who' 'are' 'in' 'position' 'as' 'standing' 'and' 'won' '?']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
3204,college_1,"SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2","For each classroom with at least 2 classes, how many classes are offered?","['SELECT' 'count' '(' '*' ')' ',' 'class_room' 'FROM' 'CLASS' 'GROUP' 'BY'
 'class_room' 'HAVING' 'count' '(' '*' ')' '>' '=' '2']","['select' 'count' '(' '*' ')' ',' 'class_room' 'from' 'class' 'group' 'by'
 'class_room' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['For' 'each' 'classroom' 'with' 'at' 'least' '2' 'classes' ',' 'how'
 'many' 'classes' 'are' 'offered' '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
676,customers_card_transactions,"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  ""Art"" AND T2.customer_last_name  =  ""Turcotte""",Return the number of accounts that the customer with the first name Art and last name Turcotte has.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'Accounts' 'AS' 'T1' 'JOIN'
 'Customers' 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE'
 'T2.customer_first_name' '=' '``' 'Art' ""''"" 'AND'
 'T2.customer_last_name' '=' '``' 'Turcotte' ""''""]","['select' 'count' '(' '*' ')' 'from' 'accounts' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'where' 't2' '.' 'customer_first_name' '=' 'value' 'and'
 't2' '.' 'customer_last_name' '=' 'value']","['Return' 'the' 'number' 'of' 'accounts' 'that' 'the' 'customer' 'with'
 'the' 'first' 'name' 'Art' 'and' 'last' 'name' 'Turcotte' 'has' '.']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
2828,restaurant_1,"SELECT Fname , Lname FROM Student WHERE Major  =  600;",List all students' first names and last names who majored in 600.,"['SELECT' 'Fname' ',' 'Lname' 'FROM' 'Student' 'WHERE' 'Major' '=' '600'
 ';']","['select' 'fname' ',' 'lname' 'from' 'student' 'where' 'major' '=' 'value']","['List' 'all' 'students' ""'"" 'first' 'names' 'and' 'last' 'names' 'who'
 'majored' 'in' '600' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Restaurant ( ResID INTEGER PRIMARY KEY, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER )', 'CREATE TABLE Type_Of_Restaurant ( ResID INTEGER, ResTypeID INTEGER, FOREIGN KEY(ResID) REFERENCES Restaurant(ResID), FOREIGN KEY(ResTypeID) REFERENCES Restaurant_Type(ResTypeID) )', 'CREATE TABLE Restaurant_Type ( ResTypeID INTEGER PRIMARY KEY, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) )', 'CREATE TABLE Visits_Restaurant ( StuID INTEGER, ResID INTEGER, Time TIMESTAMP, Spent FLOAT, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ResID) REFERENCES Restaurant(ResID) )']"
6693,driving_school,SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );,How many customers have no payment histories?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'Customers' 'WHERE' 'customer_id'
 'NOT' 'IN' '(' 'SELECT' 'customer_id' 'FROM' 'Customer_Payments' ')' ';']","['select' 'count' '(' '*' ')' 'from' 'customers' 'where' 'customer_id'
 'not' 'in' '(' 'select' 'customer_id' 'from' 'customer_payments' ')']",['How' 'many' 'customers' 'have' 'no' 'payment' 'histories' '?'],"['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
2147,local_govt_in_alabama,"SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",Which service id and type has the least number of participants?,"['SELECT' 'T3.service_id' ',' 'T4.Service_Type_Code' 'FROM' 'participants'
 'AS' 'T1' 'JOIN' 'Participants_in_Events' 'AS' 'T2' 'ON'
 'T1.Participant_ID' '=' 'T2.Participant_ID' 'JOIN' 'EVENTS' 'AS' 'T3'
 'ON' 'T2.Event_ID' '=' 'T3.Event_ID' 'JOIN' 'services' 'AS' 'T4' 'ON'
 'T3.service_id' '=' 'T4.service_id' 'GROUP' 'BY' 'T3.service_id' 'ORDER'
 'BY' 'count' '(' '*' ')' 'ASC' 'LIMIT' '1']","['select' 't3' '.' 'service_id' ',' 't4' '.' 'service_type_code' 'from'
 'participants' 'as' 't1' 'join' 'participants_in_events' 'as' 't2' 'on'
 't1' '.' 'participant_id' '=' 't2' '.' 'participant_id' 'join' 'events'
 'as' 't3' 'on' 't2' '.' 'event_id' '=' 't3' '.' 'event_id' 'join'
 'services' 'as' 't4' 'on' 't3' '.' 'service_id' '=' 't4' '.' 'service_id'
 'group' 'by' 't3' '.' 'service_id' 'order' 'by' 'count' '(' '*' ')' 'asc'
 'limit' 'value']","['Which' 'service' 'id' 'and' 'type' 'has' 'the' 'least' 'number' 'of'
 'participants' '?']","['CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15) NOT NULL, PRIMARY KEY (Service_ID) )', 'CREATE TABLE Participants ( Participant_ID INTEGER NOT NULL, Participant_Type_Code CHAR(15) NOT NULL, Participant_Details VARCHAR(255), PRIMARY KEY (Participant_ID) )', 'CREATE TABLE Events ( Event_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, Event_Details VARCHAR(255), PRIMARY KEY (Event_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Participants_in_Events ( Event_ID INTEGER NOT NULL, Participant_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID, Participant_ID), FOREIGN KEY (Participant_ID) REFERENCES Participants (Participant_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )']"
5059,device,SELECT avg(Quantity) FROM stock,Give the average quantity of stocks.,['SELECT' 'avg' '(' 'Quantity' ')' 'FROM' 'stock'],['select' 'avg' '(' 'quantity' ')' 'from' 'stock'],['Give' 'the' 'average' 'quantity' 'of' 'stocks' '.'],"['CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") )', 'CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) )']"
2056,party_people,"SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",What are the names of members and their corresponding parties?,"['SELECT' 'T1.member_name' ',' 'T2.party_name' 'FROM' 'Member' 'AS' 'T1'
 'JOIN' 'party' 'AS' 'T2' 'ON' 'T1.party_id' '=' 'T2.party_id']","['select' 't1' '.' 'member_name' ',' 't2' '.' 'party_name' 'from' 'member'
 'as' 't1' 'join' 'party' 'as' 't2' 'on' 't1' '.' 'party_id' '=' 't2' '.'
 'party_id']","['What' 'are' 'the' 'names' 'of' 'members' 'and' 'their' 'corresponding'
 'parties' '?']","['CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) )', 'CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) )']"
6313,e_government,SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1,What is the name of the party form that is most common?,"['SELECT' 't1.form_name' 'FROM' 'forms' 'AS' 't1' 'JOIN' 'party_forms'
 'AS' 't2' 'ON' 't1.form_id' '=' 't2.form_id' 'GROUP' 'BY' 't2.form_id'
 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'form_name' 'from' 'forms' 'as' 't1' 'join'
 'party_forms' 'as' 't2' 'on' 't1' '.' 'form_id' '=' 't2' '.' 'form_id'
 'group' 'by' 't2' '.' 'form_id' 'order' 'by' 'count' '(' '*' ')' 'desc'
 'limit' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'party' 'form' 'that' 'is' 'most'
 'common' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) )', 'CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) )', 'CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) )', 'CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) )', 'CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) )', 'CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) )', 'CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) )', 'CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) )', 'CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) )']"
4031,student_1,SELECT lastname FROM list WHERE classroom  =  111,What are the last names of students in room 111?,['SELECT' 'lastname' 'FROM' 'list' 'WHERE' 'classroom' '=' '111'],['select' 'lastname' 'from' 'list' 'where' 'classroom' '=' 'value'],['What' 'are' 'the' 'last' 'names' 'of' 'students' 'in' 'room' '111' '?'],"['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
1430,college_2,SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming',Find the name of the instructors who taught C Programming course before.,"['SELECT' 'T1.name' 'FROM' 'instructor' 'AS' 'T1' 'JOIN' 'teaches' 'AS'
 'T2' 'ON' 'T1.id' '=' 'T2.id' 'JOIN' 'course' 'AS' 'T3' 'ON'
 'T2.course_id' '=' 'T3.course_id' 'WHERE' 'T3.title' '=' ""'C""
 'Programming' ""'""]","['select' 't1' '.' 'name' 'from' 'instructor' 'as' 't1' 'join' 'teaches'
 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'id' 'join' 'course' 'as' 't3'
 'on' 't2' '.' 'course_id' '=' 't3' '.' 'course_id' 'where' 't3' '.'
 'title' '=' 'value']","['Find' 'the' 'name' 'of' 'the' 'instructors' 'who' 'taught' 'C'
 'Programming' 'course' 'before' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
1356,college_2,SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50,How many rooms whose capacity is less than 50 does the Lamberton building have?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'classroom' 'WHERE' 'building' '='
 ""'Lamberton"" ""'"" 'AND' 'capacity' '<' '50']","['select' 'count' '(' '*' ')' 'from' 'classroom' 'where' 'building' '='
 'value' 'and' 'capacity' '<' 'value']","['How' 'many' 'rooms' 'whose' 'capacity' 'is' 'less' 'than' '50' 'does'
 'the' 'Lamberton' 'building' 'have' '?']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
4974,soccer_2,"SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = ""LA""","Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.","['SELECT' 'cName' ',' 'enr' 'FROM' 'College' 'WHERE' 'enr' '>' '10000'
 'AND' 'state' '=' '``' 'LA' ""''""]","['select' 'cname' ',' 'enr' 'from' 'college' 'where' 'enr' '>' 'value'
 'and' 'state' '=' 'value']","['Find' 'the' 'name' ',' 'enrollment' 'of' 'the' 'colleges' 'whose' 'size'
 'is' 'bigger' 'than' '10000' 'and' 'location' 'is' 'in' 'state' 'LA' '.']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
5251,music_2,"SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  ""shared""",How many different songs have shared vocals?,"['SELECT' 'count' '(' 'DISTINCT' 'title' ')' 'FROM' 'vocals' 'AS' 'T1'
 'JOIN' 'songs' 'AS' 'T2' 'ON' 'T1.songid' '=' 'T2.songid' 'WHERE' 'TYPE'
 '=' '``' 'shared' ""''""]","['select' 'count' '(' 'distinct' 'title' ')' 'from' 'vocals' 'as' 't1'
 'join' 'songs' 'as' 't2' 'on' 't1' '.' 'songid' '=' 't2' '.' 'songid'
 'where' 'type' '=' 'value']",['How' 'many' 'different' 'songs' 'have' 'shared' 'vocals' '?'],"['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
6027,game_1,"SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  ""Football""",Show all male student ids who don't play football.,"['SELECT' 'StuID' 'FROM' 'Student' 'WHERE' 'sex' '=' ""'M"" ""'"" 'EXCEPT'
 'SELECT' 'StuID' 'FROM' 'Sportsinfo' 'WHERE' 'sportname' '=' '``'
 'Football' ""''""]","['select' 'stuid' 'from' 'student' 'where' 'sex' '=' 'value' 'except'
 'select' 'stuid' 'from' 'sportsinfo' 'where' 'sportname' '=' 'value']","['Show' 'all' 'male' 'student' 'ids' 'who' 'do' ""n't"" 'play' 'football'
 '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
6059,customers_and_addresses,SELECT avg(order_quantity) FROM order_items,What is the average amount of items ordered in each order?,['SELECT' 'avg' '(' 'order_quantity' ')' 'FROM' 'order_items'],['select' 'avg' '(' 'order_quantity' ')' 'from' 'order_items'],"['What' 'is' 'the' 'average' 'amount' 'of' 'items' 'ordered' 'in' 'each'
 'order' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
90,student_assessment,SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1,What are the ids of the students who registered for course 301 most recently?,"['SELECT' 'student_id' 'FROM' 'student_course_attendance' 'WHERE'
 'course_id' '=' '301' 'ORDER' 'BY' 'date_of_attendance' 'DESC' 'LIMIT'
 '1']","['select' 'student_id' 'from' 'student_course_attendance' 'where'
 'course_id' '=' 'value' 'order' 'by' 'date_of_attendance' 'desc' 'limit'
 'value']","['What' 'are' 'the' 'ids' 'of' 'the' 'students' 'who' 'registered' 'for'
 'course' '301' 'most' 'recently' '?']","['CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) )', 'CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) )', 'CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) )', 'CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) )', 'CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) )', 'CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) )', 'CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) )', 'CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) )', 'CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) )']"
5088,device,SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1,Show the carriers of devices in stock at more than one shop.,"['SELECT' 'T2.Carrier' 'FROM' 'stock' 'AS' 'T1' 'JOIN' 'device' 'AS' 'T2'
 'ON' 'T1.Device_ID' '=' 'T2.Device_ID' 'GROUP' 'BY' 'T1.Device_ID'
 'HAVING' 'COUNT' '(' '*' ')' '>' '1']","['select' 't2' '.' 'carrier' 'from' 'stock' 'as' 't1' 'join' 'device' 'as'
 't2' 'on' 't1' '.' 'device_id' '=' 't2' '.' 'device_id' 'group' 'by' 't1'
 '.' 'device_id' 'having' 'count' '(' '*' ')' '>' 'value']","['Show' 'the' 'carriers' 'of' 'devices' 'in' 'stock' 'at' 'more' 'than'
 'one' 'shop' '.']","['CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") )', 'CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) )']"
3791,e_learning,"SELECT date_of_latest_logon FROM Students WHERE family_name  =  ""Jaskolski"" OR family_name  =  ""Langosh""","Find the latest logon date of the students whose family name is ""Jaskolski"" or ""Langosh"".","['SELECT' 'date_of_latest_logon' 'FROM' 'Students' 'WHERE' 'family_name'
 '=' '``' 'Jaskolski' ""''"" 'OR' 'family_name' '=' '``' 'Langosh' ""''""]","['select' 'date_of_latest_logon' 'from' 'students' 'where' 'family_name'
 '=' 'value' 'or' 'family_name' '=' 'value']","['Find' 'the' 'latest' 'logon' 'date' 'of' 'the' 'students' 'whose'
 'family' 'name' 'is' '``' 'Jaskolski' ""''"" 'or' '``' 'Langosh' ""''"" '.']","['CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) )', 'CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) )', 'CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) )', 'CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) )']"
4189,cre_Doc_Tracking_DB,SELECT count(*) FROM ROLES,Count the total number of roles listed.,['SELECT' 'count' '(' '*' ')' 'FROM' 'ROLES'],['select' 'count' '(' '*' ')' 'from' 'roles'],['Count' 'the' 'total' 'number' 'of' 'roles' 'listed' '.'],"['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
2468,movie_1,"SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  ""Steven Spielberg"")",What is the names of movies whose created year is after all movies directed by Steven Spielberg?,"['SELECT' 'title' 'FROM' 'Movie' 'WHERE' 'YEAR' '>' '(' 'SELECT' 'max' '('
 'YEAR' ')' 'FROM' 'Movie' 'WHERE' 'director' '=' '``' 'Steven'
 'Spielberg' ""''"" ')']","['select' 'title' 'from' 'movie' 'where' 'year' '>' '(' 'select' 'max' '('
 'year' ')' 'from' 'movie' 'where' 'director' '=' 'value' ')']","['What' 'is' 'the' 'names' 'of' 'movies' 'whose' 'created' 'year' 'is'
 'after' 'all' 'movies' 'directed' 'by' 'Steven' 'Spielberg' '?']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
806,coffee_shop,SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2,Which months have more than 2 happy hours?,"['SELECT' 'MONTH' 'FROM' 'happy_hour' 'GROUP' 'BY' 'MONTH' 'HAVING'
 'count' '(' '*' ')' '>' '2']","['select' 'month' 'from' 'happy_hour' 'group' 'by' 'month' 'having'
 'count' '(' '*' ')' '>' 'value']",['Which' 'months' 'have' 'more' 'than' '2' 'happy' 'hours' '?'],"['CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Address"" text, ""Num_of_staff"" text, ""Score"" real, ""Open_Year"" text, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Membership_card"" text, ""Age"" int, ""Time_of_purchase"" int, ""Level_of_membership"" int, ""Address"" text, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""happy_hour"" ( ""HH_ID"" int, ""Shop_ID"" int, ""Month"" text, ""Num_of_shaff_in_charge"" int, PRIMARY KEY (""HH_ID"",""Shop_ID"",""Month""), FOREIGN KEY (""Shop_ID"") REFERENCES `shop`(""Shop_ID"") )', 'CREATE TABLE ""happy_hour_member"" ( ""HH_ID"" int, ""Member_ID"" int, ""Total_amount"" real, PRIMARY KEY (""HH_ID"",""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID"") )']"
2212,formula_1,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",What is the id and last name of the driver who participated in the most races after 2010?,"['SELECT' 'T1.driverid' ',' 'T1.surname' 'FROM' 'drivers' 'AS' 'T1' 'JOIN'
 'results' 'AS' 'T2' 'ON' 'T1.driverid' '=' 'T2.driverid' 'JOIN' 'races'
 'AS' 'T3' 'ON' 'T2.raceid' '=' 'T3.raceid' 'WHERE' 'T3.year' '>' '2010'
 'GROUP' 'BY' 'T1.driverid' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC'
 'LIMIT' '1']","['select' 't1' '.' 'driverid' ',' 't1' '.' 'surname' 'from' 'drivers' 'as'
 't1' 'join' 'results' 'as' 't2' 'on' 't1' '.' 'driverid' '=' 't2' '.'
 'driverid' 'join' 'races' 'as' 't3' 'on' 't2' '.' 'raceid' '=' 't3' '.'
 'raceid' 'where' 't3' '.' 'year' '>' 'value' 'group' 'by' 't1' '.'
 'driverid' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'id' 'and' 'last' 'name' 'of' 'the' 'driver' 'who'
 'participated' 'in' 'the' 'most' 'races' 'after' '2010' '?']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
2920,icfp_1,SELECT lname FROM authors ORDER BY lname,Retrieve all the last names of authors in alphabetical order.,['SELECT' 'lname' 'FROM' 'authors' 'ORDER' 'BY' 'lname'],['select' 'lname' 'from' 'authors' 'order' 'by' 'lname'],"['Retrieve' 'all' 'the' 'last' 'names' 'of' 'authors' 'in' 'alphabetical'
 'order' '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
6071,customers_and_addresses,SELECT DISTINCT product_details FROM products,What are the details of all products?,['SELECT' 'DISTINCT' 'product_details' 'FROM' 'products'],['select' 'distinct' 'product_details' 'from' 'products'],['What' 'are' 'the' 'details' 'of' 'all' 'products' '?'],"['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
2257,machine_repair,"SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",Show names of technicians and the number of machines they are assigned to repair.,"['SELECT' 'T2.Name' ',' 'COUNT' '(' '*' ')' 'FROM' 'repair_assignment'
 'AS' 'T1' 'JOIN' 'technician' 'AS' 'T2' 'ON' 'T1.technician_ID' '='
 'T2.technician_ID' 'GROUP' 'BY' 'T2.Name']","['select' 't2' '.' 'name' ',' 'count' '(' '*' ')' 'from'
 'repair_assignment' 'as' 't1' 'join' 'technician' 'as' 't2' 'on' 't1' '.'
 'technician_id' '=' 't2' '.' 'technician_id' 'group' 'by' 't2' '.' 'name']","['Show' 'names' 'of' 'technicians' 'and' 'the' 'number' 'of' 'machines'
 'they' 'are' 'assigned' 'to' 'repair' '.']","['CREATE TABLE ""repair"" ( ""repair_ID"" int, ""name"" text, ""Launch_Date"" text, ""Notes"" text, PRIMARY KEY (""repair_ID"") )', 'CREATE TABLE ""machine"" ( ""Machine_ID"" int, ""Making_Year"" int, ""Class"" text, ""Team"" text, ""Machine_series"" text, ""value_points"" real, ""quality_rank"" int, PRIMARY KEY (""Machine_ID"") )', 'CREATE TABLE ""technician"" ( ""technician_id"" real, ""Name"" text, ""Team"" text, ""Starting_Year"" real, ""Age"" int, PRIMARY Key (""technician_id"") )', 'CREATE TABLE ""repair_assignment"" ( ""technician_id"" int, ""repair_ID"" int, ""Machine_ID"" int, PRIMARY Key (""technician_id"",""repair_ID"",""Machine_ID""), FOREIGN KEY (`technician_id`) REFERENCES `technician`(`technician_id`), FOREIGN KEY (`repair_ID`) REFERENCES `repair`(`repair_ID`), FOREIGN KEY (`Machine_ID`) REFERENCES `machine`(`Machine_ID`) )']"
3935,hospital_1,"SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",How many rooms are located for each block code?,"['SELECT' 'count' '(' '*' ')' ',' 'T1.blockcode' 'FROM' 'BLOCK' 'AS' 'T1'
 'JOIN' 'room' 'AS' 'T2' 'ON' 'T1.blockfloor' '=' 'T2.blockfloor' 'AND'
 'T1.blockcode' '=' 'T2.blockcode' 'GROUP' 'BY' 'T1.blockcode']","['select' 'count' '(' '*' ')' ',' 't1' '.' 'blockcode' 'from' 'block' 'as'
 't1' 'join' 'room' 'as' 't2' 'on' 't1' '.' 'blockfloor' '=' 't2' '.'
 'blockfloor' 'and' 't1' '.' 'blockcode' '=' 't2' '.' 'blockcode' 'group'
 'by' 't1' '.' 'blockcode']",['How' 'many' 'rooms' 'are' 'located' 'for' 'each' 'block' 'code' '?'],"['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
6939,tracking_orders,SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2,Find the name of the customers who have at most two orders.,"['SELECT' 'T2.customer_name' 'FROM' 'orders' 'AS' 'T1' 'JOIN' 'customers'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'GROUP' 'BY'
 'T2.customer_id' 'HAVING' 'count' '(' '*' ')' '<' '=' '2']","['select' 't2' '.' 'customer_name' 'from' 'orders' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'group' 'by' 't2' '.' 'customer_id' 'having' 'count' '('
 '*' ')' '<' '=' 'value']","['Find' 'the' 'name' 'of' 'the' 'customers' 'who' 'have' 'at' 'most' 'two'
 'orders' '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
3962,hospital_1,SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1,List the names of departments where some physicians are primarily affiliated with.,"['SELECT' 'DISTINCT' 'T2.name' 'FROM' 'affiliated_with' 'AS' 'T1' 'JOIN'
 'department' 'AS' 'T2' 'ON' 'T1.department' '=' 'T2.departmentid' 'WHERE'
 'PrimaryAffiliation' '=' '1']","['select' 'distinct' 't2' '.' 'name' 'from' 'affiliated_with' 'as' 't1'
 'join' 'department' 'as' 't2' 'on' 't1' '.' 'department' '=' 't2' '.'
 'departmentid' 'where' 'primaryaffiliation' '=' 'value']","['List' 'the' 'names' 'of' 'departments' 'where' 'some' 'physicians' 'are'
 'primarily' 'affiliated' 'with' '.']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
1358,college_2,"SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",Find the name and budget of departments whose budgets are more than the average budget.,"['SELECT' 'dept_name' ',' 'budget' 'FROM' 'department' 'WHERE' 'budget'
 '>' '(' 'SELECT' 'avg' '(' 'budget' ')' 'FROM' 'department' ')']","['select' 'dept_name' ',' 'budget' 'from' 'department' 'where' 'budget'
 '>' '(' 'select' 'avg' '(' 'budget' ')' 'from' 'department' ')']","['Find' 'the' 'name' 'and' 'budget' 'of' 'departments' 'whose' 'budgets'
 'are' 'more' 'than' 'the' 'average' 'budget' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
6720,activity_1,SELECT DISTINCT building FROM Faculty,What buildings have faculty offices?,['SELECT' 'DISTINCT' 'building' 'FROM' 'Faculty'],['select' 'distinct' 'building' 'from' 'faculty'],['What' 'buildings' 'have' 'faculty' 'offices' '?'],"['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
4508,document_management,SELECT avg(access_count) FROM documents,Find the average access count across all documents?,['SELECT' 'avg' '(' 'access_count' ')' 'FROM' 'documents'],['select' 'avg' '(' 'access_count' ')' 'from' 'documents'],['Find' 'the' 'average' 'access' 'count' 'across' 'all' 'documents' '?'],"['CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) )', 'CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) )', 'CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) )', 'CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL )', 'CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) )', 'CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) )', 'CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) )', 'CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) )', 'CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) )']"
3654,baseball_1,SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';,Count the number of players who were born in USA and have bats information 'R'.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'player' 'WHERE' 'birth_country' '='
 ""'USA"" ""'"" 'AND' 'bats' '=' ""'R"" ""'"" ';']","['select' 'count' '(' '*' ')' 'from' 'player' 'where' 'birth_country' '='
 'value' 'and' 'bats' '=' 'value']","['Count' 'the' 'number' 'of' 'players' 'who' 'were' 'born' 'in' 'USA'
 'and' 'have' 'bats' 'information' ""'R"" ""'"" '.']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
4426,network_2,"SELECT min(age) ,  job FROM Person GROUP BY job",What is minimum age for different job title?,"['SELECT' 'min' '(' 'age' ')' ',' 'job' 'FROM' 'Person' 'GROUP' 'BY' 'job']","['select' 'min' '(' 'age' ')' ',' 'job' 'from' 'person' 'group' 'by' 'job']",['What' 'is' 'minimum' 'age' 'for' 'different' 'job' 'title' '?'],"['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
5768,customer_complaints,SELECT count(*) FROM customers,How many customers are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'customers'],['select' 'count' '(' '*' ')' 'from' 'customers'],['How' 'many' 'customers' 'are' 'there' '?'],"['CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
828,chinook_1,SELECT Name FROM TRACK WHERE Name LIKE '%you%',What are the names of tracks that contain the the word you in them?,"['SELECT' 'Name' 'FROM' 'TRACK' 'WHERE' 'Name' 'LIKE' ""'"" '%' 'you' '%'
 ""'""]",['select' 'name' 'from' 'track' 'where' 'name' 'like' 'value'],"['What' 'are' 'the' 'names' 'of' 'tracks' 'that' 'contain' 'the' 'the'
 'word' 'you' 'in' 'them' '?']","['CREATE TABLE `Album` ( `AlbumId` integer NOT NULL , `Title` varchar(160) NOT NULL , `ArtistId` integer NOT NULL , PRIMARY KEY (`AlbumId`) , CONSTRAINT `FK_AlbumArtistId` FOREIGN KEY (`ArtistId`) REFERENCES `Artist` (`ArtistId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Artist` ( `ArtistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`ArtistId`) )', 'CREATE TABLE `Customer` ( `CustomerId` integer NOT NULL , `FirstName` varchar(40) NOT NULL , `LastName` varchar(20) NOT NULL , `Company` varchar(80) DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) NOT NULL , `SupportRepId` integer DEFAULT NULL , PRIMARY KEY (`CustomerId`) , CONSTRAINT `FK_CustomerSupportRepId` FOREIGN KEY (`SupportRepId`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Employee` ( `EmployeeId` integer NOT NULL , `LastName` varchar(20) NOT NULL , `FirstName` varchar(20) NOT NULL , `Title` varchar(30) DEFAULT NULL , `ReportsTo` integer DEFAULT NULL , `BirthDate` datetime DEFAULT NULL , `HireDate` datetime DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) DEFAULT NULL , PRIMARY KEY (`EmployeeId`) , CONSTRAINT `FK_EmployeeReportsTo` FOREIGN KEY (`ReportsTo`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Genre` ( `GenreId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`GenreId`) )', 'CREATE TABLE `Invoice` ( `InvoiceId` integer NOT NULL , `CustomerId` integer NOT NULL , `InvoiceDate` datetime NOT NULL , `BillingAddress` varchar(70) DEFAULT NULL , `BillingCity` varchar(40) DEFAULT NULL , `BillingState` varchar(40) DEFAULT NULL , `BillingCountry` varchar(40) DEFAULT NULL , `BillingPostalCode` varchar(10) DEFAULT NULL , `Total` decimal(10,2) NOT NULL , PRIMARY KEY (`InvoiceId`) , CONSTRAINT `FK_InvoiceCustomerId` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `InvoiceLine` ( `InvoiceLineId` integer NOT NULL , `InvoiceId` integer NOT NULL , `TrackId` integer NOT NULL , `UnitPrice` decimal(10,2) NOT NULL , `Quantity` integer NOT NULL , PRIMARY KEY (`InvoiceLineId`) , CONSTRAINT `FK_InvoiceLineInvoiceId` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_InvoiceLineTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `MediaType` ( `MediaTypeId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`MediaTypeId`) )', 'CREATE TABLE `Playlist` ( `PlaylistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`PlaylistId`) )', 'CREATE TABLE `PlaylistTrack` ( `PlaylistId` integer NOT NULL , `TrackId` integer NOT NULL , PRIMARY KEY (`PlaylistId`,`TrackId`) , CONSTRAINT `FK_PlaylistTrackPlaylistId` FOREIGN KEY (`PlaylistId`) REFERENCES `Playlist` (`PlaylistId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_PlaylistTrackTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Track` ( `TrackId` integer NOT NULL , `Name` varchar(200) NOT NULL , `AlbumId` integer DEFAULT NULL , `MediaTypeId` integer NOT NULL , `GenreId` integer DEFAULT NULL , `Composer` varchar(220) DEFAULT NULL , `Milliseconds` integer NOT NULL , `Bytes` integer DEFAULT NULL , `UnitPrice` decimal(10,2) NOT NULL , PRIMARY KEY (`TrackId`) , CONSTRAINT `FK_TrackAlbumId` FOREIGN KEY (`AlbumId`) REFERENCES `Album` (`AlbumId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackGenreId` FOREIGN KEY (`GenreId`) REFERENCES `Genre` (`GenreId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackMediaTypeId` FOREIGN KEY (`MediaTypeId`) REFERENCES `MediaType` (`MediaTypeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
3664,baseball_1,"SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",What are the first name and last name of the players who have weight above 220 or height below 75?,"['SELECT' 'name_first' ',' 'name_last' 'FROM' 'player' 'WHERE' 'weight'
 '>' '220' 'OR' 'height' '<' '75']","['select' 'name_first' ',' 'name_last' 'from' 'player' 'where' 'weight'
 '>' 'value' 'or' 'height' '<' 'value']","['What' 'are' 'the' 'first' 'name' 'and' 'last' 'name' 'of' 'the'
 'players' 'who' 'have' 'weight' 'above' '220' 'or' 'height' 'below' '75'
 '?']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
652,journal_committee,SELECT Name FROM editor WHERE Age  >  25,List the names of editors who are older than 25.,['SELECT' 'Name' 'FROM' 'editor' 'WHERE' 'Age' '>' '25'],['select' 'name' 'from' 'editor' 'where' 'age' '>' 'value'],['List' 'the' 'names' 'of' 'editors' 'who' 'are' 'older' 'than' '25' '.'],"['CREATE TABLE ""journal"" ( ""Journal_ID"" int, ""Date"" text, ""Theme"" text, ""Sales"" int, PRIMARY KEY (""Journal_ID"") )', 'CREATE TABLE ""editor"" ( ""Editor_ID"" int, ""Name"" text, ""Age"" real, PRIMARY KEY (""Editor_ID"") )', 'CREATE TABLE ""journal_committee"" ( ""Editor_ID"" int, ""Journal_ID"" int, ""Work_Type"" text, PRIMARY KEY (""Editor_ID"",""Journal_ID""), FOREIGN KEY (""Editor_ID"") REFERENCES `editor`(""Editor_ID""), FOREIGN KEY (""Journal_ID"") REFERENCES `journal`(""Journal_ID"") )']"
1896,school_finance,SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10,List all the names of schools with an endowment amount smaller than or equal to 10.,"['SELECT' 'T2.school_name' 'FROM' 'endowment' 'AS' 'T1' 'JOIN' 'school'
 'AS' 'T2' 'ON' 'T1.school_id' '=' 'T2.school_id' 'GROUP' 'BY'
 'T1.school_id' 'HAVING' 'sum' '(' 'T1.amount' ')' '<' '=' '10']","['select' 't2' '.' 'school_name' 'from' 'endowment' 'as' 't1' 'join'
 'school' 'as' 't2' 'on' 't1' '.' 'school_id' '=' 't2' '.' 'school_id'
 'group' 'by' 't1' '.' 'school_id' 'having' 'sum' '(' 't1' '.' 'amount'
 ')' '<' '=' 'value']","['List' 'all' 'the' 'names' 'of' 'schools' 'with' 'an' 'endowment'
 'amount' 'smaller' 'than' 'or' 'equal' 'to' '10' '.']","['CREATE TABLE ""School"" ( ""School_id"" text, ""School_name"" text, ""Location"" text, ""Mascot"" text, ""Enrollment"" int, ""IHSAA_Class"" text, ""IHSAA_Football_Class"" text, ""County"" text, PRIMARY KEY (""School_id"") )', 'CREATE TABLE ""budget"" ( ""School_id"" int, ""Year"" int, ""Budgeted"" int, ""total_budget_percent_budgeted"" real, ""Invested"" int, ""total_budget_percent_invested"" real, ""Budget_invested_percent"" text, PRIMARY KEY(""School_id"",""YEAR""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"") )', 'CREATE TABLE ""endowment"" ( ""endowment_id"" int, ""School_id"" int, ""donator_name"" text, ""amount"" real, PRIMARY KEY(""endowment_id""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"") )']"
276,twitter_1,SELECT count(*) FROM user_profiles,How many users are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'user_profiles'],['select' 'count' '(' '*' ')' 'from' 'user_profiles'],['How' 'many' 'users' 'are' 'there' '?'],"['CREATE TABLE `follows` ( `f1` int(11) NOT NULL, `f2` int(11) NOT NULL, PRIMARY KEY (`f1`,`f2`), FOREIGN KEY (`f1`) REFERENCES `user_profiles`(`uid`), FOREIGN KEY (`f2`) REFERENCES `user_profiles`(`uid`) )', 'CREATE TABLE `tweets` ( `id` bigint(20) NOT NULL, `uid` int(11) NOT NULL, `text` char(140) NOT NULL, `createdate` datetime DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`), FOREIGN KEY (`uid`) REFERENCES `user_profiles`(`uid`) )', 'CREATE TABLE ""user_profiles"" (`uid` int(11) NOT NULL, `name` varchar(255) DEFAULT NULL, `email` varchar(255) DEFAULT NULL, `partitionid` int(11) DEFAULT NULL, `followers` int(11) DEFAULT NULL, PRIMARY KEY (`uid`))']"
354,flight_1,"SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft","Return the minimum, average and maximum distances traveled across all aircrafts.","['SELECT' 'min' '(' 'distance' ')' ',' 'avg' '(' 'distance' ')' ',' 'max'
 '(' 'distance' ')' 'FROM' 'Aircraft']","['select' 'min' '(' 'distance' ')' ',' 'avg' '(' 'distance' ')' ',' 'max'
 '(' 'distance' ')' 'from' 'aircraft']","['Return' 'the' 'minimum' ',' 'average' 'and' 'maximum' 'distances'
 'traveled' 'across' 'all' 'aircrafts' '.']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
5303,manufactory_1,SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?,"['SELECT' 'name' 'FROM' 'manufacturers' 'WHERE' 'revenue' '<' '(' 'SELECT'
 'min' '(' 'revenue' ')' 'FROM' 'manufacturers' 'WHERE' 'headquarter' '='
 ""'Austin"" ""'"" ')']","['select' 'name' 'from' 'manufacturers' 'where' 'revenue' '<' '(' 'select'
 'min' '(' 'revenue' ')' 'from' 'manufacturers' 'where' 'headquarter' '='
 'value' ')']","['What' 'are' 'the' 'names' 'of' 'companies' 'with' 'revenue' 'less'
 'than' 'the' 'lowest' 'revenue' 'of' 'any' 'manufacturer' 'in' 'Austin'
 '?']","['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
2614,inn_1,"SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",Find the id and name of the most expensive base price room.,"['SELECT' 'RoomId' ',' 'roomName' 'FROM' 'Rooms' 'ORDER' 'BY' 'basePrice'
 'DESC' 'LIMIT' '1' ';']","['select' 'roomid' ',' 'roomname' 'from' 'rooms' 'order' 'by' 'baseprice'
 'desc' 'limit' 'value']","['Find' 'the' 'id' 'and' 'name' 'of' 'the' 'most' 'expensive' 'base'
 'price' 'room' '.']","['CREATE TABLE ""Rooms"" ( \t""RoomId"" TEXT PRIMARY KEY,\t""roomName"" TEXT, \t""beds"" INTEGER, \t""bedType"" TEXT, \t""maxOccupancy"" INTEGER, \t""basePrice"" INTEGER, \t""decor"" TEXT);', 'CREATE TABLE ""Reservations"" ( \t""Code"" INTEGER PRIMARY KEY, \t""Room"" TEXT, \t""CheckIn"" TEXT, \t""CheckOut"" TEXT, \t""Rate"" REAL, \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Adults"" INTEGER, \t""Kids"" INTEGER,\tFOREIGN KEY (Room) REFERENCES Rooms(RoomId));']"
1984,phone_market,"SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",Show different carriers of phones together with the number of phones with each carrier.,"['SELECT' 'Carrier' ',' 'COUNT' '(' '*' ')' 'FROM' 'phone' 'GROUP' 'BY'
 'Carrier']","['select' 'carrier' ',' 'count' '(' '*' ')' 'from' 'phone' 'group' 'by'
 'carrier']","['Show' 'different' 'carriers' 'of' 'phones' 'together' 'with' 'the'
 'number' 'of' 'phones' 'with' 'each' 'carrier' '.']","['CREATE TABLE ""phone"" ( ""Name"" text, ""Phone_ID"" int, ""Memory_in_G"" int, ""Carrier"" text, ""Price"" real, PRIMARY KEY (""Phone_ID"") )', 'CREATE TABLE ""market"" ( ""Market_ID"" int, ""District"" text, ""Num_of_employees"" int, ""Num_of_shops"" real, ""Ranking"" int, PRIMARY KEY (""Market_ID"") )', 'CREATE TABLE ""phone_market"" ( ""Market_ID"" int, ""Phone_ID"" text, ""Num_of_stock"" int, PRIMARY KEY (""Market_ID"",""Phone_ID""), FOREIGN KEY (""Market_ID"") REFERENCES `market`(""Market_ID""), FOREIGN KEY (""Phone_ID"") REFERENCES `phone`(""Phone_ID"") )']"
1155,body_builder,SELECT Birth_Date FROM People ORDER BY Height ASC,What are the birthdays of people in ascending order of height?,['SELECT' 'Birth_Date' 'FROM' 'People' 'ORDER' 'BY' 'Height' 'ASC'],['select' 'birth_date' 'from' 'people' 'order' 'by' 'height' 'asc'],"['What' 'are' 'the' 'birthdays' 'of' 'people' 'in' 'ascending' 'order'
 'of' 'height' '?']","['CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") )']"
2734,election,SELECT count(*) FROM county,How many counties are there in total?,['SELECT' 'count' '(' '*' ')' 'FROM' 'county'],['select' 'count' '(' '*' ')' 'from' 'county'],['How' 'many' 'counties' 'are' 'there' 'in' 'total' '?'],"['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
2492,movie_1,"SELECT director FROM Movie WHERE director != ""null"" GROUP BY director HAVING count(*)  =  1",What are the names of the directors who made exactly one movie excluding director NULL?,"['SELECT' 'director' 'FROM' 'Movie' 'WHERE' 'director' '!' '=' '``' 'null'
 ""''"" 'GROUP' 'BY' 'director' 'HAVING' 'count' '(' '*' ')' '=' '1']","['select' 'director' 'from' 'movie' 'where' 'director' '!' '=' 'value'
 'group' 'by' 'director' 'having' 'count' '(' '*' ')' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'directors' 'who' 'made' 'exactly'
 'one' 'movie' 'excluding' 'director' 'NULL' '?']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
6287,city_record,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1,"In February, which city marks the highest temperature?","['SELECT' 'T1.city' 'FROM' 'city' 'AS' 'T1' 'JOIN' 'temperature' 'AS' 'T2'
 'ON' 'T1.city_id' '=' 'T2.city_id' 'ORDER' 'BY' 'T2.Feb' 'DESC' 'LIMIT'
 '1']","['select' 't1' '.' 'city' 'from' 'city' 'as' 't1' 'join' 'temperature'
 'as' 't2' 'on' 't1' '.' 'city_id' '=' 't2' '.' 'city_id' 'order' 'by'
 't2' '.' 'feb' 'desc' 'limit' 'value']","['In' 'February' ',' 'which' 'city' 'marks' 'the' 'highest' 'temperature'
 '?']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""City"" text, ""Hanzi"" text, ""Hanyu_Pinyin"" text, ""Regional_Population"" int, ""GDP"" real, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""match"" ( ""Match_ID"" int, ""Date"" text, ""Venue"" text, ""Score"" text, ""Result"" text, ""Competition"" text, PRIMARY KEY (""Match_ID"") )', 'CREATE TABLE ""temperature"" ( ""City_ID"" int, ""Jan"" real, ""Feb"" real, ""Mar"" real, ""Apr"" real, ""Jun"" real, ""Jul"" real, ""Aug"" real, ""Sep"" real, ""Oct"" real, ""Nov"" real, ""Dec"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (`City_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""hosting_city"" ( ""Year"" int, ""Match_ID"" int, ""Host_City"" text, PRIMARY KEY (""Year""), FOREIGN KEY (`Host_City`) REFERENCES `city`(`City_ID`), FOREIGN KEY (`Match_ID`) REFERENCES `match`(`Match_ID`) )']"
2134,company_1,SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston',Find the names of departments that are located in Houston.,"['SELECT' 't1.dname' 'FROM' 'department' 'AS' 't1' 'JOIN' 'dept_locations'
 'AS' 't2' 'ON' 't1.dnumber' '=' 't2.dnumber' 'WHERE' 't2.dlocation' '='
 ""'Houston"" ""'""]","['select' 't1' '.' 'dname' 'from' 'department' 'as' 't1' 'join'
 'dept_locations' 'as' 't2' 'on' 't1' '.' 'dnumber' '=' 't2' '.' 'dnumber'
 'where' 't2' '.' 'dlocation' '=' 'value']","['Find' 'the' 'names' 'of' 'departments' 'that' 'are' 'located' 'in'
 'Houston' '.']","['CREATE TABLE works_on( Essn INTEGER, Pno INTEGER, Hours REAL, PRIMARY KEY(Essn, Pno))', 'CREATE TABLE employee( Fname TEXT, Minit TEXT, Lname TEXT, Ssn INTEGER PRIMARY KEY, Bdate TEXT, Address TEXT, Sex TEXT, Salary INTEGER, Super_ssn INTEGER, Dno INTEGER)', 'CREATE TABLE department( Dname TEXT, Dnumber INTEGER PRIMARY KEY, Mgr_ssn INTEGER, Mgr_start_date TEXT)', 'CREATE TABLE project( Pname Text, Pnumber INTEGER PRIMARY KEY, Plocation TEXT, Dnum INTEGER)', 'CREATE TABLE dependent( Essn INTEGER, Dependent_name TEXT, Sex TEXT, Bdate TEXT, Relationship TEXT, PRIMARY KEY(Essn, Dependent_name))', 'CREATE TABLE dept_locations( Dnumber INTEGER, Dlocation TEXT, PRIMARY KEY(Dnumber, Dlocation))']"
1916,protein_institute,"SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'","Show the names and locations of institutions that are founded after 1990 and have the type ""Private"".","['SELECT' 'institution' ',' 'LOCATION' 'FROM' 'institution' 'WHERE'
 'founded' '>' '1990' 'AND' 'TYPE' '=' ""'Private"" ""'""]","['select' 'institution' ',' 'location' 'from' 'institution' 'where'
 'founded' '>' 'value' 'and' 'type' '=' 'value']","['Show' 'the' 'names' 'and' 'locations' 'of' 'institutions' 'that' 'are'
 'founded' 'after' '1990' 'and' 'have' 'the' 'type' '``' 'Private' ""''""
 '.']","['CREATE TABLE ""building"" ( ""building_id"" text, ""Name"" text, ""Street_address"" text, ""Years_as_tallest"" text, ""Height_feet"" int, ""Floors"" int, PRIMARY KEY(""building_id"") )', 'CREATE TABLE ""Institution"" ( ""Institution_id"" text, ""Institution"" text, ""Location"" text, ""Founded"" real, ""Type"" text, ""Enrollment"" int, ""Team"" text, ""Primary_Conference"" text, ""building_id"" text, PRIMARY KEY(""Institution_id""), FOREIGN KEY (""building_id"") REFERENCES ""building""(""building_id"") )', 'CREATE TABLE ""protein"" ( ""common_name"" text, ""protein_name"" text, ""divergence_from_human_lineage"" real, ""accession_number"" text, ""sequence_length"" real, ""sequence_identity_to_human_protein"" text, ""Institution_id"" text, PRIMARY KEY(""common_name""), FOREIGN KEY(""Institution_id"") REFERENCES ""Institution""(""Institution_id"") )']"
4330,tracking_grants_for_research,"SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",What is the organisation type and id of the organisation which has the most number of research staff?,"['SELECT' 'T1.organisation_type' ',' 'T1.organisation_id' 'FROM'
 'Organisations' 'AS' 'T1' 'JOIN' 'Research_Staff' 'AS' 'T2' 'ON'
 'T1.organisation_id' '=' 'T2.employer_organisation_id' 'GROUP' 'BY'
 'T1.organisation_id' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'organisation_type' ',' 't1' '.' 'organisation_id'
 'from' 'organisations' 'as' 't1' 'join' 'research_staff' 'as' 't2' 'on'
 't1' '.' 'organisation_id' '=' 't2' '.' 'employer_organisation_id'
 'group' 'by' 't1' '.' 'organisation_id' 'order' 'by' 'count' '(' '*' ')'
 'desc' 'limit' 'value']","['What' 'is' 'the' 'organisation' 'type' 'and' 'id' 'of' 'the'
 'organisation' 'which' 'has' 'the' 'most' 'number' 'of' 'research'
 'staff' '?']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
6703,driving_school,"SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE ""%a%""",How many lessons were taught by a staff member whose first name has the letter 'a' in it?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'Lessons' 'AS' 'T1' 'JOIN' 'Staff'
 'AS' 'T2' 'ON' 'T1.staff_id' '=' 'T2.staff_id' 'WHERE' 'T2.first_name'
 'LIKE' '``' '%' 'a' '%' ""''""]","['select' 'count' '(' '*' ')' 'from' 'lessons' 'as' 't1' 'join' 'staff'
 'as' 't2' 'on' 't1' '.' 'staff_id' '=' 't2' '.' 'staff_id' 'where' 't2'
 '.' 'first_name' 'like' 'value']","['How' 'many' 'lessons' 'were' 'taught' 'by' 'a' 'staff' 'member' 'whose'
 'first' 'name' 'has' 'the' 'letter' ""'a"" ""'"" 'in' 'it' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
4570,company_office,"SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",Whah are the name of each industry and the number of companies in that industry?,"['SELECT' 'Industry' ',' 'COUNT' '(' '*' ')' 'FROM' 'Companies' 'GROUP'
 'BY' 'Industry']","['select' 'industry' ',' 'count' '(' '*' ')' 'from' 'companies' 'group'
 'by' 'industry']","['Whah' 'are' 'the' 'name' 'of' 'each' 'industry' 'and' 'the' 'number'
 'of' 'companies' 'in' 'that' 'industry' '?']","['CREATE TABLE ""buildings"" ( ""id"" int, ""name"" text, ""City"" text, ""Height"" int, ""Stories"" int, ""Status"" text, PRIMARY KEY(""id"") )', 'CREATE TABLE ""Companies"" ( ""id"" int, ""name"" text, ""Headquarters"" text, ""Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value_billion"" text, PRIMARY KEY (""id"") )', 'CREATE TABLE ""Office_locations"" ( ""building_id"" int, ""company_id"" int, ""move_in_year"" int, PRIMARY KEY (""building_id"", ""company_id""), FOREIGN KEY (""building_id"") REFERENCES ""buildings""(""id""), FOREIGN KEY (""company_id"") REFERENCES ""Companies""(""id"") )']"
5613,swimming,SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006,Which countries do not have a stadium that was opened after 2006?,"['SELECT' 'country' 'FROM' 'stadium' 'EXCEPT' 'SELECT' 'country' 'FROM'
 'stadium' 'WHERE' 'opening_year' '>' '2006']","['select' 'country' 'from' 'stadium' 'except' 'select' 'country' 'from'
 'stadium' 'where' 'opening_year' '>' 'value']","['Which' 'countries' 'do' 'not' 'have' 'a' 'stadium' 'that' 'was' 'opened'
 'after' '2006' '?']","['CREATE TABLE ""swimmer"" ( ""ID"" int, ""name"" text, ""Nationality"" text, ""meter_100"" real, ""meter_200"" text, ""meter_300"" text, ""meter_400"" text, ""meter_500"" text, ""meter_600"" text, ""meter_700"" text, ""Time"" text, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""stadium"" ( ""ID"" int, ""name"" text, ""Capacity"" int, ""City"" text, ""Country"" text, ""Opening_year"" int, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""event"" ( ""ID"" int, ""Name"" text, ""Stadium_ID"" int, ""Year"" text, PRIMARY KEY (""ID""), FOREIGN KEY (`Stadium_ID`) REFERENCES `stadium`(`ID`) )', 'CREATE TABLE ""record"" ( ""ID"" int, ""Result"" text, ""Swimmer_ID"" int, ""Event_ID"" int, PRIMARY KEY (""Swimmer_ID"",""Event_ID""), FOREIGN KEY (`Event_ID`) REFERENCES `event`(`ID`), FOREIGN KEY (`Swimmer_ID`) REFERENCES `swimmer`(`ID`) )']"
3994,hospital_1,SELECT count(*) FROM appointment,How many appointments are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'appointment'],['select' 'count' '(' '*' ')' 'from' 'appointment'],['How' 'many' 'appointments' 'are' 'there' '?'],"['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
2967,sakila_1,"SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",What is the title and id of the film that has the greatest number of copies in inventory?,"['SELECT' 'T1.title' ',' 'T1.film_id' 'FROM' 'film' 'AS' 'T1' 'JOIN'
 'inventory' 'AS' 'T2' 'ON' 'T1.film_id' '=' 'T2.film_id' 'GROUP' 'BY'
 'T1.film_id' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'title' ',' 't1' '.' 'film_id' 'from' 'film' 'as' 't1'
 'join' 'inventory' 'as' 't2' 'on' 't1' '.' 'film_id' '=' 't2' '.'
 'film_id' 'group' 'by' 't1' '.' 'film_id' 'order' 'by' 'count' '(' '*'
 ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'title' 'and' 'id' 'of' 'the' 'film' 'that' 'has' 'the'
 'greatest' 'number' 'of' 'copies' 'in' 'inventory' '?']","['CREATE TABLE actor ( actor_id SMALLINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id) )', 'CREATE TABLE address ( address_id SMALLINT UNSIGNED NOT NULL, address VARCHAR(50) NOT NULL, address2 VARCHAR(50) DEFAULT NULL, district VARCHAR(20) NOT NULL, city_id SMALLINT UNSIGNED NOT NULL, postal_code VARCHAR(10) DEFAULT NULL, phone VARCHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (address_id), FOREIGN KEY (city_id) REFERENCES city (city_id) )', 'CREATE TABLE category ( category_id TINYINT UNSIGNED NOT NULL, name VARCHAR(25) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (category_id) )', 'CREATE TABLE city ( city_id SMALLINT UNSIGNED NOT NULL, city VARCHAR(50) NOT NULL, country_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (city_id), FOREIGN KEY (country_id) REFERENCES country (country_id) )', 'CREATE TABLE country ( country_id SMALLINT UNSIGNED NOT NULL, country VARCHAR(50) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (country_id) )', 'CREATE TABLE customer ( customer_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, email VARCHAR(50) DEFAULT NULL, address_id SMALLINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, create_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (customer_id), FOREIGN KEY (address_id) REFERENCES address (address_id), FOREIGN KEY (store_id) REFERENCES store (store_id) )', ""CREATE TABLE film ( film_id SMALLINT UNSIGNED NOT NULL, title VARCHAR(255) NOT NULL, description TEXT DEFAULT NULL, release_year YEAR DEFAULT NULL, language_id TINYINT UNSIGNED NOT NULL, original_language_id TINYINT UNSIGNED DEFAULT NULL, rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3, rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99, length SMALLINT UNSIGNED DEFAULT NULL, replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99, rating DEFAULT 'G', special_features DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id), FOREIGN KEY (language_id) REFERENCES language (language_id), FOREIGN KEY (original_language_id) REFERENCES language (language_id) )"", 'CREATE TABLE film_actor ( actor_id SMALLINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id,film_id), FOREIGN KEY (actor_id) REFERENCES actor (actor_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE film_category ( film_id SMALLINT UNSIGNED NOT NULL, category_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id, category_id), FOREIGN KEY (film_id) REFERENCES film (film_id), FOREIGN KEY (category_id) REFERENCES category (category_id) )', 'CREATE TABLE film_text ( film_id SMALLINT NOT NULL, title VARCHAR(255) NOT NULL, description TEXT, PRIMARY KEY (film_id) )', 'CREATE TABLE inventory ( inventory_id MEDIUMINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (inventory_id), FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE language ( language_id TINYINT UNSIGNED NOT NULL, name CHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (language_id) )', 'CREATE TABLE payment ( payment_id SMALLINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, staff_id TINYINT UNSIGNED NOT NULL, rental_id INT DEFAULT NULL, amount DECIMAL(5,2) NOT NULL, payment_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (payment_id), FOREIGN KEY (rental_id) REFERENCES rental (rental_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id) )', 'CREATE TABLE rental ( rental_id INT NOT NULL, rental_date DATETIME NOT NULL, inventory_id MEDIUMINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, return_date DATETIME DEFAULT NULL, staff_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (rental_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id), FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id) )', 'CREATE TABLE staff ( staff_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, picture BLOB DEFAULT NULL, email VARCHAR(50) DEFAULT NULL, store_id TINYINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, username VARCHAR(16) NOT NULL, password VARCHAR(40) DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )', 'CREATE TABLE store ( store_id TINYINT UNSIGNED NOT NULL, manager_staff_id TINYINT UNSIGNED NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (store_id), FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )']"
2538,county_public_safety,"SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",What are the minimum and maximum crime rate of counties?,"['SELECT' 'min' '(' 'Crime_rate' ')' ',' 'max' '(' 'Crime_rate' ')' 'FROM'
 'county_public_safety']","['select' 'min' '(' 'crime_rate' ')' ',' 'max' '(' 'crime_rate' ')' 'from'
 'county_public_safety']","['What' 'are' 'the' 'minimum' 'and' 'maximum' 'crime' 'rate' 'of'
 'counties' '?']","['CREATE TABLE ""county_public_safety"" ( ""County_ID"" int, ""Name"" text, ""Population"" int, ""Police_officers"" int, ""Residents_per_officer"" int, ""Case_burden"" int, ""Crime_rate"" real, ""Police_force"" text, ""Location"" text, PRIMARY KEY (""County_ID"") )', 'CREATE TABLE ""city"" ( ""City_ID"" int, ""County_ID"" int, ""Name"" text, ""White"" real, ""Black"" real, ""Amerindian"" real, ""Asian"" real, ""Multiracial"" real, ""Hispanic"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (""County_ID"") REFERENCES ""county_public_safety""(""County_ID"") )']"
3579,music_1,SELECT song_name FROM song ORDER BY resolution,Give me a list of the names of all songs ordered by their resolution.,['SELECT' 'song_name' 'FROM' 'song' 'ORDER' 'BY' 'resolution'],['select' 'song_name' 'from' 'song' 'order' 'by' 'resolution'],"['Give' 'me' 'a' 'list' 'of' 'the' 'names' 'of' 'all' 'songs' 'ordered'
 'by' 'their' 'resolution' '.']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
906,insurance_fnol,SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1,Find the claim that has the largest total settlement amount. Return the effective date of the claim.,"['SELECT' 't1.Effective_Date' 'FROM' 'claims' 'AS' 't1' 'JOIN'
 'settlements' 'AS' 't2' 'ON' 't1.claim_id' '=' 't2.claim_id' 'GROUP' 'BY'
 't1.claim_id' 'ORDER' 'BY' 'sum' '(' 't2.settlement_amount' ')' 'DESC'
 'LIMIT' '1']","['select' 't1' '.' 'effective_date' 'from' 'claims' 'as' 't1' 'join'
 'settlements' 'as' 't2' 'on' 't1' '.' 'claim_id' '=' 't2' '.' 'claim_id'
 'group' 'by' 't1' '.' 'claim_id' 'order' 'by' 'sum' '(' 't2' '.'
 'settlement_amount' ')' 'desc' 'limit' 'value']","['Find' 'the' 'claim' 'that' 'has' 'the' 'largest' 'total' 'settlement'
 'amount' '.' 'Return' 'the' 'effective' 'date' 'of' 'the' 'claim' '.']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) )', 'CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) )', 'CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) )', 'CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )']"
1693,epinions_1,"SELECT avg(rating) ,  max(rating) FROM review",Find the average and maximum rating of all reviews.,"['SELECT' 'avg' '(' 'rating' ')' ',' 'max' '(' 'rating' ')' 'FROM'
 'review']","['select' 'avg' '(' 'rating' ')' ',' 'max' '(' 'rating' ')' 'from'
 'review']",['Find' 'the' 'average' 'and' 'maximum' 'rating' 'of' 'all' 'reviews' '.'],"['CREATE TABLE `item` ( `i_id` integer NOT NULL , `title` varchar(20) DEFAULT NULL , PRIMARY KEY (`i_id`) )', 'CREATE TABLE `review` ( `a_id` integer NOT NULL PRIMARY KEY , `u_id` integer NOT NULL , `i_id` integer NOT NULL , `rating` integer DEFAULT NULL , `rank` integer DEFAULT NULL , FOREIGN KEY (`u_id`) REFERENCES `useracct`(`u_id`) , FOREIGN KEY (`i_id`) REFERENCES `item`(`i_id`) )', 'CREATE TABLE `useracct` ( `u_id` integer NOT NULL , `name` varchar(128) DEFAULT NULL , PRIMARY KEY (`u_id`) )', 'CREATE TABLE ""trust"" (`source_u_id` integer NOT NULL, `target_u_id` integer NOT NULL, `trust` integer NOT NULL, FOREIGN KEY (`source_u_id`) REFERENCES `useracct`(`u_id`), FOREIGN KEY (`target_u_id`) REFERENCES `useracct`(`u_id`))']"
1641,wedding,"SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)",Show the name and age for all male people who don't have a wedding.,"['SELECT' 'name' ',' 'age' 'FROM' 'people' 'WHERE' 'is_male' '=' ""'T"" ""'""
 'AND' 'people_id' 'NOT' 'IN' '(' 'SELECT' 'male_id' 'FROM' 'wedding' ')']","['select' 'name' ',' 'age' 'from' 'people' 'where' 'is_male' '=' 'value'
 'and' 'people_id' 'not' 'in' '(' 'select' 'male_id' 'from' 'wedding' ')']","['Show' 'the' 'name' 'and' 'age' 'for' 'all' 'male' 'people' 'who' 'do'
 ""n't"" 'have' 'a' 'wedding' '.']","['CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Country"" text, ""Is_Male"" text, ""Age"" int, PRIMARY KEY (""People_ID"") )', 'CREATE TABLE ""church"" ( ""Church_ID"" int, ""Name"" text, ""Organized_by"" text, ""Open_Date"" int, ""Continuation_of"" text, PRIMARY KEY (""Church_ID"") )', 'CREATE TABLE ""wedding"" ( ""Church_ID"" int, ""Male_ID"" int, ""Female_ID"" int, ""Year"" int, PRIMARY KEY (""Church_ID"",""Male_ID"",""Female_ID""), FOREIGN KEY (""Church_ID"") REFERENCES `church`(""Church_ID""), FOREIGN KEY (""Male_ID"") REFERENCES `people`(""People_ID""), FOREIGN KEY (""Female_ID"") REFERENCES `people`(""People_ID"") )']"
756,race_track,"SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track","Return the minimum, maximum, and average seating across all tracks.","['SELECT' 'min' '(' 'seating' ')' ',' 'max' '(' 'seating' ')' ',' 'avg'
 '(' 'seating' ')' 'FROM' 'track']","['select' 'min' '(' 'seating' ')' ',' 'max' '(' 'seating' ')' ',' 'avg'
 '(' 'seating' ')' 'from' 'track']","['Return' 'the' 'minimum' ',' 'maximum' ',' 'and' 'average' 'seating'
 'across' 'all' 'tracks' '.']","['CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") )', 'CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") )']"
3521,hr_1,"SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id","display the department name, city, and state province for each department.","['SELECT' 'T1.department_name' ',' 'T2.city' ',' 'T2.state_province'
 'FROM' 'departments' 'AS' 'T1' 'JOIN' 'locations' 'AS' 'T2' 'ON'
 'T2.location_id' '=' 'T1.location_id']","['select' 't1' '.' 'department_name' ',' 't2' '.' 'city' ',' 't2' '.'
 'state_province' 'from' 'departments' 'as' 't1' 'join' 'locations' 'as'
 't2' 'on' 't2' '.' 'location_id' '=' 't1' '.' 'location_id']","['display' 'the' 'department' 'name' ',' 'city' ',' 'and' 'state'
 'province' 'for' 'each' 'department' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
1031,phone_1,"SELECT T1.Char_cells ,  T1.Pixels ,  T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = ""LG-P760"";","Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is ""LG-P760"".","['SELECT' 'T1.Char_cells' ',' 'T1.Pixels' ',' 'T1.Hardware_colours' 'FROM'
 'screen_mode' 'AS' 'T1' 'JOIN' 'phone' 'AS' 'T2' 'ON' 'T1.Graphics_mode'
 '=' 'T2.screen_mode' 'WHERE' 'T2.Hardware_Model_name' '=' '``' 'LG-P760'
 ""''"" ';']","['select' 't1' '.' 'char_cells' ',' 't1' '.' 'pixels' ',' 't1' '.'
 'hardware_colours' 'from' 'screen_mode' 'as' 't1' 'join' 'phone' 'as'
 't2' 'on' 't1' '.' 'graphics_mode' '=' 't2' '.' 'screen_mode' 'where'
 't2' '.' 'hardware_model_name' '=' 'value']","['Find' 'the' 'Char' 'cells' ',' 'Pixels' 'and' 'Hardware' 'colours' 'for'
 'the' 'screen' 'of' 'the' 'phone' 'whose' 'hardware' 'model' 'name' 'is'
 '``' 'LG-P760' ""''"" '.']","['CREATE TABLE ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") )', 'CREATE TABLE ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") )', 'CREATE TABLE ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) )']"
6177,music_4,"SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",Please list the age and famous title of artists in descending order of age.,"['SELECT' 'Famous_Title' ',' 'Age' 'FROM' 'artist' 'ORDER' 'BY' 'Age'
 'DESC']","['select' 'famous_title' ',' 'age' 'from' 'artist' 'order' 'by' 'age'
 'desc']","['Please' 'list' 'the' 'age' 'and' 'famous' 'title' 'of' 'artists' 'in'
 'descending' 'order' 'of' 'age' '.']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Artist"" text, ""Age"" int, ""Famous_Title"" text, ""Famous_Release_date"" text, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""volume"" ( ""Volume_ID"" int, ""Volume_Issue"" text, ""Issue_Date"" text, ""Weeks_on_Top"" real, ""Song"" text, ""Artist_ID"" int, PRIMARY KEY (""Volume_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""music_festival"" ( ""ID"" int, ""Music_Festival"" text, ""Date_of_ceremony"" text, ""Category"" text, ""Volume"" int, ""Result"" text, PRIMARY KEY (`ID`), FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`) )']"
5606,swimming,SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1,Find the name of the stadium that has the maximum capacity.,"['SELECT' 'name' 'FROM' 'stadium' 'ORDER' 'BY' 'capacity' 'DESC' 'LIMIT'
 '1']","['select' 'name' 'from' 'stadium' 'order' 'by' 'capacity' 'desc' 'limit'
 'value']","['Find' 'the' 'name' 'of' 'the' 'stadium' 'that' 'has' 'the' 'maximum'
 'capacity' '.']","['CREATE TABLE ""swimmer"" ( ""ID"" int, ""name"" text, ""Nationality"" text, ""meter_100"" real, ""meter_200"" text, ""meter_300"" text, ""meter_400"" text, ""meter_500"" text, ""meter_600"" text, ""meter_700"" text, ""Time"" text, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""stadium"" ( ""ID"" int, ""name"" text, ""Capacity"" int, ""City"" text, ""Country"" text, ""Opening_year"" int, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""event"" ( ""ID"" int, ""Name"" text, ""Stadium_ID"" int, ""Year"" text, PRIMARY KEY (""ID""), FOREIGN KEY (`Stadium_ID`) REFERENCES `stadium`(`ID`) )', 'CREATE TABLE ""record"" ( ""ID"" int, ""Result"" text, ""Swimmer_ID"" int, ""Event_ID"" int, PRIMARY KEY (""Swimmer_ID"",""Event_ID""), FOREIGN KEY (`Event_ID`) REFERENCES `event`(`ID`), FOREIGN KEY (`Swimmer_ID`) REFERENCES `swimmer`(`ID`) )']"
3548,music_1,"SELECT count(*) FROM artist WHERE country  =  ""Bangladesh""",How many Bangladeshi artists are listed?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'artist' 'WHERE' 'country' '=' '``'
 'Bangladesh' ""''""]","['select' 'count' '(' '*' ')' 'from' 'artist' 'where' 'country' '='
 'value']",['How' 'many' 'Bangladeshi' 'artists' 'are' 'listed' '?'],"['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
4353,tracking_grants_for_research,SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher',What is the complete description of the job of a researcher?,"['SELECT' 'role_description' 'FROM' 'Staff_Roles' 'WHERE' 'role_code' '='
 ""'researcher"" ""'""]","['select' 'role_description' 'from' 'staff_roles' 'where' 'role_code' '='
 'value']","['What' 'is' 'the' 'complete' 'description' 'of' 'the' 'job' 'of' 'a'
 'researcher' '?']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
5370,tracking_software_problems,"SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = ""Bosco""",Find the ids of the problems that are reported by the staff whose last name is Bosco.,"['SELECT' 'T1.problem_id' 'FROM' 'problems' 'AS' 'T1' 'JOIN' 'staff' 'AS'
 'T2' 'ON' 'T1.reported_by_staff_id' '=' 'T2.staff_id' 'WHERE'
 'T2.staff_last_name' '=' '``' 'Bosco' ""''""]","['select' 't1' '.' 'problem_id' 'from' 'problems' 'as' 't1' 'join' 'staff'
 'as' 't2' 'on' 't1' '.' 'reported_by_staff_id' '=' 't2' '.' 'staff_id'
 'where' 't2' '.' 'staff_last_name' '=' 'value']","['Find' 'the' 'ids' 'of' 'the' 'problems' 'that' 'are' 'reported' 'by'
 'the' 'staff' 'whose' 'last' 'name' 'is' 'Bosco' '.']","['CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) )', 'CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) )', 'CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) )', 'CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) )', 'CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
6585,wine_1,SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006),What are the names of wines that are more expensive then all wines made in the year 2006?,"['SELECT' 'Name' 'FROM' 'WINE' 'WHERE' 'Price' '>' '(' 'SELECT' 'max' '('
 'Price' ')' 'FROM' 'WINE' 'WHERE' 'YEAR' '=' '2006' ')']","['select' 'name' 'from' 'wine' 'where' 'price' '>' '(' 'select' 'max' '('
 'price' ')' 'from' 'wine' 'where' 'year' '=' 'value' ')']","['What' 'are' 'the' 'names' 'of' 'wines' 'that' 'are' 'more' 'expensive'
 'then' 'all' 'wines' 'made' 'in' 'the' 'year' '2006' '?']","['CREATE TABLE ""grapes"" ( \t""ID"" INTEGER PRIMARY KEY, \t""Grape"" TEXT UNIQUE, \t""Color"" TEXT );', 'CREATE TABLE ""appellations"" ( \t""No"" INTEGER PRIMARY KEY, \t""Appelation"" TEXT UNIQUE, \t""County"" TEXT, \t""State"" TEXT, \t""Area"" TEXT, \t""isAVA"" TEXT);', 'CREATE TABLE ""wine"" ( \t""No"" INTEGER, \t""Grape"" TEXT, \t""Winery"" TEXT, \t""Appelation"" TEXT, \t""State"" TEXT, \t""Name"" TEXT, \t""Year"" INTEGER, \t""Price"" INTEGER, \t""Score"" INTEGER, \t""Cases"" INTEGER, \t""Drink"" TEXT,\tFOREIGN KEY (Grape) REFERENCES grapes(Grape),\tFOREIGN KEY (Appelation) REFERENCES appellations(Appelation));']"
6224,ship_1,"SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",How many captains with younger than 50 are in each rank?,"['SELECT' 'count' '(' '*' ')' ',' 'rank' 'FROM' 'captain' 'WHERE' 'age'
 '<' '50' 'GROUP' 'BY' 'rank']","['select' 'count' '(' '*' ')' ',' 'rank' 'from' 'captain' 'where' 'age'
 '<' 'value' 'group' 'by' 'rank']","['How' 'many' 'captains' 'with' 'younger' 'than' '50' 'are' 'in' 'each'
 'rank' '?']","['CREATE TABLE ""captain"" ( ""Captain_ID"" int, ""Name"" text, ""Ship_ID"" int, ""age"" text, ""Class"" text, ""Rank"" text, PRIMARY KEY (""Captain_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES ""Ship""(""Ship_ID"") )', 'CREATE TABLE ""Ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Built_Year"" real, ""Class"" text, ""Flag"" text, PRIMARY KEY (""Ship_ID"") )']"
4683,college_3,SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5,What are the name of courses that have at least five enrollments?,"['SELECT' 'T1.CName' 'FROM' 'COURSE' 'AS' 'T1' 'JOIN' 'ENROLLED_IN' 'AS'
 'T2' 'ON' 'T1.CID' '=' 'T2.CID' 'GROUP' 'BY' 'T2.CID' 'HAVING' 'COUNT'
 '(' '*' ')' '>' '=' '5']","['select' 't1' '.' 'cname' 'from' 'course' 'as' 't1' 'join' 'enrolled_in'
 'as' 't2' 'on' 't1' '.' 'cid' '=' 't2' '.' 'cid' 'group' 'by' 't2' '.'
 'cid' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['What' 'are' 'the' 'name' 'of' 'courses' 'that' 'have' 'at' 'least'
 'five' 'enrollments' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )', 'CREATE TABLE Department ( DNO INTEGER PRIMARY KEY, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER )', 'CREATE TABLE Member_of ( FacID INTEGER, DNO INTEGER, Appt_Type VARCHAR(15), FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Course ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER, Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER, FOREIGN KEY(Instructor) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Minor_in ( StuID INTEGER, DNO INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Enrolled_in ( StuID INTEGER, CID VARCHAR(7), Grade VARCHAR(2), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(CID) REFERENCES Course(CID), FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade) )', 'CREATE TABLE Gradeconversion ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT )']"
6697,driving_school,"SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;","For each payment method, how many payments were made?","['SELECT' 'payment_method_code' ',' 'count' '(' '*' ')' 'FROM'
 'Customer_Payments' 'GROUP' 'BY' 'payment_method_code' ';']","['select' 'payment_method_code' ',' 'count' '(' '*' ')' 'from'
 'customer_payments' 'group' 'by' 'payment_method_code']","['For' 'each' 'payment' 'method' ',' 'how' 'many' 'payments' 'were' 'made'
 '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
3363,sports_competition,SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20,List the position of players with average number of points scored by players of that position bigger than 20.,"['SELECT' 'POSITION' 'FROM' 'player' 'GROUP' 'BY' 'name' 'HAVING' 'avg'
 '(' 'Points' ')' '>' '=' '20']","['select' 'position' 'from' 'player' 'group' 'by' 'name' 'having' 'avg'
 '(' 'points' ')' '>' '=' 'value']","['List' 'the' 'position' 'of' 'players' 'with' 'average' 'number' 'of'
 'points' 'scored' 'by' 'players' 'of' 'that' 'position' 'bigger' 'than'
 '20' '.']","['CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") )', 'CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") )', 'CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) )']"
2105,cre_Doc_Control_Systems,"SELECT role_description FROM ROLES WHERE role_code = ""ED"";",What is the description of role code ED?,"['SELECT' 'role_description' 'FROM' 'ROLES' 'WHERE' 'role_code' '=' '``'
 'ED' ""''"" ';']","['select' 'role_description' 'from' 'roles' 'where' 'role_code' '='
 'value']",['What' 'is' 'the' 'description' 'of' 'role' 'code' 'ED' '?'],"['CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) )', 'CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) )', 'CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) )', 'CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) )', 'CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) )', 'CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) )', 'CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) )', 'CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) )', 'CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) )', 'CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) )', 'CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) )']"
5792,customer_complaints,"SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",What is the average price of the products for each category?,"['SELECT' 'avg' '(' 'product_price' ')' ',' 'product_category_code' 'FROM'
 'products' 'GROUP' 'BY' 'product_category_code']","['select' 'avg' '(' 'product_price' ')' ',' 'product_category_code' 'from'
 'products' 'group' 'by' 'product_category_code']","['What' 'is' 'the' 'average' 'price' 'of' 'the' 'products' 'for' 'each'
 'category' '?']","['CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
6898,tracking_orders,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,Which customer made the most orders? Find the customer name.,"['SELECT' 'T1.customer_name' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'GROUP' 'BY'
 'T1.customer_id' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1' 'join'
 'orders' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id'
 'group' 'by' 't1' '.' 'customer_id' 'order' 'by' 'count' '(' '*' ')'
 'desc' 'limit' 'value']","['Which' 'customer' 'made' 'the' 'most' 'orders' '?' 'Find' 'the'
 'customer' 'name' '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
5446,voter_2,SELECT count(*) FROM VOTING_RECORD,Find the number of voting records in total.,['SELECT' 'count' '(' '*' ')' 'FROM' 'VOTING_RECORD'],['select' 'count' '(' '*' ')' 'from' 'voting_record'],['Find' 'the' 'number' 'of' 'voting' 'records' 'in' 'total' '.'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
5662,customers_and_products_contacts,"SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products","Show the minimum, maximum, average price for all products.","['SELECT' 'min' '(' 'product_price' ')' ',' 'max' '(' 'product_price' ')'
 ',' 'avg' '(' 'product_price' ')' 'FROM' 'products']","['select' 'min' '(' 'product_price' ')' ',' 'max' '(' 'product_price' ')'
 ',' 'avg' '(' 'product_price' ')' 'from' 'products']","['Show' 'the' 'minimum' ',' 'maximum' ',' 'average' 'price' 'for' 'all'
 'products' '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(15), `product_name` VARCHAR(80), `product_price` DOUBLE NULL )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15), `customer_number` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) )', 'CREATE TABLE `Contacts` ( `contact_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(50), `contact_phone` VARCHAR(80) )', 'CREATE TABLE `Customer_Address_History` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_date` DATETIME NOT NULL, `order_status_code` VARCHAR(15), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER NOT NULL , `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(80), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
143,bike_1,"SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE ""12/%""",What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?,"['SELECT' 'T1.name' ',' 'T1.id' 'FROM' 'station' 'AS' 'T1' 'JOIN' 'status'
 'AS' 'T2' 'ON' 'T1.id' '=' 'T2.station_id' 'GROUP' 'BY' 'T2.station_id'
 'HAVING' 'avg' '(' 'T2.bikes_available' ')' '>' '14' 'UNION' 'SELECT'
 'name' ',' 'id' 'FROM' 'station' 'WHERE' 'installation_date' 'LIKE' '``'
 '12/' '%' ""''""]","['select' 't1' '.' 'name' ',' 't1' '.' 'id' 'from' 'station' 'as' 't1'
 'join' 'status' 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'station_id'
 'group' 'by' 't2' '.' 'station_id' 'having' 'avg' '(' 't2' '.'
 'bikes_available' ')' '>' 'value' 'union' 'select' 'name' ',' 'id' 'from'
 'station' 'where' 'installation_date' 'like' 'value']","['What' 'are' 'the' 'names' 'and' 'ids' 'of' 'stations' 'that' 'had'
 'more' 'than' '14' 'bikes' 'available' 'on' 'average' 'or' 'were'
 'installed' 'in' 'December' '?']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
2176,formula_1,"SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = ""Lewis""",What are the names and years of all races that had a driver with the last name Lewis?,"['SELECT' 'T2.name' ',' 'T2.year' 'FROM' 'results' 'AS' 'T1' 'JOIN'
 'races' 'AS' 'T2' 'ON' 'T1.raceid' '=' 'T2.raceid' 'JOIN' 'drivers' 'AS'
 'T3' 'ON' 'T1.driverid' '=' 'T3.driverid' 'WHERE' 'T3.forename' '=' '``'
 'Lewis' ""''""]","['select' 't2' '.' 'name' ',' 't2' '.' 'year' 'from' 'results' 'as' 't1'
 'join' 'races' 'as' 't2' 'on' 't1' '.' 'raceid' '=' 't2' '.' 'raceid'
 'join' 'drivers' 'as' 't3' 'on' 't1' '.' 'driverid' '=' 't3' '.'
 'driverid' 'where' 't3' '.' 'forename' '=' 'value']","['What' 'are' 'the' 'names' 'and' 'years' 'of' 'all' 'races' 'that' 'had'
 'a' 'driver' 'with' 'the' 'last' 'name' 'Lewis' '?']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
3362,sports_competition,"SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION","For each position, what is the average number of points for players in that position?","['SELECT' 'POSITION' ',' 'avg' '(' 'Points' ')' 'FROM' 'player' 'GROUP'
 'BY' 'POSITION']","['select' 'position' ',' 'avg' '(' 'points' ')' 'from' 'player' 'group'
 'by' 'position']","['For' 'each' 'position' ',' 'what' 'is' 'the' 'average' 'number' 'of'
 'points' 'for' 'players' 'in' 'that' 'position' '?']","['CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") )', 'CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") )', 'CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) )']"
4978,soccer_2,SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName,List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.,"['SELECT' 'cName' 'FROM' 'College' 'WHERE' 'enr' '>' '18000' 'ORDER' 'BY'
 'cName']","['select' 'cname' 'from' 'college' 'where' 'enr' '>' 'value' 'order' 'by'
 'cname']","['List' 'the' 'name' 'of' 'the' 'colleges' 'whose' 'enrollment' 'is'
 'greater' '18000' 'sorted' 'by' 'the' 'college' ""'s"" 'name' '.']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
2091,pilot_record,SELECT POSITION FROM pilot WHERE Join_Year	 <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year	 >  2005,Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.,"['SELECT' 'POSITION' 'FROM' 'pilot' 'WHERE' 'Join_Year' '<' '2000'
 'INTERSECT' 'SELECT' 'POSITION' 'FROM' 'pilot' 'WHERE' 'Join_Year' '>'
 '2005']","['select' 'position' 'from' 'pilot' 'where' 'join_year' '<' 'value'
 'intersect' 'select' 'position' 'from' 'pilot' 'where' 'join_year' '>'
 'value']","['Show' 'the' 'pilot' 'positions' 'that' 'have' 'both' 'pilots' 'joining'
 'after' 'year' '2005' 'and' 'pilots' 'joining' 'before' '2000' '.']","['CREATE TABLE ""aircraft"" ( ""Aircraft_ID"" int, ""Order_Year"" int, ""Manufacturer"" text, ""Model"" text, ""Fleet_Series"" text, ""Powertrain"" text, ""Fuel_Propulsion"" text, PRIMARY KEY (""Aircraft_ID"") )', 'CREATE TABLE ""pilot"" ( ""Pilot_ID"" int, ""Pilot_name"" text, ""Rank"" int, ""Age"" int, ""Nationality"" text, ""Position"" text, ""Join_Year"" int, ""Team"" text, PRIMARY KEY (""Pilot_ID"") )', 'CREATE TABLE ""pilot_record"" ( ""Record_ID"" int, ""Pilot_ID"" int, ""Aircraft_ID"" int, ""Date"" text, PRIMARY KEY (""Pilot_ID"", ""Aircraft_ID"", ""Date""), FOREIGN KEY (`Pilot_ID`) REFERENCES `pilot`(`Pilot_ID`), FOREIGN KEY (`Aircraft_ID`) REFERENCES `aircraft`(`Aircraft_ID`) )']"
3677,baseball_1,SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010,What is the total salary paid by team Boston Red Stockings in 2010?,"['SELECT' 'sum' '(' 'T1.salary' ')' 'FROM' 'salary' 'AS' 'T1' 'JOIN'
 'team' 'AS' 'T2' 'ON' 'T1.team_id' '=' 'T2.team_id_br' 'WHERE' 'T2.name'
 '=' ""'Boston"" 'Red' 'Stockings' ""'"" 'AND' 'T1.year' '=' '2010']","['select' 'sum' '(' 't1' '.' 'salary' ')' 'from' 'salary' 'as' 't1' 'join'
 'team' 'as' 't2' 'on' 't1' '.' 'team_id' '=' 't2' '.' 'team_id_br'
 'where' 't2' '.' 'name' '=' 'value' 'and' 't1' '.' 'year' '=' 'value']","['What' 'is' 'the' 'total' 'salary' 'paid' 'by' 'team' 'Boston' 'Red'
 'Stockings' 'in' '2010' '?']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
2148,local_govt_in_alabama,SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1,What is the id of the event with the most participants?,"['SELECT' 'Event_ID' 'FROM' 'Participants_in_Events' 'GROUP' 'BY'
 'Event_ID' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'event_id' 'from' 'participants_in_events' 'group' 'by'
 'event_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'id' 'of' 'the' 'event' 'with' 'the' 'most'
 'participants' '?']","['CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15) NOT NULL, PRIMARY KEY (Service_ID) )', 'CREATE TABLE Participants ( Participant_ID INTEGER NOT NULL, Participant_Type_Code CHAR(15) NOT NULL, Participant_Details VARCHAR(255), PRIMARY KEY (Participant_ID) )', 'CREATE TABLE Events ( Event_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, Event_Details VARCHAR(255), PRIMARY KEY (Event_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Participants_in_Events ( Event_ID INTEGER NOT NULL, Participant_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID, Participant_ID), FOREIGN KEY (Participant_ID) REFERENCES Participants (Participant_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )']"
192,bike_1,"SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id","For each end station id, what is its name, latitude, and minimum duration for trips ended there?","['SELECT' 'T1.name' ',' 'T1.lat' ',' 'min' '(' 'T2.duration' ')' 'FROM'
 'station' 'AS' 'T1' 'JOIN' 'trip' 'AS' 'T2' 'ON' 'T1.id' '='
 'T2.end_station_id' 'GROUP' 'BY' 'T2.end_station_id']","['select' 't1' '.' 'name' ',' 't1' '.' 'lat' ',' 'min' '(' 't2' '.'
 'duration' ')' 'from' 'station' 'as' 't1' 'join' 'trip' 'as' 't2' 'on'
 't1' '.' 'id' '=' 't2' '.' 'end_station_id' 'group' 'by' 't2' '.'
 'end_station_id']","['For' 'each' 'end' 'station' 'id' ',' 'what' 'is' 'its' 'name' ','
 'latitude' ',' 'and' 'minimum' 'duration' 'for' 'trips' 'ended' 'there'
 '?']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
6577,wine_1,"SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation",What are the average price and score of wines grouped by appelation?,"['SELECT' 'avg' '(' 'Price' ')' ',' 'avg' '(' 'Score' ')' ',' 'Appelation'
 'FROM' 'WINE' 'GROUP' 'BY' 'Appelation']","['select' 'avg' '(' 'price' ')' ',' 'avg' '(' 'score' ')' ',' 'appelation'
 'from' 'wine' 'group' 'by' 'appelation']","['What' 'are' 'the' 'average' 'price' 'and' 'score' 'of' 'wines' 'grouped'
 'by' 'appelation' '?']","['CREATE TABLE ""grapes"" ( \t""ID"" INTEGER PRIMARY KEY, \t""Grape"" TEXT UNIQUE, \t""Color"" TEXT );', 'CREATE TABLE ""appellations"" ( \t""No"" INTEGER PRIMARY KEY, \t""Appelation"" TEXT UNIQUE, \t""County"" TEXT, \t""State"" TEXT, \t""Area"" TEXT, \t""isAVA"" TEXT);', 'CREATE TABLE ""wine"" ( \t""No"" INTEGER, \t""Grape"" TEXT, \t""Winery"" TEXT, \t""Appelation"" TEXT, \t""State"" TEXT, \t""Name"" TEXT, \t""Year"" INTEGER, \t""Price"" INTEGER, \t""Score"" INTEGER, \t""Cases"" INTEGER, \t""Drink"" TEXT,\tFOREIGN KEY (Grape) REFERENCES grapes(Grape),\tFOREIGN KEY (Appelation) REFERENCES appellations(Appelation));']"
6100,customers_and_addresses,"SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  ""Tillman Ernser""","Return the the ""active to date"" of the latest contact channel used by the customer named ""Tillman Ernser"".","['SELECT' 'max' '(' 't2.active_to_date' ')' 'FROM' 'customers' 'AS' 't1'
 'JOIN' 'customer_contact_channels' 'AS' 't2' 'ON' 't1.customer_id' '='
 't2.customer_id' 'WHERE' 't1.customer_name' '=' '``' 'Tillman' 'Ernser'
 ""''""]","['select' 'max' '(' 't2' '.' 'active_to_date' ')' 'from' 'customers' 'as'
 't1' 'join' 'customer_contact_channels' 'as' 't2' 'on' 't1' '.'
 'customer_id' '=' 't2' '.' 'customer_id' 'where' 't1' '.' 'customer_name'
 '=' 'value']","['Return' 'the' 'the' '``' 'active' 'to' 'date' ""''"" 'of' 'the' 'latest'
 'contact' 'channel' 'used' 'by' 'the' 'customer' 'named' '``' 'Tillman'
 'Ernser' ""''"" '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
2895,icfp_1,"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""USA"" AND t2.authorder  =  2 AND t1.lname  =  ""Turon""","Find papers whose second author has last name ""Turon"" and is affiliated with an institution in the country ""USA"".","['SELECT' 't3.title' 'FROM' 'authors' 'AS' 't1' 'JOIN' 'authorship' 'AS'
 't2' 'ON' 't1.authid' '=' 't2.authid' 'JOIN' 'papers' 'AS' 't3' 'ON'
 't2.paperid' '=' 't3.paperid' 'JOIN' 'inst' 'AS' 't4' 'ON' 't2.instid'
 '=' 't4.instid' 'WHERE' 't4.country' '=' '``' 'USA' ""''"" 'AND'
 't2.authorder' '=' '2' 'AND' 't1.lname' '=' '``' 'Turon' ""''""]","['select' 't3' '.' 'title' 'from' 'authors' 'as' 't1' 'join' 'authorship'
 'as' 't2' 'on' 't1' '.' 'authid' '=' 't2' '.' 'authid' 'join' 'papers'
 'as' 't3' 'on' 't2' '.' 'paperid' '=' 't3' '.' 'paperid' 'join' 'inst'
 'as' 't4' 'on' 't2' '.' 'instid' '=' 't4' '.' 'instid' 'where' 't4' '.'
 'country' '=' 'value' 'and' 't2' '.' 'authorder' '=' 'value' 'and' 't1'
 '.' 'lname' '=' 'value']","['Find' 'papers' 'whose' 'second' 'author' 'has' 'last' 'name' '``'
 'Turon' ""''"" 'and' 'is' 'affiliated' 'with' 'an' 'institution' 'in' 'the'
 'country' '``' 'USA' ""''"" '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
6642,driving_school,"SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn"";",Which city does staff with first name as Janessa and last name as Sawayn live?,"['SELECT' 'T1.city' 'FROM' 'Addresses' 'AS' 'T1' 'JOIN' 'Staff' 'AS' 'T2'
 'ON' 'T1.address_id' '=' 'T2.staff_address_id' 'WHERE' 'T2.first_name'
 '=' '``' 'Janessa' ""''"" 'AND' 'T2.last_name' '=' '``' 'Sawayn' ""''"" ';']","['select' 't1' '.' 'city' 'from' 'addresses' 'as' 't1' 'join' 'staff' 'as'
 't2' 'on' 't1' '.' 'address_id' '=' 't2' '.' 'staff_address_id' 'where'
 't2' '.' 'first_name' '=' 'value' 'and' 't2' '.' 'last_name' '=' 'value']","['Which' 'city' 'does' 'staff' 'with' 'first' 'name' 'as' 'Janessa' 'and'
 'last' 'name' 'as' 'Sawayn' 'live' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
5503,voter_2,SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2,Which advisors have more than two students?,"['SELECT' 'Advisor' 'FROM' 'STUDENT' 'GROUP' 'BY' 'Advisor' 'HAVING'
 'COUNT' '(' '*' ')' '>' '2']","['select' 'advisor' 'from' 'student' 'group' 'by' 'advisor' 'having'
 'count' '(' '*' ')' '>' 'value']",['Which' 'advisors' 'have' 'more' 'than' 'two' 'students' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
5373,tracking_software_problems,"SELECT problem_id FROM problems WHERE date_problem_reported > ""1978-06-26""",Find the ids of the problems reported after 1978-06-26.,"['SELECT' 'problem_id' 'FROM' 'problems' 'WHERE' 'date_problem_reported'
 '>' '``' '1978-06-26' ""''""]","['select' 'problem_id' 'from' 'problems' 'where' 'date_problem_reported'
 '>' 'value']","['Find' 'the' 'ids' 'of' 'the' 'problems' 'reported' 'after' '1978-06-26'
 '.']","['CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) )', 'CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) )', 'CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) )', 'CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) )', 'CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
6154,music_4,"SELECT Date_of_ceremony ,  RESULT FROM music_festival",What are the dates of ceremony and results for each music festival?,"['SELECT' 'Date_of_ceremony' ',' 'RESULT' 'FROM' 'music_festival']","['select' 'date_of_ceremony' ',' 'result' 'from' 'music_festival']","['What' 'are' 'the' 'dates' 'of' 'ceremony' 'and' 'results' 'for' 'each'
 'music' 'festival' '?']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Artist"" text, ""Age"" int, ""Famous_Title"" text, ""Famous_Release_date"" text, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""volume"" ( ""Volume_ID"" int, ""Volume_Issue"" text, ""Issue_Date"" text, ""Weeks_on_Top"" real, ""Song"" text, ""Artist_ID"" int, PRIMARY KEY (""Volume_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""music_festival"" ( ""ID"" int, ""Music_Festival"" text, ""Date_of_ceremony"" text, ""Category"" text, ""Volume"" int, ""Result"" text, PRIMARY KEY (`ID`), FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`) )']"
3934,hospital_1,"SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",Find the number of rooms for different block code?,"['SELECT' 'count' '(' '*' ')' ',' 'T1.blockcode' 'FROM' 'BLOCK' 'AS' 'T1'
 'JOIN' 'room' 'AS' 'T2' 'ON' 'T1.blockfloor' '=' 'T2.blockfloor' 'AND'
 'T1.blockcode' '=' 'T2.blockcode' 'GROUP' 'BY' 'T1.blockcode']","['select' 'count' '(' '*' ')' ',' 't1' '.' 'blockcode' 'from' 'block' 'as'
 't1' 'join' 'room' 'as' 't2' 'on' 't1' '.' 'blockfloor' '=' 't2' '.'
 'blockfloor' 'and' 't1' '.' 'blockcode' '=' 't2' '.' 'blockcode' 'group'
 'by' 't1' '.' 'blockcode']",['Find' 'the' 'number' 'of' 'rooms' 'for' 'different' 'block' 'code' '?'],"['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
4593,solvency_ii,"SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",Show the names of products and the number of events they are in.,"['SELECT' 'T1.Product_Name' ',' 'COUNT' '(' '*' ')' 'FROM' 'Products' 'AS'
 'T1' 'JOIN' 'Products_in_Events' 'AS' 'T2' 'ON' 'T1.Product_ID' '='
 'T2.Product_ID' 'GROUP' 'BY' 'T1.Product_Name']","['select' 't1' '.' 'product_name' ',' 'count' '(' '*' ')' 'from'
 'products' 'as' 't1' 'join' 'products_in_events' 'as' 't2' 'on' 't1' '.'
 'product_id' '=' 't2' '.' 'product_id' 'group' 'by' 't1' '.'
 'product_name']","['Show' 'the' 'names' 'of' 'products' 'and' 'the' 'number' 'of' 'events'
 'they' 'are' 'in' '.']","['CREATE TABLE Addresses ( Address_ID INTEGER NOT NULL , address_details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Products ( Product_ID INTEGER NOT NULL, Product_Type_Code CHAR(15), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Parties ( Party_ID INTEGER NOT NULL, Party_Details VARCHAR(255), PRIMARY KEY (Party_ID) )', 'CREATE TABLE Assets ( Asset_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Asset_ID) )', 'CREATE TABLE Channels ( Channel_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Channel_ID) )', 'CREATE TABLE Finances ( Finance_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Finance_ID) )', 'CREATE TABLE Events ( Event_ID INTEGER NOT NULL , Address_ID INTEGER, Channel_ID INTEGER NOT NULL, Event_Type_Code CHAR(15), Finance_ID INTEGER NOT NULL, Location_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID), UNIQUE (Event_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Finance_ID) REFERENCES Finances (Finance_ID) )', 'CREATE TABLE Products_in_Events ( Product_in_Event_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Product_in_Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Parties_in_Events ( Party_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Role_Code CHAR(15), PRIMARY KEY (Party_ID, Event_ID), FOREIGN KEY (Party_ID) REFERENCES Parties (Party_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )', 'CREATE TABLE Agreements ( Document_ID INTEGER NOT NULL , Event_ID INTEGER NOT NULL, PRIMARY KEY (Document_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )', 'CREATE TABLE Assets_in_Events ( Asset_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, PRIMARY KEY (Asset_ID, Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )']"
2228,formula_1,"SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2","What is the id, forename, and number of races for all drivers that have participated in at least 2 races?","['SELECT' 'T1.driverid' ',' 'T1.forename' ',' 'count' '(' '*' ')' 'FROM'
 'drivers' 'AS' 'T1' 'JOIN' 'results' 'AS' 'T2' 'ON' 'T1.driverid' '='
 'T2.driverid' 'JOIN' 'races' 'AS' 'T3' 'ON' 'T2.raceid' '=' 'T3.raceid'
 'GROUP' 'BY' 'T1.driverid' 'HAVING' 'count' '(' '*' ')' '>' '=' '2']","['select' 't1' '.' 'driverid' ',' 't1' '.' 'forename' ',' 'count' '(' '*'
 ')' 'from' 'drivers' 'as' 't1' 'join' 'results' 'as' 't2' 'on' 't1' '.'
 'driverid' '=' 't2' '.' 'driverid' 'join' 'races' 'as' 't3' 'on' 't2' '.'
 'raceid' '=' 't3' '.' 'raceid' 'group' 'by' 't1' '.' 'driverid' 'having'
 'count' '(' '*' ')' '>' '=' 'value']","['What' 'is' 'the' 'id' ',' 'forename' ',' 'and' 'number' 'of' 'races'
 'for' 'all' 'drivers' 'that' 'have' 'participated' 'in' 'at' 'least' '2'
 'races' '?']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
6839,flight_4,SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines',Find the number of different airports which are the destinations of the American Airlines.,"['SELECT' 'count' '(' 'DISTINCT' 'dst_apid' ')' 'FROM' 'airlines' 'AS'
 'T1' 'JOIN' 'routes' 'AS' 'T2' 'ON' 'T1.alid' '=' 'T2.alid' 'WHERE'
 'T1.name' '=' ""'American"" 'Airlines' ""'""]","['select' 'count' '(' 'distinct' 'dst_apid' ')' 'from' 'airlines' 'as'
 't1' 'join' 'routes' 'as' 't2' 'on' 't1' '.' 'alid' '=' 't2' '.' 'alid'
 'where' 't1' '.' 'name' '=' 'value']","['Find' 'the' 'number' 'of' 'different' 'airports' 'which' 'are' 'the'
 'destinations' 'of' 'the' 'American' 'Airlines' '.']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
2310,perpetrator,"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != ""China""","What are the names of perpetrators whose country is not ""China""?","['SELECT' 'T1.Name' 'FROM' 'people' 'AS' 'T1' 'JOIN' 'perpetrator' 'AS'
 'T2' 'ON' 'T1.People_ID' '=' 'T2.People_ID' 'WHERE' 'T2.Country' '!' '='
 '``' 'China' ""''""]","['select' 't1' '.' 'name' 'from' 'people' 'as' 't1' 'join' 'perpetrator'
 'as' 't2' 'on' 't1' '.' 'people_id' '=' 't2' '.' 'people_id' 'where' 't2'
 '.' 'country' '!' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'perpetrators' 'whose' 'country' 'is'
 'not' '``' 'China' ""''"" '?']","['CREATE TABLE ""perpetrator"" ( ""Perpetrator_ID"" int, ""People_ID"" int, ""Date"" text, ""Year"" real, ""Location"" text, ""Country"" text, ""Killed"" int, ""Injured"" int, PRIMARY KEY (""Perpetrator_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Home Town"" text, PRIMARY KEY (""People_ID"") )']"
4202,cre_Doc_Tracking_DB,"SELECT employee_name FROM Employees WHERE role_code  =  ""HR""","Show the names of all the employees with role ""HR"".","['SELECT' 'employee_name' 'FROM' 'Employees' 'WHERE' 'role_code' '=' '``'
 'HR' ""''""]","['select' 'employee_name' 'from' 'employees' 'where' 'role_code' '='
 'value']","['Show' 'the' 'names' 'of' 'all' 'the' 'employees' 'with' 'role' '``' 'HR'
 ""''"" '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
3607,music_1,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",Find the name and country of origin for all artists who have release at least one song of resolution above 900.,"['SELECT' 'T1.artist_name' ',' 'T1.country' 'FROM' 'artist' 'AS' 'T1'
 'JOIN' 'song' 'AS' 'T2' 'ON' 'T1.artist_name' '=' 'T2.artist_name'
 'WHERE' 'T2.resolution' '>' '900' 'GROUP' 'BY' 'T2.artist_name' 'HAVING'
 'count' '(' '*' ')' '>' '=' '1']","['select' 't1' '.' 'artist_name' ',' 't1' '.' 'country' 'from' 'artist'
 'as' 't1' 'join' 'song' 'as' 't2' 'on' 't1' '.' 'artist_name' '=' 't2'
 '.' 'artist_name' 'where' 't2' '.' 'resolution' '>' 'value' 'group' 'by'
 't2' '.' 'artist_name' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['Find' 'the' 'name' 'and' 'country' 'of' 'origin' 'for' 'all' 'artists'
 'who' 'have' 'release' 'at' 'least' 'one' 'song' 'of' 'resolution'
 'above' '900' '.']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
4183,cre_Doc_Tracking_DB,"SELECT location_code ,  location_name FROM Ref_locations",What are all the location codes and location names?,"['SELECT' 'location_code' ',' 'location_name' 'FROM' 'Ref_locations']","['select' 'location_code' ',' 'location_name' 'from' 'ref_locations']",['What' 'are' 'all' 'the' 'location' 'codes' 'and' 'location' 'names' '?'],"['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
5702,dorm_1,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',Find the name of dorms which have both TV Lounge and Study Room as amenities.,"['SELECT' 'T1.dorm_name' 'FROM' 'dorm' 'AS' 'T1' 'JOIN' 'has_amenity' 'AS'
 'T2' 'ON' 'T1.dormid' '=' 'T2.dormid' 'JOIN' 'dorm_amenity' 'AS' 'T3'
 'ON' 'T2.amenid' '=' 'T3.amenid' 'WHERE' 'T3.amenity_name' '=' ""'TV""
 'Lounge' ""'"" 'INTERSECT' 'SELECT' 'T1.dorm_name' 'FROM' 'dorm' 'AS' 'T1'
 'JOIN' 'has_amenity' 'AS' 'T2' 'ON' 'T1.dormid' '=' 'T2.dormid' 'JOIN'
 'dorm_amenity' 'AS' 'T3' 'ON' 'T2.amenid' '=' 'T3.amenid' 'WHERE'
 'T3.amenity_name' '=' ""'Study"" 'Room' ""'""]","['select' 't1' '.' 'dorm_name' 'from' 'dorm' 'as' 't1' 'join'
 'has_amenity' 'as' 't2' 'on' 't1' '.' 'dormid' '=' 't2' '.' 'dormid'
 'join' 'dorm_amenity' 'as' 't3' 'on' 't2' '.' 'amenid' '=' 't3' '.'
 'amenid' 'where' 't3' '.' 'amenity_name' '=' 'value' 'intersect' 'select'
 't1' '.' 'dorm_name' 'from' 'dorm' 'as' 't1' 'join' 'has_amenity' 'as'
 't2' 'on' 't1' '.' 'dormid' '=' 't2' '.' 'dormid' 'join' 'dorm_amenity'
 'as' 't3' 'on' 't2' '.' 'amenid' '=' 't3' '.' 'amenid' 'where' 't3' '.'
 'amenity_name' '=' 'value']","['Find' 'the' 'name' 'of' 'dorms' 'which' 'have' 'both' 'TV' 'Lounge'
 'and' 'Study' 'Room' 'as' 'amenities' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
4362,tracking_grants_for_research,"SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",Show the role description and the id of the project staff involved in most number of project outcomes?,"['SELECT' 'T1.role_description' ',' 'T2.staff_id' 'FROM' 'Staff_Roles'
 'AS' 'T1' 'JOIN' 'Project_Staff' 'AS' 'T2' 'ON' 'T1.role_code' '='
 'T2.role_code' 'JOIN' 'Project_outcomes' 'AS' 'T3' 'ON' 'T2.project_id'
 '=' 'T3.project_id' 'GROUP' 'BY' 'T2.staff_id' 'ORDER' 'BY' 'count' '('
 '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'role_description' ',' 't2' '.' 'staff_id' 'from'
 'staff_roles' 'as' 't1' 'join' 'project_staff' 'as' 't2' 'on' 't1' '.'
 'role_code' '=' 't2' '.' 'role_code' 'join' 'project_outcomes' 'as' 't3'
 'on' 't2' '.' 'project_id' '=' 't3' '.' 'project_id' 'group' 'by' 't2'
 '.' 'staff_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Show' 'the' 'role' 'description' 'and' 'the' 'id' 'of' 'the' 'project'
 'staff' 'involved' 'in' 'most' 'number' 'of' 'project' 'outcomes' '?']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
4980,soccer_2,SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC,Find the name of players whose card is yes in the descending order of training hours.,"['SELECT' 'pName' 'FROM' 'Player' 'WHERE' 'yCard' '=' ""'yes"" ""'"" 'ORDER'
 'BY' 'HS' 'DESC']","['select' 'pname' 'from' 'player' 'where' 'ycard' '=' 'value' 'order' 'by'
 'hs' 'desc']","['Find' 'the' 'name' 'of' 'players' 'whose' 'card' 'is' 'yes' 'in' 'the'
 'descending' 'order' 'of' 'training' 'hours' '.']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
4351,tracking_grants_for_research,"SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC","For each project id, how many staff does it have? List them in increasing order.","['SELECT' 'T1.project_id' ',' 'count' '(' '*' ')' 'FROM' 'Project_Staff'
 'AS' 'T1' 'JOIN' 'Projects' 'AS' 'T2' 'ON' 'T1.project_id' '='
 'T2.project_id' 'GROUP' 'BY' 'T1.project_id' 'ORDER' 'BY' 'count' '(' '*'
 ')' 'ASC']","['select' 't1' '.' 'project_id' ',' 'count' '(' '*' ')' 'from'
 'project_staff' 'as' 't1' 'join' 'projects' 'as' 't2' 'on' 't1' '.'
 'project_id' '=' 't2' '.' 'project_id' 'group' 'by' 't1' '.' 'project_id'
 'order' 'by' 'count' '(' '*' ')' 'asc']","['For' 'each' 'project' 'id' ',' 'how' 'many' 'staff' 'does' 'it' 'have'
 '?' 'List' 'them' 'in' 'increasing' 'order' '.']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
1633,wedding,"SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",Show the organizer and name for churches that opened between 1830 and 1840.,"['SELECT' 'organized_by' ',' 'name' 'FROM' 'church' 'WHERE' 'open_date'
 'BETWEEN' '1830' 'AND' '1840']","['select' 'organized_by' ',' 'name' 'from' 'church' 'where' 'open_date'
 'between' 'value' 'and' 'value']","['Show' 'the' 'organizer' 'and' 'name' 'for' 'churches' 'that' 'opened'
 'between' '1830' 'and' '1840' '.']","['CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Country"" text, ""Is_Male"" text, ""Age"" int, PRIMARY KEY (""People_ID"") )', 'CREATE TABLE ""church"" ( ""Church_ID"" int, ""Name"" text, ""Organized_by"" text, ""Open_Date"" int, ""Continuation_of"" text, PRIMARY KEY (""Church_ID"") )', 'CREATE TABLE ""wedding"" ( ""Church_ID"" int, ""Male_ID"" int, ""Female_ID"" int, ""Year"" int, PRIMARY KEY (""Church_ID"",""Male_ID"",""Female_ID""), FOREIGN KEY (""Church_ID"") REFERENCES `church`(""Church_ID""), FOREIGN KEY (""Male_ID"") REFERENCES `people`(""People_ID""), FOREIGN KEY (""Female_ID"") REFERENCES `people`(""People_ID"") )']"
5066,device,SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1,List the name of the shop with the latest open year.,"['SELECT' 'Shop_Name' 'FROM' 'shop' 'ORDER' 'BY' 'Open_Year' 'DESC'
 'LIMIT' '1']","['select' 'shop_name' 'from' 'shop' 'order' 'by' 'open_year' 'desc'
 'limit' 'value']","['List' 'the' 'name' 'of' 'the' 'shop' 'with' 'the' 'latest' 'open' 'year'
 '.']","['CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") )', 'CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) )']"
2507,movie_1,"SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director","For each director, what is the title and score of their most poorly rated movie?","['SELECT' 'T2.title' ',' 'T1.stars' ',' 'T2.director' ',' 'min' '('
 'T1.stars' ')' 'FROM' 'Rating' 'AS' 'T1' 'JOIN' 'Movie' 'AS' 'T2' 'ON'
 'T1.mID' '=' 'T2.mID' 'GROUP' 'BY' 'T2.director']","['select' 't2' '.' 'title' ',' 't1' '.' 'stars' ',' 't2' '.' 'director'
 ',' 'min' '(' 't1' '.' 'stars' ')' 'from' 'rating' 'as' 't1' 'join'
 'movie' 'as' 't2' 'on' 't1' '.' 'mid' '=' 't2' '.' 'mid' 'group' 'by'
 't2' '.' 'director']","['For' 'each' 'director' ',' 'what' 'is' 'the' 'title' 'and' 'score' 'of'
 'their' 'most' 'poorly' 'rated' 'movie' '?']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
1644,wedding,SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada',Show the names for all females from Canada having a wedding in year 2016.,"['SELECT' 'T2.name' 'FROM' 'wedding' 'AS' 'T1' 'JOIN' 'people' 'AS' 'T2'
 'ON' 'T1.female_id' '=' 'T2.people_id' 'WHERE' 'T1.year' '=' '2016' 'AND'
 'T2.is_male' '=' ""'F"" ""'"" 'AND' 'T2.country' '=' ""'Canada"" ""'""]","['select' 't2' '.' 'name' 'from' 'wedding' 'as' 't1' 'join' 'people' 'as'
 't2' 'on' 't1' '.' 'female_id' '=' 't2' '.' 'people_id' 'where' 't1' '.'
 'year' '=' 'value' 'and' 't2' '.' 'is_male' '=' 'value' 'and' 't2' '.'
 'country' '=' 'value']","['Show' 'the' 'names' 'for' 'all' 'females' 'from' 'Canada' 'having' 'a'
 'wedding' 'in' 'year' '2016' '.']","['CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Country"" text, ""Is_Male"" text, ""Age"" int, PRIMARY KEY (""People_ID"") )', 'CREATE TABLE ""church"" ( ""Church_ID"" int, ""Name"" text, ""Organized_by"" text, ""Open_Date"" int, ""Continuation_of"" text, PRIMARY KEY (""Church_ID"") )', 'CREATE TABLE ""wedding"" ( ""Church_ID"" int, ""Male_ID"" int, ""Female_ID"" int, ""Year"" int, PRIMARY KEY (""Church_ID"",""Male_ID"",""Female_ID""), FOREIGN KEY (""Church_ID"") REFERENCES `church`(""Church_ID""), FOREIGN KEY (""Male_ID"") REFERENCES `people`(""People_ID""), FOREIGN KEY (""Female_ID"") REFERENCES `people`(""People_ID"") )']"
5969,game_1,SELECT count(*) FROM Video_games,How many video games exist?,['SELECT' 'count' '(' '*' ')' 'FROM' 'Video_games'],['select' 'count' '(' '*' ')' 'from' 'video_games'],['How' 'many' 'video' 'games' 'exist' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
130,bike_1,"SELECT COUNT(*) FROM station WHERE city  =  ""Mountain View""",How many stations are in Mountain View?,"['SELECT' 'COUNT' '(' '*' ')' 'FROM' 'station' 'WHERE' 'city' '=' '``'
 'Mountain' 'View' ""''""]",['select' 'count' '(' '*' ')' 'from' 'station' 'where' 'city' '=' 'value'],['How' 'many' 'stations' 'are' 'in' 'Mountain' 'View' '?'],"['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
5472,voter_2,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE,Find the distinct last names of the students who have class president votes.,"['SELECT' 'DISTINCT' 'T1.LName' 'FROM' 'STUDENT' 'AS' 'T1' 'JOIN'
 'VOTING_RECORD' 'AS' 'T2' 'ON' 'T1.StuID' '=' 'T2.CLASS_President_VOTE']","['select' 'distinct' 't1' '.' 'lname' 'from' 'student' 'as' 't1' 'join'
 'voting_record' 'as' 't2' 'on' 't1' '.' 'stuid' '=' 't2' '.'
 'class_president_vote']","['Find' 'the' 'distinct' 'last' 'names' 'of' 'the' 'students' 'who' 'have'
 'class' 'president' 'votes' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
6912,tracking_orders,"SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""On Road"" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""Shipped""","Which customers have both ""On Road"" and ""Shipped"" as order status? List the customer ids.","['SELECT' 'T1.customer_id' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE'
 'T2.order_status' '=' '``' 'On' 'Road' ""''"" 'INTERSECT' 'SELECT'
 'T1.customer_id' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders' 'AS' 'T2'
 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE' 'T2.order_status' '='
 '``' 'Shipped' ""''""]","['select' 't1' '.' 'customer_id' 'from' 'customers' 'as' 't1' 'join'
 'orders' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id'
 'where' 't2' '.' 'order_status' '=' 'value' 'intersect' 'select' 't1' '.'
 'customer_id' 'from' 'customers' 'as' 't1' 'join' 'orders' 'as' 't2' 'on'
 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id' 'where' 't2' '.'
 'order_status' '=' 'value']","['Which' 'customers' 'have' 'both' '``' 'On' 'Road' ""''"" 'and' '``'
 'Shipped' ""''"" 'as' 'order' 'status' '?' 'List' 'the' 'customer' 'ids'
 '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
3133,assets_maintenance,"SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id","List all every engineer's first name, last name, details and coresponding skill description.","['SELECT' 'T1.first_name' ',' 'T1.last_name' ',' 'T1.other_details' ','
 'T3.skill_description' 'FROM' 'Maintenance_Engineers' 'AS' 'T1' 'JOIN'
 'Engineer_Skills' 'AS' 'T2' 'ON' 'T1.engineer_id' '=' 'T2.engineer_id'
 'JOIN' 'Skills' 'AS' 'T3' 'ON' 'T2.skill_id' '=' 'T3.skill_id']","['select' 't1' '.' 'first_name' ',' 't1' '.' 'last_name' ',' 't1' '.'
 'other_details' ',' 't3' '.' 'skill_description' 'from'
 'maintenance_engineers' 'as' 't1' 'join' 'engineer_skills' 'as' 't2' 'on'
 't1' '.' 'engineer_id' '=' 't2' '.' 'engineer_id' 'join' 'skills' 'as'
 't3' 'on' 't2' '.' 'skill_id' '=' 't3' '.' 'skill_id']","['List' 'all' 'every' 'engineer' ""'s"" 'first' 'name' ',' 'last' 'name' ','
 'details' 'and' 'coresponding' 'skill' 'description' '.']","['CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) )', 'CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) )', 'CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) )', 'CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) )', 'CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) )', 'CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) )', 'CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) )', 'CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) )', 'CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) )', 'CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) )']"
3837,e_learning,"SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",What are the student ID and login name of the student who are enrolled in the most courses?,"['SELECT' 'T1.student_id' ',' 'T2.login_name' 'FROM'
 'Student_Course_Enrolment' 'AS' 'T1' 'JOIN' 'Students' 'AS' 'T2' 'ON'
 'T1.student_id' '=' 'T2.student_id' 'GROUP' 'BY' 'T1.student_id' 'ORDER'
 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'student_id' ',' 't2' '.' 'login_name' 'from'
 'student_course_enrolment' 'as' 't1' 'join' 'students' 'as' 't2' 'on'
 't1' '.' 'student_id' '=' 't2' '.' 'student_id' 'group' 'by' 't1' '.'
 'student_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'are' 'the' 'student' 'ID' 'and' 'login' 'name' 'of' 'the'
 'student' 'who' 'are' 'enrolled' 'in' 'the' 'most' 'courses' '?']","['CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) )', 'CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) )', 'CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) )', 'CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) )']"
4337,tracking_grants_for_research,SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100,What is the response received date for the document described as Regular that was granted more than 100 dollars?,"['SELECT' 'T1.response_received_date' 'FROM' 'Documents' 'AS' 'T1' 'JOIN'
 'Document_Types' 'AS' 'T2' 'ON' 'T1.document_type_code' '='
 'T2.document_type_code' 'JOIN' 'Grants' 'AS' 'T3' 'ON' 'T1.grant_id' '='
 'T3.grant_id' 'WHERE' 'T2.document_description' '=' ""'Regular"" ""'"" 'OR'
 'T3.grant_amount' '>' '100']","['select' 't1' '.' 'response_received_date' 'from' 'documents' 'as' 't1'
 'join' 'document_types' 'as' 't2' 'on' 't1' '.' 'document_type_code' '='
 't2' '.' 'document_type_code' 'join' 'grants' 'as' 't3' 'on' 't1' '.'
 'grant_id' '=' 't3' '.' 'grant_id' 'where' 't2' '.'
 'document_description' '=' 'value' 'or' 't3' '.' 'grant_amount' '>'
 'value']","['What' 'is' 'the' 'response' 'received' 'date' 'for' 'the' 'document'
 'described' 'as' 'Regular' 'that' 'was' 'granted' 'more' 'than' '100'
 'dollars' '?']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
3061,loan_1,"SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname","What are the names of the different bank branches, and what are their total loan amounts?","['SELECT' 'sum' '(' 'amount' ')' ',' 'T1.bname' 'FROM' 'bank' 'AS' 'T1'
 'JOIN' 'loan' 'AS' 'T2' 'ON' 'T1.branch_id' '=' 'T2.branch_id' 'GROUP'
 'BY' 'T1.bname']","['select' 'sum' '(' 'amount' ')' ',' 't1' '.' 'bname' 'from' 'bank' 'as'
 't1' 'join' 'loan' 'as' 't2' 'on' 't1' '.' 'branch_id' '=' 't2' '.'
 'branch_id' 'group' 'by' 't1' '.' 'bname']","['What' 'are' 'the' 'names' 'of' 'the' 'different' 'bank' 'branches' ','
 'and' 'what' 'are' 'their' 'total' 'loan' 'amounts' '?']","['CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20))', 'CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID))', 'CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID))']"
6420,cre_Docs_and_Epenses,SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1,Return the code of the document type that is most common.,"['SELECT' 'document_type_code' 'FROM' 'Documents' 'GROUP' 'BY'
 'document_type_code' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'document_type_code' 'from' 'documents' 'group' 'by'
 'document_type_code' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit'
 'value']","['Return' 'the' 'code' 'of' 'the' 'document' 'type' 'that' 'is' 'most'
 'common' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
1289,game_injury,"SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id","Show the name, average attendance, total attendance for stadiums where no accidents happened.","['SELECT' 'name' ',' 'average_attendance' ',' 'total_attendance' 'FROM'
 'stadium' 'EXCEPT' 'SELECT' 'T2.name' ',' 'T2.average_attendance' ','
 'T2.total_attendance' 'FROM' 'game' 'AS' 'T1' 'JOIN' 'stadium' 'AS' 'T2'
 'ON' 'T1.stadium_id' '=' 'T2.id' 'JOIN' 'injury_accident' 'AS' 'T3' 'ON'
 'T1.id' '=' 'T3.game_id']","['select' 'name' ',' 'average_attendance' ',' 'total_attendance' 'from'
 'stadium' 'except' 'select' 't2' '.' 'name' ',' 't2' '.'
 'average_attendance' ',' 't2' '.' 'total_attendance' 'from' 'game' 'as'
 't1' 'join' 'stadium' 'as' 't2' 'on' 't1' '.' 'stadium_id' '=' 't2' '.'
 'id' 'join' 'injury_accident' 'as' 't3' 'on' 't1' '.' 'id' '=' 't3' '.'
 'game_id']","['Show' 'the' 'name' ',' 'average' 'attendance' ',' 'total' 'attendance'
 'for' 'stadiums' 'where' 'no' 'accidents' 'happened' '.']","['CREATE TABLE ""stadium"" ( ""id"" int, ""name"" text, ""Home_Games"" int, ""Average_Attendance"" real, ""Total_Attendance"" real, ""Capacity_Percentage"" real, primary key (""id"") )', 'CREATE TABLE ""game"" ( ""stadium_id"" int, ""id"" int, ""Season"" int, ""Date"" text, ""Home_team"" text, ""Away_team"" text, ""Score"" text, ""Competition"" text, primary key (""id""), foreign key (""stadium_id"") references `stadium`(""id"") )', 'CREATE TABLE ""injury_accident"" ( ""game_id"" int, ""id"" int, ""Player"" text, ""Injury"" text, ""Number_of_matches"" text, ""Source"" text, primary key (""id""), foreign key (""game_id"") references `game`(""id"") )']"
3604,music_1,"SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is","What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?","['SELECT' 'min' '(' 'T1.duration' ')' ',' 'min' '(' 'T2.rating' ')' ','
 'T2.genre_is' 'FROM' 'files' 'AS' 'T1' 'JOIN' 'song' 'AS' 'T2' 'ON'
 'T1.f_id' '=' 'T2.f_id' 'GROUP' 'BY' 'T2.genre_is' 'ORDER' 'BY'
 'T2.genre_is']","['select' 'min' '(' 't1' '.' 'duration' ')' ',' 'min' '(' 't2' '.'
 'rating' ')' ',' 't2' '.' 'genre_is' 'from' 'files' 'as' 't1' 'join'
 'song' 'as' 't2' 'on' 't1' '.' 'f_id' '=' 't2' '.' 'f_id' 'group' 'by'
 't2' '.' 'genre_is' 'order' 'by' 't2' '.' 'genre_is']","['What' 'is' 'the' 'shortest' 'and' 'most' 'poorly' 'rated' 'song' 'for'
 'each' 'genre' ',' 'ordered' 'alphabetically' 'by' 'genre' '?']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
6911,tracking_orders,"SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""On Road"" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""Shipped""","Find the id of the customers who have order status both ""On Road"" and ""Shipped"".","['SELECT' 'T1.customer_id' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE'
 'T2.order_status' '=' '``' 'On' 'Road' ""''"" 'INTERSECT' 'SELECT'
 'T1.customer_id' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders' 'AS' 'T2'
 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE' 'T2.order_status' '='
 '``' 'Shipped' ""''""]","['select' 't1' '.' 'customer_id' 'from' 'customers' 'as' 't1' 'join'
 'orders' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id'
 'where' 't2' '.' 'order_status' '=' 'value' 'intersect' 'select' 't1' '.'
 'customer_id' 'from' 'customers' 'as' 't1' 'join' 'orders' 'as' 't2' 'on'
 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id' 'where' 't2' '.'
 'order_status' '=' 'value']","['Find' 'the' 'id' 'of' 'the' 'customers' 'who' 'have' 'order' 'status'
 'both' '``' 'On' 'Road' ""''"" 'and' '``' 'Shipped' ""''"" '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
2727,storm_record,SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark',What are the names of the storms that affected Denmark?,"['SELECT' 'T3.name' 'FROM' 'affected_region' 'AS' 'T1' 'JOIN' 'region'
 'AS' 'T2' 'ON' 'T1.region_id' '=' 'T2.region_id' 'JOIN' 'storm' 'AS' 'T3'
 'ON' 'T1.storm_id' '=' 'T3.storm_id' 'WHERE' 'T2.region_name' '='
 ""'Denmark"" ""'""]","['select' 't3' '.' 'name' 'from' 'affected_region' 'as' 't1' 'join'
 'region' 'as' 't2' 'on' 't1' '.' 'region_id' '=' 't2' '.' 'region_id'
 'join' 'storm' 'as' 't3' 'on' 't1' '.' 'storm_id' '=' 't3' '.' 'storm_id'
 'where' 't2' '.' 'region_name' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'storms' 'that' 'affected'
 'Denmark' '?']","['CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") )', 'CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") )', 'CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) )']"
6417,cre_Docs_and_Epenses,"SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",List document type codes and the number of documents in each code.,"['SELECT' 'document_type_code' ',' 'count' '(' '*' ')' 'FROM' 'Documents'
 'GROUP' 'BY' 'document_type_code']","['select' 'document_type_code' ',' 'count' '(' '*' ')' 'from' 'documents'
 'group' 'by' 'document_type_code']","['List' 'document' 'type' 'codes' 'and' 'the' 'number' 'of' 'documents'
 'in' 'each' 'code' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
6867,flight_4,"SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name","For each country and airline name, how many routes are there?","['SELECT' 'T1.country' ',' 'T1.name' ',' 'count' '(' '*' ')' 'FROM'
 'airlines' 'AS' 'T1' 'JOIN' 'routes' 'AS' 'T2' 'ON' 'T1.alid' '='
 'T2.alid' 'GROUP' 'BY' 'T1.country' ',' 'T1.name']","['select' 't1' '.' 'country' ',' 't1' '.' 'name' ',' 'count' '(' '*' ')'
 'from' 'airlines' 'as' 't1' 'join' 'routes' 'as' 't2' 'on' 't1' '.'
 'alid' '=' 't2' '.' 'alid' 'group' 'by' 't1' '.' 'country' ',' 't1' '.'
 'name']","['For' 'each' 'country' 'and' 'airline' 'name' ',' 'how' 'many' 'routes'
 'are' 'there' '?']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
6387,cre_Docs_and_Epenses,"SELECT account_id ,  account_details FROM Accounts",Show all account ids and account details.,"['SELECT' 'account_id' ',' 'account_details' 'FROM' 'Accounts']","['select' 'account_id' ',' 'account_details' 'from' 'accounts']",['Show' 'all' 'account' 'ids' 'and' 'account' 'details' '.'],"['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
3245,college_1,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C',What is the first name of students enrolled in class ACCT-211 and got grade C?,"['SELECT' 'T3.stu_fname' 'FROM' 'CLASS' 'AS' 'T1' 'JOIN' 'enroll' 'AS'
 'T2' 'ON' 'T1.class_code' '=' 'T2.class_code' 'JOIN' 'student' 'AS' 'T3'
 'ON' 'T2.stu_num' '=' 'T3.stu_num' 'WHERE' 'T1.crs_code' '=' ""'ACCT-211""
 ""'"" 'AND' 'T2.enroll_grade' '=' ""'C"" ""'""]","['select' 't3' '.' 'stu_fname' 'from' 'class' 'as' 't1' 'join' 'enroll'
 'as' 't2' 'on' 't1' '.' 'class_code' '=' 't2' '.' 'class_code' 'join'
 'student' 'as' 't3' 'on' 't2' '.' 'stu_num' '=' 't3' '.' 'stu_num'
 'where' 't1' '.' 'crs_code' '=' 'value' 'and' 't2' '.' 'enroll_grade' '='
 'value']","['What' 'is' 'the' 'first' 'name' 'of' 'students' 'enrolled' 'in' 'class'
 'ACCT-211' 'and' 'got' 'grade' 'C' '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
2064,party_people,SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member),What are the names of parties that have no members?,"['SELECT' 'party_name' 'FROM' 'party' 'WHERE' 'party_id' 'NOT' 'IN' '('
 'SELECT' 'party_id' 'FROM' 'Member' ')']","['select' 'party_name' 'from' 'party' 'where' 'party_id' 'not' 'in' '('
 'select' 'party_id' 'from' 'member' ')']","['What' 'are' 'the' 'names' 'of' 'parties' 'that' 'have' 'no' 'members'
 '?']","['CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) )', 'CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) )']"
6376,flight_company,SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport',What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?,"['SELECT' 'DISTINCT' 'T2.pilot' 'FROM' 'airport' 'AS' 'T1' 'JOIN' 'flight'
 'AS' 'T2' 'ON' 'T1.id' '=' 'T2.airport_id' 'WHERE' 'T1.country' '='
 ""'United"" 'States' ""'"" 'OR' 'T1.name' '=' ""'Billund"" 'Airport' ""'""]","['select' 'distinct' 't2' '.' 'pilot' 'from' 'airport' 'as' 't1' 'join'
 'flight' 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'airport_id' 'where'
 't1' '.' 'country' '=' 'value' 'or' 't1' '.' 'name' '=' 'value']","['What' 'are' 'the' 'different' 'pilot' 'names' 'who' 'had' 'piloted' 'a'
 'flight' 'in' 'the' 'country' ""'United"" 'States' ""'"" 'or' 'in' 'the'
 'airport' 'named' ""'Billund"" 'Airport' ""'"" '?']","['CREATE TABLE ""airport"" ( ""id"" int, ""City"" text, ""Country"" text, ""IATA"" text, ""ICAO"" text, ""name"" text, primary key(""id"") )', 'CREATE TABLE ""operate_company"" ( ""id"" int, ""name"" text, ""Type"" text, ""Principal_activities"" text, ""Incorporated_in"" text, ""Group_Equity_Shareholding"" real, primary key (""id"") )', 'CREATE TABLE ""flight"" ( ""id"" int, ""Vehicle_Flight_number"" text, ""Date"" text, ""Pilot"" text, ""Velocity"" real, ""Altitude"" real, ""airport_id"" int, ""company_id"" int, primary key (""id""), foreign key (""airport_id"") references `airport`(""id""), foreign key (""company_id"") references `operate_company`(""id"") )']"
4466,network_2,"SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",Who has friends that are older than the average age? Print their friends and their ages as well,"['SELECT' 'DISTINCT' 'T2.name' ',' 'T2.friend' ',' 'T1.age' 'FROM'
 'Person' 'AS' 'T1' 'JOIN' 'PersonFriend' 'AS' 'T2' 'ON' 'T1.name' '='
 'T2.friend' 'WHERE' 'T1.age' '>' '(' 'SELECT' 'avg' '(' 'age' ')' 'FROM'
 'person' ')']","['select' 'distinct' 't2' '.' 'name' ',' 't2' '.' 'friend' ',' 't1' '.'
 'age' 'from' 'person' 'as' 't1' 'join' 'personfriend' 'as' 't2' 'on' 't1'
 '.' 'name' '=' 't2' '.' 'friend' 'where' 't1' '.' 'age' '>' '(' 'select'
 'avg' '(' 'age' ')' 'from' 'person' ')']","['Who' 'has' 'friends' 'that' 'are' 'older' 'than' 'the' 'average' 'age'
 '?' 'Print' 'their' 'friends' 'and' 'their' 'ages' 'as' 'well']","['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
352,flight_1,"SELECT name ,  distance FROM Aircraft WHERE aid  =  12",What is the name and distance for the aircraft that has an id of 12?,"['SELECT' 'name' ',' 'distance' 'FROM' 'Aircraft' 'WHERE' 'aid' '=' '12']","['select' 'name' ',' 'distance' 'from' 'aircraft' 'where' 'aid' '='
 'value']","['What' 'is' 'the' 'name' 'and' 'distance' 'for' 'the' 'aircraft' 'that'
 'has' 'an' 'id' 'of' '12' '?']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
4540,document_management,"SELECT count(*) ,  role_code FROM users GROUP BY role_code","What are the different role codes for users, and how many users have each?","['SELECT' 'count' '(' '*' ')' ',' 'role_code' 'FROM' 'users' 'GROUP' 'BY'
 'role_code']","['select' 'count' '(' '*' ')' ',' 'role_code' 'from' 'users' 'group' 'by'
 'role_code']","['What' 'are' 'the' 'different' 'role' 'codes' 'for' 'users' ',' 'and'
 'how' 'many' 'users' 'have' 'each' '?']","['CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) )', 'CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) )', 'CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) )', 'CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL )', 'CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) )', 'CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) )', 'CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) )', 'CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) )', 'CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) )']"
4782,department_store,"SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code","Give the maximum and minimum product prices for each product type, grouped and ordered by product type.","['SELECT' 'max' '(' 'product_price' ')' ',' 'min' '(' 'product_price' ')'
 ',' 'product_type_code' 'FROM' 'products' 'GROUP' 'BY'
 'product_type_code' 'ORDER' 'BY' 'product_type_code']","['select' 'max' '(' 'product_price' ')' ',' 'min' '(' 'product_price' ')'
 ',' 'product_type_code' 'from' 'products' 'group' 'by'
 'product_type_code' 'order' 'by' 'product_type_code']","['Give' 'the' 'maximum' 'and' 'minimum' 'product' 'prices' 'for' 'each'
 'product' 'type' ',' 'grouped' 'and' 'ordered' 'by' 'product' 'type' '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) )', 'CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) )', 'CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) )', 'CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
4245,cre_Doc_Tracking_DB,SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed,What are the ids of all the employees who have destroyed documents?,"['SELECT' 'DISTINCT' 'Destroyed_by_Employee_ID' 'FROM'
 'Documents_to_be_destroyed']","['select' 'distinct' 'destroyed_by_employee_id' 'from'
 'documents_to_be_destroyed']","['What' 'are' 'the' 'ids' 'of' 'all' 'the' 'employees' 'who' 'have'
 'destroyed' 'documents' '?']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
2271,entrepreneur,SELECT Name FROM People ORDER BY Weight ASC,What are the names of people in ascending order of weight?,['SELECT' 'Name' 'FROM' 'People' 'ORDER' 'BY' 'Weight' 'ASC'],['select' 'name' 'from' 'people' 'order' 'by' 'weight' 'asc'],"['What' 'are' 'the' 'names' 'of' 'people' 'in' 'ascending' 'order' 'of'
 'weight' '?']","['CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") )']"
1494,debate,"SELECT Date ,  Venue FROM debate",What are the date and venue of each debate?,"['SELECT' 'Date' ',' 'Venue' 'FROM' 'debate']","['select' 'date' ',' 'venue' 'from' 'debate']",['What' 'are' 'the' 'date' 'and' 'venue' 'of' 'each' 'debate' '?'],"['CREATE TABLE ""people"" ( ""People_ID"" int, ""District"" text, ""Name"" text, ""Party"" text, ""Age"" int, PRIMARY KEY (""People_ID"") )', 'CREATE TABLE ""debate"" ( ""Debate_ID"" int, ""Date"" text, ""Venue"" text, ""Num_of_Audience"" int, PRIMARY KEY (""Debate_ID"") )', 'CREATE TABLE ""debate_people"" ( ""Debate_ID"" int, ""Affirmative"" int, ""Negative"" int, ""If_Affirmative_Win"" bool, PRIMARY KEY (""Debate_ID"",""Affirmative"",""Negative""), FOREIGN KEY (""Debate_ID"") REFERENCES `debate`(""Debate_ID""), FOREIGN KEY (""Affirmative"") REFERENCES `people`(""People_ID""), FOREIGN KEY (""Negative"") REFERENCES `people`(""People_ID"") )']"
722,customers_card_transactions,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1,Return the code of the card type that is most common.,"['SELECT' 'card_type_code' 'FROM' 'Customers_cards' 'GROUP' 'BY'
 'card_type_code' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'card_type_code' 'from' 'customers_cards' 'group' 'by'
 'card_type_code' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Return' 'the' 'code' 'of' 'the' 'card' 'type' 'that' 'is' 'most'
 'common' '.']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
1032,phone_1,"SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  ""Graphics"";","List the hardware model name and company name for the phone whose screen mode type is ""Graphics.""","['SELECT' 'T2.Hardware_Model_name' ',' 'T2.Company_name' 'FROM'
 'screen_mode' 'AS' 'T1' 'JOIN' 'phone' 'AS' 'T2' 'ON' 'T1.Graphics_mode'
 '=' 'T2.screen_mode' 'WHERE' 'T1.Type' '=' '``' 'Graphics' ""''"" ';']","['select' 't2' '.' 'hardware_model_name' ',' 't2' '.' 'company_name'
 'from' 'screen_mode' 'as' 't1' 'join' 'phone' 'as' 't2' 'on' 't1' '.'
 'graphics_mode' '=' 't2' '.' 'screen_mode' 'where' 't1' '.' 'type' '='
 'value']","['List' 'the' 'hardware' 'model' 'name' 'and' 'company' 'name' 'for' 'the'
 'phone' 'whose' 'screen' 'mode' 'type' 'is' '``' 'Graphics' '.' ""''""]","['CREATE TABLE ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") )', 'CREATE TABLE ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") )', 'CREATE TABLE ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) )']"
6556,wine_1,"SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",What is the average prices of wines for each each?,"['SELECT' 'avg' '(' 'Price' ')' ',' 'YEAR' 'FROM' 'WINE' 'GROUP' 'BY'
 'YEAR']","['select' 'avg' '(' 'price' ')' ',' 'year' 'from' 'wine' 'group' 'by'
 'year']",['What' 'is' 'the' 'average' 'prices' 'of' 'wines' 'for' 'each' 'each' '?'],"['CREATE TABLE ""grapes"" ( \t""ID"" INTEGER PRIMARY KEY, \t""Grape"" TEXT UNIQUE, \t""Color"" TEXT );', 'CREATE TABLE ""appellations"" ( \t""No"" INTEGER PRIMARY KEY, \t""Appelation"" TEXT UNIQUE, \t""County"" TEXT, \t""State"" TEXT, \t""Area"" TEXT, \t""isAVA"" TEXT);', 'CREATE TABLE ""wine"" ( \t""No"" INTEGER, \t""Grape"" TEXT, \t""Winery"" TEXT, \t""Appelation"" TEXT, \t""State"" TEXT, \t""Name"" TEXT, \t""Year"" INTEGER, \t""Price"" INTEGER, \t""Score"" INTEGER, \t""Cases"" INTEGER, \t""Drink"" TEXT,\tFOREIGN KEY (Grape) REFERENCES grapes(Grape),\tFOREIGN KEY (Appelation) REFERENCES appellations(Appelation));']"
2658,local_govt_mdm,SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines,Which cmi cross reference id is not related to any parking taxes?,"['SELECT' 'cmi_cross_ref_id' 'FROM' 'cmi_cross_references' 'EXCEPT'
 'SELECT' 'cmi_cross_ref_id' 'FROM' 'parking_fines']","['select' 'cmi_cross_ref_id' 'from' 'cmi_cross_references' 'except'
 'select' 'cmi_cross_ref_id' 'from' 'parking_fines']","['Which' 'cmi' 'cross' 'reference' 'id' 'is' 'not' 'related' 'to' 'any'
 'parking' 'taxes' '?']","['CREATE TABLE Customer_Master_Index ( master_customer_id INTEGER NOT NULL, cmi_details VARCHAR(255), PRIMARY KEY (master_customer_id) )', 'CREATE TABLE CMI_Cross_References ( cmi_cross_ref_id INTEGER NOT NULL, master_customer_id INTEGER NOT NULL, source_system_code CHAR(15) NOT NULL, PRIMARY KEY (cmi_cross_ref_id), FOREIGN KEY (master_customer_id) REFERENCES Customer_Master_Index (master_customer_id) )', 'CREATE TABLE Council_Tax ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Business_Rates ( business_rates_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (business_rates_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Benefits_Overpayments ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Parking_Fines ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Rent_Arrears ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Electoral_Register ( electoral_register_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (electoral_register_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )']"
6306,city_record,"SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",What are the GDP and population of the city that already served as a host more than once?,"['SELECT' 't1.gdp' ',' 't1.Regional_Population' 'FROM' 'city' 'AS' 'T1'
 'JOIN' 'hosting_city' 'AS' 'T2' 'ON' 'T1.city_id' '=' 'T2.host_city'
 'GROUP' 'BY' 't2.Host_City' 'HAVING' 'count' '(' '*' ')' '>' '1']","['select' 't1' '.' 'gdp' ',' 't1' '.' 'regional_population' 'from' 'city'
 'as' 't1' 'join' 'hosting_city' 'as' 't2' 'on' 't1' '.' 'city_id' '='
 't2' '.' 'host_city' 'group' 'by' 't2' '.' 'host_city' 'having' 'count'
 '(' '*' ')' '>' 'value']","['What' 'are' 'the' 'GDP' 'and' 'population' 'of' 'the' 'city' 'that'
 'already' 'served' 'as' 'a' 'host' 'more' 'than' 'once' '?']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""City"" text, ""Hanzi"" text, ""Hanyu_Pinyin"" text, ""Regional_Population"" int, ""GDP"" real, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""match"" ( ""Match_ID"" int, ""Date"" text, ""Venue"" text, ""Score"" text, ""Result"" text, ""Competition"" text, PRIMARY KEY (""Match_ID"") )', 'CREATE TABLE ""temperature"" ( ""City_ID"" int, ""Jan"" real, ""Feb"" real, ""Mar"" real, ""Apr"" real, ""Jun"" real, ""Jul"" real, ""Aug"" real, ""Sep"" real, ""Oct"" real, ""Nov"" real, ""Dec"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (`City_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""hosting_city"" ( ""Year"" int, ""Match_ID"" int, ""Host_City"" text, PRIMARY KEY (""Year""), FOREIGN KEY (`Host_City`) REFERENCES `city`(`City_ID`), FOREIGN KEY (`Match_ID`) REFERENCES `match`(`Match_ID`) )']"
156,bike_1,SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60,"For each zip code, find the ids of all trips that have a higher average mean temperature above 60?","['SELECT' 'T1.id' 'FROM' 'trip' 'AS' 'T1' 'JOIN' 'weather' 'AS' 'T2' 'ON'
 'T1.zip_code' '=' 'T2.zip_code' 'GROUP' 'BY' 'T2.zip_code' 'HAVING' 'avg'
 '(' 'T2.mean_temperature_f' ')' '>' '60']","['select' 't1' '.' 'id' 'from' 'trip' 'as' 't1' 'join' 'weather' 'as' 't2'
 'on' 't1' '.' 'zip_code' '=' 't2' '.' 'zip_code' 'group' 'by' 't2' '.'
 'zip_code' 'having' 'avg' '(' 't2' '.' 'mean_temperature_f' ')' '>'
 'value']","['For' 'each' 'zip' 'code' ',' 'find' 'the' 'ids' 'of' 'all' 'trips'
 'that' 'have' 'a' 'higher' 'average' 'mean' 'temperature' 'above' '60'
 '?']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
3184,college_1,"SELECT school_code FROM department WHERE dept_name  =  ""Accounting""",What is the school code of the accounting department?,"['SELECT' 'school_code' 'FROM' 'department' 'WHERE' 'dept_name' '=' '``'
 'Accounting' ""''""]","['select' 'school_code' 'from' 'department' 'where' 'dept_name' '='
 'value']","['What' 'is' 'the' 'school' 'code' 'of' 'the' 'accounting' 'department'
 '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
779,race_track,"SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",Show the name of track and the number of races in each track.,"['SELECT' 'T2.name' ',' 'count' '(' '*' ')' 'FROM' 'race' 'AS' 'T1' 'JOIN'
 'track' 'AS' 'T2' 'ON' 'T1.track_id' '=' 'T2.track_id' 'GROUP' 'BY'
 'T1.track_id']","['select' 't2' '.' 'name' ',' 'count' '(' '*' ')' 'from' 'race' 'as' 't1'
 'join' 'track' 'as' 't2' 'on' 't1' '.' 'track_id' '=' 't2' '.' 'track_id'
 'group' 'by' 't1' '.' 'track_id']","['Show' 'the' 'name' 'of' 'track' 'and' 'the' 'number' 'of' 'races' 'in'
 'each' 'track' '.']","['CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") )', 'CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") )']"
6881,flight_4,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1,Find the busiest source airport that runs most number of routes in China.,"['SELECT' 'T1.name' 'FROM' 'airports' 'AS' 'T1' 'JOIN' 'routes' 'AS' 'T2'
 'ON' 'T1.apid' '=' 'T2.src_apid' 'WHERE' 'T1.country' '=' ""'China"" ""'""
 'GROUP' 'BY' 'T1.name' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT'
 '1']","['select' 't1' '.' 'name' 'from' 'airports' 'as' 't1' 'join' 'routes' 'as'
 't2' 'on' 't1' '.' 'apid' '=' 't2' '.' 'src_apid' 'where' 't1' '.'
 'country' '=' 'value' 'group' 'by' 't1' '.' 'name' 'order' 'by' 'count'
 '(' '*' ')' 'desc' 'limit' 'value']","['Find' 'the' 'busiest' 'source' 'airport' 'that' 'runs' 'most' 'number'
 'of' 'routes' 'in' 'China' '.']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
6473,scientist_1,SELECT count(DISTINCT scientist) FROM assignedto,How many different scientists are assigned to any project?,['SELECT' 'count' '(' 'DISTINCT' 'scientist' ')' 'FROM' 'assignedto'],['select' 'count' '(' 'distinct' 'scientist' ')' 'from' 'assignedto'],"['How' 'many' 'different' 'scientists' 'are' 'assigned' 'to' 'any'
 'project' '?']","['CREATE TABLE Scientists ( SSN int, Name Char(30) not null, Primary Key (SSN) )', 'CREATE TABLE Projects ( Code Char(4), Name Char(50) not null, Hours int, Primary Key (Code) )', 'CREATE TABLE AssignedTo ( Scientist int not null, Project char(4) not null, Primary Key (Scientist, Project), Foreign Key (Scientist) references Scientists (SSN), Foreign Key (Project) references Projects (Code) )']"
6795,activity_1,SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking',Find the first names of the faculty members who are playing Canoeing or Kayaking.,"['SELECT' 'DISTINCT' 'T1.lname' 'FROM' 'Faculty' 'AS' 'T1' 'JOIN'
 'Faculty_participates_in' 'AS' 'T2' 'ON' 'T1.facID' '=' 'T2.facID' 'JOIN'
 'activity' 'AS' 'T3' 'ON' 'T2.actid' '=' 'T2.actid' 'WHERE'
 'T3.activity_name' '=' ""'Canoeing"" ""'"" 'OR' 'T3.activity_name' '='
 ""'Kayaking"" ""'""]","['select' 'distinct' 't1' '.' 'lname' 'from' 'faculty' 'as' 't1' 'join'
 'faculty_participates_in' 'as' 't2' 'on' 't1' '.' 'facid' '=' 't2' '.'
 'facid' 'join' 'activity' 'as' 't3' 'on' 't2' '.' 'actid' '=' 't2' '.'
 'actid' 'where' 't3' '.' 'activity_name' '=' 'value' 'or' 't3' '.'
 'activity_name' '=' 'value']","['Find' 'the' 'first' 'names' 'of' 'the' 'faculty' 'members' 'who' 'are'
 'playing' 'Canoeing' 'or' 'Kayaking' '.']","['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
765,race_track,"SELECT name ,  CLASS ,  date FROM race","Show name, class, and date for all races.","['SELECT' 'name' ',' 'CLASS' ',' 'date' 'FROM' 'race']","['select' 'name' ',' 'class' ',' 'date' 'from' 'race']","['Show' 'name' ',' 'class' ',' 'and' 'date' 'for' 'all' 'races' '.']","['CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") )', 'CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") )']"
3515,hr_1,"SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id","display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.","['SELECT' 'first_name' ',' 'last_name' ',' 'salary' ',' 'department_id'
 ',' 'MAX' '(' 'salary' ')' 'FROM' 'employees' 'GROUP' 'BY'
 'department_id']","['select' 'first_name' ',' 'last_name' ',' 'salary' ',' 'department_id'
 ',' 'max' '(' 'salary' ')' 'from' 'employees' 'group' 'by'
 'department_id']","['display' 'the' 'department' 'ID' ',' 'full' 'name' '(' 'first' 'and'
 'last' 'name' ')' ',' 'salary' 'for' 'those' 'employees' 'who' 'is'
 'highest' 'salary' 'in' 'every' 'department' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
3762,program_share,SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS',What are the names of the channels owned by CCTV or HBS?,"['SELECT' 'name' 'FROM' 'channel' 'WHERE' 'OWNER' '=' ""'CCTV"" ""'"" 'OR'
 'OWNER' '=' ""'HBS"" ""'""]","['select' 'name' 'from' 'channel' 'where' 'owner' '=' 'value' 'or' 'owner'
 '=' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'channels' 'owned' 'by' 'CCTV' 'or'
 'HBS' '?']","['CREATE TABLE ""program"" ( ""Program_ID"" int, ""Name"" text, ""Origin"" text, ""Launch"" real, ""Owner"" text, PRIMARY KEY (""Program_ID"") )', 'CREATE TABLE ""channel"" ( ""Channel_ID"" int, ""Name"" text, ""Owner"" text, ""Share_in_percent"" real, ""Rating_in_percent"" real, PRIMARY KEY (""Channel_ID"") )', 'CREATE TABLE ""broadcast"" ( ""Channel_ID"" int, ""Program_ID"" int, ""Time_of_day"" text, PRIMARY KEY (""Channel_ID"",""Program_ID""), FOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`), FOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`) )', 'CREATE TABLE ""broadcast_share"" ( ""Channel_ID"" int, ""Program_ID"" int, ""Date"" text, ""Share_in_percent"" real, PRIMARY KEY (""Channel_ID"",""Program_ID""), FOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`), FOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`) )']"
582,store_1,"SELECT country FROM customers WHERE first_name = ""Roberto"" AND last_name = ""Almeida"";",In which country does Roberto Almeida?,"['SELECT' 'country' 'FROM' 'customers' 'WHERE' 'first_name' '=' '``'
 'Roberto' ""''"" 'AND' 'last_name' '=' '``' 'Almeida' ""''"" ';']","['select' 'country' 'from' 'customers' 'where' 'first_name' '=' 'value'
 'and' 'last_name' '=' 'value']",['In' 'which' 'country' 'does' 'Roberto' 'Almeida' '?'],"['CREATE TABLE artists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE sqlite_sequence(name,seq)', 'CREATE TABLE albums ( id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(160) NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE employees ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(20) NOT NULL, first_name VARCHAR(20) NOT NULL, title VARCHAR(30), reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), FOREIGN KEY (reports_to) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE customers ( id INTEGER PRIMARY KEY AUTOINCREMENT, first_name VARCHAR(40) NOT NULL, last_name VARCHAR(20) NOT NULL, company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE genres ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE invoices ( id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE media_types ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE tracks ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(200) NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR(220), milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE invoice_lines ( id INTEGER PRIMARY KEY AUTOINCREMENT, invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE playlists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE playlist_tracks ( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
355,flight_1,"SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",Show the id and name of the aircraft with the maximum distance.,"['SELECT' 'aid' ',' 'name' 'FROM' 'Aircraft' 'ORDER' 'BY' 'distance'
 'DESC' 'LIMIT' '1']","['select' 'aid' ',' 'name' 'from' 'aircraft' 'order' 'by' 'distance'
 'desc' 'limit' 'value']","['Show' 'the' 'id' 'and' 'name' 'of' 'the' 'aircraft' 'with' 'the'
 'maximum' 'distance' '.']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
3592,music_1,"SELECT song_name FROM song WHERE genre_is  =  ""modern"" OR languages  =  ""english""",What are the names of the songs that are modern or sung in English?,"['SELECT' 'song_name' 'FROM' 'song' 'WHERE' 'genre_is' '=' '``' 'modern'
 ""''"" 'OR' 'languages' '=' '``' 'english' ""''""]","['select' 'song_name' 'from' 'song' 'where' 'genre_is' '=' 'value' 'or'
 'languages' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'songs' 'that' 'are' 'modern' 'or'
 'sung' 'in' 'English' '?']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
2200,formula_1,SELECT DISTINCT forename FROM drivers ORDER BY forename ASC,What are the first names of all the different drivers in alphabetical order?,"['SELECT' 'DISTINCT' 'forename' 'FROM' 'drivers' 'ORDER' 'BY' 'forename'
 'ASC']","['select' 'distinct' 'forename' 'from' 'drivers' 'order' 'by' 'forename'
 'asc']","['What' 'are' 'the' 'first' 'names' 'of' 'all' 'the' 'different' 'drivers'
 'in' 'alphabetical' 'order' '?']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
135,bike_1,SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,Which bike traveled the most often in zip code 94002?,"['SELECT' 'bike_id' 'FROM' 'trip' 'WHERE' 'zip_code' '=' '94002' 'GROUP'
 'BY' 'bike_id' 'ORDER' 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'bike_id' 'from' 'trip' 'where' 'zip_code' '=' 'value' 'group'
 'by' 'bike_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Which' 'bike' 'traveled' 'the' 'most' 'often' 'in' 'zip' 'code' '94002'
 '?']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
712,customers_card_transactions,"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id","What are the different customer ids, and how many cards does each one hold?","['SELECT' 'customer_id' ',' 'count' '(' '*' ')' 'FROM' 'Customers_cards'
 'GROUP' 'BY' 'customer_id']","['select' 'customer_id' ',' 'count' '(' '*' ')' 'from' 'customers_cards'
 'group' 'by' 'customer_id']","['What' 'are' 'the' 'different' 'customer' 'ids' ',' 'and' 'how' 'many'
 'cards' 'does' 'each' 'one' 'hold' '?']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
3167,station_weather,"SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  ""Chiltern""",Find names and times of trains that run through stations for the local authority Chiltern.,"['SELECT' 't3.name' ',' 't3.time' 'FROM' 'station' 'AS' 't1' 'JOIN'
 'route' 'AS' 't2' 'ON' 't1.id' '=' 't2.station_id' 'JOIN' 'train' 'AS'
 't3' 'ON' 't2.train_id' '=' 't3.id' 'WHERE' 't1.local_authority' '=' '``'
 'Chiltern' ""''""]","['select' 't3' '.' 'name' ',' 't3' '.' 'time' 'from' 'station' 'as' 't1'
 'join' 'route' 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'station_id'
 'join' 'train' 'as' 't3' 'on' 't2' '.' 'train_id' '=' 't3' '.' 'id'
 'where' 't1' '.' 'local_authority' '=' 'value']","['Find' 'names' 'and' 'times' 'of' 'trains' 'that' 'run' 'through'
 'stations' 'for' 'the' 'local' 'authority' 'Chiltern' '.']","['CREATE TABLE ""train"" ( ""id"" int, ""train_number"" int, ""name"" text, ""origin"" text, ""destination"" text, ""time"" text, ""interval"" text, primary key (""id"") )', 'CREATE TABLE ""station"" ( ""id"" int, ""network_name"" text, ""services"" text, ""local_authority"" text, primary key (""id"") )', 'CREATE TABLE ""route"" ( ""train_id"" int, ""station_id"" int, primary key (""train_id"", ""station_id""), foreign key (""train_id"") references `train`(""id""), foreign key (""station_id"") references `station`(""id"") )', 'CREATE TABLE ""weekly_weather"" ( ""station_id"" int, ""day_of_week"" text, ""high_temperature"" int, ""low_temperature"" int, ""precipitation"" real, ""wind_speed_mph"" int, primary key (""station_id"", ""day_of_week""), foreign key (""station_id"") references ""station""(""id"") )']"
1333,college_2,SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1,Give the name of the student in the History department with the most credits.,"['SELECT' 'name' 'FROM' 'student' 'WHERE' 'dept_name' '=' ""'History"" ""'""
 'ORDER' 'BY' 'tot_cred' 'DESC' 'LIMIT' '1']","['select' 'name' 'from' 'student' 'where' 'dept_name' '=' 'value' 'order'
 'by' 'tot_cred' 'desc' 'limit' 'value']","['Give' 'the' 'name' 'of' 'the' 'student' 'in' 'the' 'History'
 'department' 'with' 'the' 'most' 'credits' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
6427,cre_Docs_and_Epenses,"SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  ""Film""",What is the document type description for document type named Film?,"['SELECT' 'document_type_description' 'FROM' 'Ref_document_types' 'WHERE'
 'document_type_name' '=' '``' 'Film' ""''""]","['select' 'document_type_description' 'from' 'ref_document_types' 'where'
 'document_type_name' '=' 'value']","['What' 'is' 'the' 'document' 'type' 'description' 'for' 'document' 'type'
 'named' 'Film' '?']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
4489,decoration_competition,SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1,Show the most common country across members.,"['SELECT' 'Country' 'FROM' 'member' 'GROUP' 'BY' 'Country' 'ORDER' 'BY'
 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'country' 'from' 'member' 'group' 'by' 'country' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']",['Show' 'the' 'most' 'common' 'country' 'across' 'members' '.'],"['CREATE TABLE ""college"" ( ""College_ID"" int, ""Name"" text, ""Leader_Name"" text, ""College_Location"" text, PRIMARY KEY (""College_ID"") )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Country"" text, ""College_ID"" int, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""College_ID"") REFERENCES `college`(""College_ID"") )', 'CREATE TABLE ""round"" ( ""Round_ID"" int, ""Member_ID"" int, ""Decoration_Theme"" text, ""Rank_in_Round"" int, PRIMARY KEY (""Member_ID"",""Round_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID"") )']"
660,journal_committee,"SELECT T2.Name ,  T2.age ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID ORDER BY T3.Theme ASC","Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.","['SELECT' 'T2.Name' ',' 'T2.age' ',' 'T3.Theme' 'FROM' 'journal_committee'
 'AS' 'T1' 'JOIN' 'editor' 'AS' 'T2' 'ON' 'T1.Editor_ID' '='
 'T2.Editor_ID' 'JOIN' 'journal' 'AS' 'T3' 'ON' 'T1.Journal_ID' '='
 'T3.Journal_ID' 'ORDER' 'BY' 'T3.Theme' 'ASC']","['select' 't2' '.' 'name' ',' 't2' '.' 'age' ',' 't3' '.' 'theme' 'from'
 'journal_committee' 'as' 't1' 'join' 'editor' 'as' 't2' 'on' 't1' '.'
 'editor_id' '=' 't2' '.' 'editor_id' 'join' 'journal' 'as' 't3' 'on' 't1'
 '.' 'journal_id' '=' 't3' '.' 'journal_id' 'order' 'by' 't3' '.' 'theme'
 'asc']","['Show' 'the' 'names' 'and' 'ages' 'of' 'editors' 'and' 'the' 'theme' 'of'
 'journals' 'for' 'which' 'they' 'serve' 'on' 'committees' ',' 'in'
 'ascending' 'alphabetical' 'order' 'of' 'theme' '.']","['CREATE TABLE ""journal"" ( ""Journal_ID"" int, ""Date"" text, ""Theme"" text, ""Sales"" int, PRIMARY KEY (""Journal_ID"") )', 'CREATE TABLE ""editor"" ( ""Editor_ID"" int, ""Name"" text, ""Age"" real, PRIMARY KEY (""Editor_ID"") )', 'CREATE TABLE ""journal_committee"" ( ""Editor_ID"" int, ""Journal_ID"" int, ""Work_Type"" text, PRIMARY KEY (""Editor_ID"",""Journal_ID""), FOREIGN KEY (""Editor_ID"") REFERENCES `editor`(""Editor_ID""), FOREIGN KEY (""Journal_ID"") REFERENCES `journal`(""Journal_ID"") )']"
2825,restaurant_1,"SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;",Which restaurants have highest rating? List the restaurant name and its rating.,"['SELECT' 'ResName' ',' 'Rating' 'FROM' 'Restaurant' 'ORDER' 'BY' 'Rating'
 'DESC' 'LIMIT' '1' ';']","['select' 'resname' ',' 'rating' 'from' 'restaurant' 'order' 'by' 'rating'
 'desc' 'limit' 'value']","['Which' 'restaurants' 'have' 'highest' 'rating' '?' 'List' 'the'
 'restaurant' 'name' 'and' 'its' 'rating' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Restaurant ( ResID INTEGER PRIMARY KEY, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER )', 'CREATE TABLE Type_Of_Restaurant ( ResID INTEGER, ResTypeID INTEGER, FOREIGN KEY(ResID) REFERENCES Restaurant(ResID), FOREIGN KEY(ResTypeID) REFERENCES Restaurant_Type(ResTypeID) )', 'CREATE TABLE Restaurant_Type ( ResTypeID INTEGER PRIMARY KEY, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) )', 'CREATE TABLE Visits_Restaurant ( StuID INTEGER, ResID INTEGER, Time TIMESTAMP, Spent FLOAT, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ResID) REFERENCES Restaurant(ResID) )']"
1227,apartment_rentals,"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  ""Suite 634""","Tell me the booking status code for the apartment with number ""Suite 634"".","['SELECT' 'T1.booking_status_code' 'FROM' 'Apartment_Bookings' 'AS' 'T1'
 'JOIN' 'Apartments' 'AS' 'T2' 'ON' 'T1.apt_id' '=' 'T2.apt_id' 'WHERE'
 'T2.apt_number' '=' '``' 'Suite' '634' ""''""]","['select' 't1' '.' 'booking_status_code' 'from' 'apartment_bookings' 'as'
 't1' 'join' 'apartments' 'as' 't2' 'on' 't1' '.' 'apt_id' '=' 't2' '.'
 'apt_id' 'where' 't2' '.' 'apt_number' '=' 'value']","['Tell' 'me' 'the' 'booking' 'status' 'code' 'for' 'the' 'apartment'
 'with' 'number' '``' 'Suite' '634' ""''"" '.']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
5821,workshop_paper,"SELECT Author FROM submission WHERE College  =  ""Florida"" OR College  =  ""Temple""","Which authors with submissions are from college ""Florida"" or ""Temple""?","['SELECT' 'Author' 'FROM' 'submission' 'WHERE' 'College' '=' '``'
 'Florida' ""''"" 'OR' 'College' '=' '``' 'Temple' ""''""]","['select' 'author' 'from' 'submission' 'where' 'college' '=' 'value' 'or'
 'college' '=' 'value']","['Which' 'authors' 'with' 'submissions' 'are' 'from' 'college' '``'
 'Florida' ""''"" 'or' '``' 'Temple' ""''"" '?']","['CREATE TABLE ""workshop"" ( ""Workshop_ID"" int, ""Date"" text, ""Venue"" text, ""Name"" text, PRIMARY KEY (""Workshop_ID"") )', 'CREATE TABLE ""submission"" ( ""Submission_ID"" int, ""Scores"" real, ""Author"" text, ""College"" text, PRIMARY KEY (""Submission_ID"") )', 'CREATE TABLE ""Acceptance"" ( ""Submission_ID"" int, ""Workshop_ID"" int, ""Result"" text, PRIMARY KEY (""Submission_ID"",""Workshop_ID""), FOREIGN KEY (""Submission_ID"") REFERENCES `submission`(""Submission_ID""), FOREIGN KEY (""Workshop_ID"") REFERENCES `workshop`(""Workshop_ID"") )']"
4628,customers_campaigns_ecommerce,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2,Show the names of customers who have at least 2 mailshots with outcome code 'Order'.,"['SELECT' 'T2.customer_name' 'FROM' 'mailshot_customers' 'AS' 'T1' 'JOIN'
 'customers' 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE'
 'outcome_code' '=' ""'Order"" ""'"" 'GROUP' 'BY' 'T1.customer_id' 'HAVING'
 'count' '(' '*' ')' '>' '=' '2']","['select' 't2' '.' 'customer_name' 'from' 'mailshot_customers' 'as' 't1'
 'join' 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'where' 'outcome_code' '=' 'value' 'group' 'by' 't1' '.'
 'customer_id' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['Show' 'the' 'names' 'of' 'customers' 'who' 'have' 'at' 'least' '2'
 'mailshots' 'with' 'outcome' 'code' ""'Order"" ""'"" '.']","['CREATE TABLE `Premises` ( `premise_id` INTEGER PRIMARY KEY, `premises_type` VARCHAR(15) NOT NULL, `premise_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_category` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80), `customer_address` VARCHAR(255), `customer_login` VARCHAR(80), `customer_password` VARCHAR(10) )', 'CREATE TABLE `Mailshot_Campaigns` ( `mailshot_id` INTEGER PRIMARY KEY, `product_category` VARCHAR(15), `mailshot_name` VARCHAR(80), `mailshot_start_date` DATETIME, `mailshot_end_date` DATETIME )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `premise_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`premise_id` ) REFERENCES `Premises`(`premise_id` ) FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(15) NOT NULL, `shipping_method_code` VARCHAR(15) NOT NULL, `order_placed_datetime` DATETIME NOT NULL, `order_delivered_datetime` DATETIME, `order_shipping_charges` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Mailshot_Customers` ( `mailshot_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `outcome_code` VARCHAR(15) NOT NULL, `mailshot_customer_date` DATETIME, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ), FOREIGN KEY (`mailshot_id` ) REFERENCES `Mailshot_Campaigns`(`mailshot_id` ) )', 'CREATE TABLE `Order_Items` ( `item_id` INTEGER NOT NULL , `order_item_status_code` VARCHAR(15) NOT NULL, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `item_status_code` VARCHAR(15), `item_delivered_datetime` DATETIME, `item_order_quantity` VARCHAR(80), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
4529,document_management,"SELECT document_name FROM documents WHERE document_name LIKE ""%CV%""","List all the document names which contains ""CV"".","['SELECT' 'document_name' 'FROM' 'documents' 'WHERE' 'document_name'
 'LIKE' '``' '%' 'CV' '%' ""''""]","['select' 'document_name' 'from' 'documents' 'where' 'document_name'
 'like' 'value']","['List' 'all' 'the' 'document' 'names' 'which' 'contains' '``' 'CV' ""''""
 '.']","['CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) )', 'CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) )', 'CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) )', 'CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL )', 'CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) )', 'CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) )', 'CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) )', 'CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) )', 'CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) )']"
5158,cre_Drama_Workshop_Groups,SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID,Show all cities where at least one customer lives in but no performer lives in.,"['SELECT' 'T1.City_Town' 'FROM' 'Addresses' 'AS' 'T1' 'JOIN' 'Customers'
 'AS' 'T2' 'ON' 'T1.Address_ID' '=' 'T2.Address_ID' 'EXCEPT' 'SELECT'
 'T1.City_Town' 'FROM' 'Addresses' 'AS' 'T1' 'JOIN' 'Performers' 'AS' 'T2'
 'ON' 'T1.Address_ID' '=' 'T2.Address_ID']","['select' 't1' '.' 'city_town' 'from' 'addresses' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'address_id' '=' 't2' '.'
 'address_id' 'except' 'select' 't1' '.' 'city_town' 'from' 'addresses'
 'as' 't1' 'join' 'performers' 'as' 't2' 'on' 't1' '.' 'address_id' '='
 't2' '.' 'address_id']","['Show' 'all' 'cities' 'where' 'at' 'least' 'one' 'customer' 'lives' 'in'
 'but' 'no' 'performer' 'lives' 'in' '.']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
1948,cinema,SELECT DISTINCT directed_by FROM film,Who are all the directors?,['SELECT' 'DISTINCT' 'directed_by' 'FROM' 'film'],['select' 'distinct' 'directed_by' 'from' 'film'],['Who' 'are' 'all' 'the' 'directors' '?'],"['CREATE TABLE ""film"" ( ""Film_ID"" int, ""Rank_in_series"" int, ""Number_in_season"" int, ""Title"" text, ""Directed_by"" text, ""Original_air_date"" text, ""Production_code"" text, PRIMARY KEY (""Film_ID"") )', 'CREATE TABLE ""cinema"" ( ""Cinema_ID"" int, ""Name"" text, ""Openning_year"" int, ""Capacity"" int, ""Location"" text, PRIMARY KEY (""Cinema_ID""))', 'CREATE TABLE ""schedule"" ( ""Cinema_ID"" int, ""Film_ID"" int, ""Date"" text, ""Show_times_per_day"" int, ""Price"" float, PRIMARY KEY (""Cinema_ID"",""Film_ID""), FOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`), FOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`) )']"
6944,tracking_orders,"SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = ""Cancel"" AND T4.product_name = ""food"" GROUP BY T1.customer_id HAVING count(*)  >=  1","Which customers have ever canceled the purchase of the product ""food"" (the item status is ""Cancel"")?","['SELECT' 'T1.customer_name' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders'
 'AS' 'T2' 'JOIN' 'order_items' 'AS' 'T3' 'JOIN' 'products' 'AS' 'T4' 'ON'
 'T1.customer_id' '=' 'T2.customer_id' 'AND' 'T2.order_id' '='
 'T3.order_id' 'AND' 'T3.product_id' '=' 'T4.product_id' 'WHERE'
 'T3.order_item_status' '=' '``' 'Cancel' ""''"" 'AND' 'T4.product_name' '='
 '``' 'food' ""''"" 'GROUP' 'BY' 'T1.customer_id' 'HAVING' 'count' '(' '*'
 ')' '>' '=' '1']","['select' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1' 'join'
 'orders' 'as' 't2' 'join' 'order_items' 'as' 't3' 'join' 'products' 'as'
 't4' 'on' 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id' 'and' 't2'
 '.' 'order_id' '=' 't3' '.' 'order_id' 'and' 't3' '.' 'product_id' '='
 't4' '.' 'product_id' 'where' 't3' '.' 'order_item_status' '=' 'value'
 'and' 't4' '.' 'product_name' '=' 'value' 'group' 'by' 't1' '.'
 'customer_id' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['Which' 'customers' 'have' 'ever' 'canceled' 'the' 'purchase' 'of' 'the'
 'product' '``' 'food' ""''"" '(' 'the' 'item' 'status' 'is' '``' 'Cancel'
 ""''"" ')' '?']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
4271,club_1,"SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.sex  =  ""F""","Give me the first name and last name for all the female members of the club ""Bootup Baltimore"".","['SELECT' 't3.fname' ',' 't3.lname' 'FROM' 'club' 'AS' 't1' 'JOIN'
 'member_of_club' 'AS' 't2' 'ON' 't1.clubid' '=' 't2.clubid' 'JOIN'
 'student' 'AS' 't3' 'ON' 't2.stuid' '=' 't3.stuid' 'WHERE' 't1.clubname'
 '=' '``' 'Bootup' 'Baltimore' ""''"" 'AND' 't3.sex' '=' '``' 'F' ""''""]","['select' 't3' '.' 'fname' ',' 't3' '.' 'lname' 'from' 'club' 'as' 't1'
 'join' 'member_of_club' 'as' 't2' 'on' 't1' '.' 'clubid' '=' 't2' '.'
 'clubid' 'join' 'student' 'as' 't3' 'on' 't2' '.' 'stuid' '=' 't3' '.'
 'stuid' 'where' 't1' '.' 'clubname' '=' 'value' 'and' 't3' '.' 'sex' '='
 'value']","['Give' 'me' 'the' 'first' 'name' 'and' 'last' 'name' 'for' 'all' 'the'
 'female' 'members' 'of' 'the' 'club' '``' 'Bootup' 'Baltimore' ""''"" '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Club ( ClubID INTEGER PRIMARY KEY, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) )', 'CREATE TABLE Member_of_club ( StuID INTEGER, ClubID INTEGER, Position VARCHAR(40), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ClubID) REFERENCES Club(ClubID) )']"
869,chinook_1,"SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",Please show the employee first names and ids of employees who serve at least 10 customers.,"['SELECT' 'T1.FirstName' ',' 'T1.SupportRepId' 'FROM' 'CUSTOMER' 'AS' 'T1'
 'JOIN' 'EMPLOYEE' 'AS' 'T2' 'ON' 'T1.SupportRepId' '=' 'T2.EmployeeId'
 'GROUP' 'BY' 'T1.SupportRepId' 'HAVING' 'COUNT' '(' '*' ')' '>' '=' '10']","['select' 't1' '.' 'firstname' ',' 't1' '.' 'supportrepid' 'from'
 'customer' 'as' 't1' 'join' 'employee' 'as' 't2' 'on' 't1' '.'
 'supportrepid' '=' 't2' '.' 'employeeid' 'group' 'by' 't1' '.'
 'supportrepid' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['Please' 'show' 'the' 'employee' 'first' 'names' 'and' 'ids' 'of'
 'employees' 'who' 'serve' 'at' 'least' '10' 'customers' '.']","['CREATE TABLE `Album` ( `AlbumId` integer NOT NULL , `Title` varchar(160) NOT NULL , `ArtistId` integer NOT NULL , PRIMARY KEY (`AlbumId`) , CONSTRAINT `FK_AlbumArtistId` FOREIGN KEY (`ArtistId`) REFERENCES `Artist` (`ArtistId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Artist` ( `ArtistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`ArtistId`) )', 'CREATE TABLE `Customer` ( `CustomerId` integer NOT NULL , `FirstName` varchar(40) NOT NULL , `LastName` varchar(20) NOT NULL , `Company` varchar(80) DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) NOT NULL , `SupportRepId` integer DEFAULT NULL , PRIMARY KEY (`CustomerId`) , CONSTRAINT `FK_CustomerSupportRepId` FOREIGN KEY (`SupportRepId`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Employee` ( `EmployeeId` integer NOT NULL , `LastName` varchar(20) NOT NULL , `FirstName` varchar(20) NOT NULL , `Title` varchar(30) DEFAULT NULL , `ReportsTo` integer DEFAULT NULL , `BirthDate` datetime DEFAULT NULL , `HireDate` datetime DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) DEFAULT NULL , PRIMARY KEY (`EmployeeId`) , CONSTRAINT `FK_EmployeeReportsTo` FOREIGN KEY (`ReportsTo`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Genre` ( `GenreId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`GenreId`) )', 'CREATE TABLE `Invoice` ( `InvoiceId` integer NOT NULL , `CustomerId` integer NOT NULL , `InvoiceDate` datetime NOT NULL , `BillingAddress` varchar(70) DEFAULT NULL , `BillingCity` varchar(40) DEFAULT NULL , `BillingState` varchar(40) DEFAULT NULL , `BillingCountry` varchar(40) DEFAULT NULL , `BillingPostalCode` varchar(10) DEFAULT NULL , `Total` decimal(10,2) NOT NULL , PRIMARY KEY (`InvoiceId`) , CONSTRAINT `FK_InvoiceCustomerId` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `InvoiceLine` ( `InvoiceLineId` integer NOT NULL , `InvoiceId` integer NOT NULL , `TrackId` integer NOT NULL , `UnitPrice` decimal(10,2) NOT NULL , `Quantity` integer NOT NULL , PRIMARY KEY (`InvoiceLineId`) , CONSTRAINT `FK_InvoiceLineInvoiceId` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_InvoiceLineTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `MediaType` ( `MediaTypeId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`MediaTypeId`) )', 'CREATE TABLE `Playlist` ( `PlaylistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`PlaylistId`) )', 'CREATE TABLE `PlaylistTrack` ( `PlaylistId` integer NOT NULL , `TrackId` integer NOT NULL , PRIMARY KEY (`PlaylistId`,`TrackId`) , CONSTRAINT `FK_PlaylistTrackPlaylistId` FOREIGN KEY (`PlaylistId`) REFERENCES `Playlist` (`PlaylistId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_PlaylistTrackTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Track` ( `TrackId` integer NOT NULL , `Name` varchar(200) NOT NULL , `AlbumId` integer DEFAULT NULL , `MediaTypeId` integer NOT NULL , `GenreId` integer DEFAULT NULL , `Composer` varchar(220) DEFAULT NULL , `Milliseconds` integer NOT NULL , `Bytes` integer DEFAULT NULL , `UnitPrice` decimal(10,2) NOT NULL , PRIMARY KEY (`TrackId`) , CONSTRAINT `FK_TrackAlbumId` FOREIGN KEY (`AlbumId`) REFERENCES `Album` (`AlbumId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackGenreId` FOREIGN KEY (`GenreId`) REFERENCES `Genre` (`GenreId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackMediaTypeId` FOREIGN KEY (`MediaTypeId`) REFERENCES `MediaType` (`MediaTypeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
6389,cre_Docs_and_Epenses,SELECT count(*) FROM Statements,How many statements do we have?,['SELECT' 'count' '(' '*' ')' 'FROM' 'Statements'],['select' 'count' '(' '*' ')' 'from' 'statements'],['How' 'many' 'statements' 'do' 'we' 'have' '?'],"['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
1716,epinions_1,SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review),Find the names of users who did not leave any review.,"['SELECT' 'name' 'FROM' 'useracct' 'WHERE' 'u_id' 'NOT' 'IN' '(' 'SELECT'
 'u_id' 'FROM' 'review' ')']","['select' 'name' 'from' 'useracct' 'where' 'u_id' 'not' 'in' '(' 'select'
 'u_id' 'from' 'review' ')']","['Find' 'the' 'names' 'of' 'users' 'who' 'did' 'not' 'leave' 'any'
 'review' '.']","['CREATE TABLE `item` ( `i_id` integer NOT NULL , `title` varchar(20) DEFAULT NULL , PRIMARY KEY (`i_id`) )', 'CREATE TABLE `review` ( `a_id` integer NOT NULL PRIMARY KEY , `u_id` integer NOT NULL , `i_id` integer NOT NULL , `rating` integer DEFAULT NULL , `rank` integer DEFAULT NULL , FOREIGN KEY (`u_id`) REFERENCES `useracct`(`u_id`) , FOREIGN KEY (`i_id`) REFERENCES `item`(`i_id`) )', 'CREATE TABLE `useracct` ( `u_id` integer NOT NULL , `name` varchar(128) DEFAULT NULL , PRIMARY KEY (`u_id`) )', 'CREATE TABLE ""trust"" (`source_u_id` integer NOT NULL, `target_u_id` integer NOT NULL, `trust` integer NOT NULL, FOREIGN KEY (`source_u_id`) REFERENCES `useracct`(`u_id`), FOREIGN KEY (`target_u_id`) REFERENCES `useracct`(`u_id`))']"
2855,customer_deliveries,SELECT route_name FROM Delivery_Routes ORDER BY route_name,List the names of all routes in alphabetic order.,['SELECT' 'route_name' 'FROM' 'Delivery_Routes' 'ORDER' 'BY' 'route_name'],['select' 'route_name' 'from' 'delivery_routes' 'order' 'by' 'route_name'],['List' 'the' 'names' 'of' 'all' 'routes' 'in' 'alphabetic' 'order' '.'],"['CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(20), `product_price` DECIMAL(19,4), `product_description` VARCHAR(255) )', 'CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(10) NOT NULL, `customer_name` VARCHAR(80), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80), `date_became_customer` DATETIME )', 'CREATE TABLE `Regular_Orders` ( `regular_order_id` INTEGER PRIMARY KEY, `distributer_id` INTEGER NOT NULL, FOREIGN KEY (`distributer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Regular_Order_Products` ( `regular_order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`regular_order_id` ) REFERENCES `Regular_Orders`(`regular_order_id` ) )', 'CREATE TABLE `Actual_Orders` ( `actual_order_id` INTEGER PRIMARY KEY, `order_status_code` VARCHAR(10) NOT NULL, `regular_order_id` INTEGER NOT NULL, `actual_order_date` DATETIME, FOREIGN KEY (`regular_order_id` ) REFERENCES `Regular_Orders`(`regular_order_id` ) )', 'CREATE TABLE `Actual_Order_Products` ( `actual_order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`actual_order_id` ) REFERENCES `Actual_Orders`(`actual_order_id` ) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `address_type` VARCHAR(10) NOT NULL, `date_to` DATETIME, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Delivery_Routes` ( `route_id` INTEGER PRIMARY KEY, `route_name` VARCHAR(50), `other_route_details` VARCHAR(255) )', 'CREATE TABLE `Delivery_Route_Locations` ( `location_code` VARCHAR(10) PRIMARY KEY, `route_id` INTEGER NOT NULL, `location_address_id` INTEGER NOT NULL, `location_name` VARCHAR(50), FOREIGN KEY (`location_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`route_id` ) REFERENCES `Delivery_Routes`(`route_id` ) )', 'CREATE TABLE `Trucks` ( `truck_id` INTEGER PRIMARY KEY, `truck_licence_number` VARCHAR(20), `truck_details` VARCHAR(255) )', 'CREATE TABLE `Employees` ( `employee_id` INTEGER PRIMARY KEY, `employee_address_id` INTEGER NOT NULL, `employee_name` VARCHAR(80), `employee_phone` VARCHAR(80), FOREIGN KEY (`employee_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Order_Deliveries` ( `location_code` VARCHAR(10) NOT NULL, `actual_order_id` INTEGER NOT NULL, `delivery_status_code` VARCHAR(10) NOT NULL, `driver_employee_id` INTEGER NOT NULL, `truck_id` INTEGER NOT NULL, `delivery_date` DATETIME, FOREIGN KEY (`truck_id` ) REFERENCES `Trucks`(`truck_id` ), FOREIGN KEY (`actual_order_id` ) REFERENCES `Actual_Orders`(`actual_order_id` ), FOREIGN KEY (`location_code` ) REFERENCES `Delivery_Route_Locations`(`location_code` ), FOREIGN KEY (`driver_employee_id` ) REFERENCES `Employees`(`employee_id` ) )']"
5703,dorm_1,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?,"['SELECT' 'T1.dorm_name' 'FROM' 'dorm' 'AS' 'T1' 'JOIN' 'has_amenity' 'AS'
 'T2' 'ON' 'T1.dormid' '=' 'T2.dormid' 'JOIN' 'dorm_amenity' 'AS' 'T3'
 'ON' 'T2.amenid' '=' 'T3.amenid' 'WHERE' 'T3.amenity_name' '=' ""'TV""
 'Lounge' ""'"" 'INTERSECT' 'SELECT' 'T1.dorm_name' 'FROM' 'dorm' 'AS' 'T1'
 'JOIN' 'has_amenity' 'AS' 'T2' 'ON' 'T1.dormid' '=' 'T2.dormid' 'JOIN'
 'dorm_amenity' 'AS' 'T3' 'ON' 'T2.amenid' '=' 'T3.amenid' 'WHERE'
 'T3.amenity_name' '=' ""'Study"" 'Room' ""'""]","['select' 't1' '.' 'dorm_name' 'from' 'dorm' 'as' 't1' 'join'
 'has_amenity' 'as' 't2' 'on' 't1' '.' 'dormid' '=' 't2' '.' 'dormid'
 'join' 'dorm_amenity' 'as' 't3' 'on' 't2' '.' 'amenid' '=' 't3' '.'
 'amenid' 'where' 't3' '.' 'amenity_name' '=' 'value' 'intersect' 'select'
 't1' '.' 'dorm_name' 'from' 'dorm' 'as' 't1' 'join' 'has_amenity' 'as'
 't2' 'on' 't1' '.' 'dormid' '=' 't2' '.' 'dormid' 'join' 'dorm_amenity'
 'as' 't3' 'on' 't2' '.' 'amenid' '=' 't3' '.' 'amenid' 'where' 't3' '.'
 'amenity_name' '=' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'dorm' 'with' 'both' 'a' 'TV'
 'Lounge' 'and' 'Study' 'Room' 'listed' 'as' 'amenities' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
5804,customer_complaints,SELECT count(DISTINCT complaint_type_code) FROM complaints,How many distinct complaint type codes are there in the database?,"['SELECT' 'count' '(' 'DISTINCT' 'complaint_type_code' ')' 'FROM'
 'complaints']","['select' 'count' '(' 'distinct' 'complaint_type_code' ')' 'from'
 'complaints']","['How' 'many' 'distinct' 'complaint' 'type' 'codes' 'are' 'there' 'in'
 'the' 'database' '?']","['CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
233,book_2,"SELECT Price FROM publication WHERE Publisher  =  ""Person"" OR Publisher  =  ""Wiley""","Show the prices of publications whose publisher is either ""Person"" or ""Wiley""","['SELECT' 'Price' 'FROM' 'publication' 'WHERE' 'Publisher' '=' '``'
 'Person' ""''"" 'OR' 'Publisher' '=' '``' 'Wiley' ""''""]","['select' 'price' 'from' 'publication' 'where' 'publisher' '=' 'value'
 'or' 'publisher' '=' 'value']","['Show' 'the' 'prices' 'of' 'publications' 'whose' 'publisher' 'is'
 'either' '``' 'Person' ""''"" 'or' '``' 'Wiley' ""''""]","['CREATE TABLE ""publication"" ( ""Publication_ID"" int, ""Book_ID"" int, ""Publisher"" text, ""Publication_Date"" text, ""Price"" real, PRIMARY KEY (""Publication_ID""), FOREIGN KEY (""Book_ID"") REFERENCES ""book""(""Book_ID"") )', 'CREATE TABLE ""book"" ( ""Book_ID"" int, ""Title"" text, ""Issues"" real, ""Writer"" text, PRIMARY KEY (""Book_ID"") )']"
3932,hospital_1,"SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",Find the number of rooms located on each block floor.,"['SELECT' 'count' '(' '*' ')' ',' 'T1.blockfloor' 'FROM' 'BLOCK' 'AS' 'T1'
 'JOIN' 'room' 'AS' 'T2' 'ON' 'T1.blockfloor' '=' 'T2.blockfloor' 'AND'
 'T1.blockcode' '=' 'T2.blockcode' 'GROUP' 'BY' 'T1.blockfloor']","['select' 'count' '(' '*' ')' ',' 't1' '.' 'blockfloor' 'from' 'block'
 'as' 't1' 'join' 'room' 'as' 't2' 'on' 't1' '.' 'blockfloor' '=' 't2' '.'
 'blockfloor' 'and' 't1' '.' 'blockcode' '=' 't2' '.' 'blockcode' 'group'
 'by' 't1' '.' 'blockfloor']","['Find' 'the' 'number' 'of' 'rooms' 'located' 'on' 'each' 'block' 'floor'
 '.']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
6385,cre_Docs_and_Epenses,SELECT count(*) FROM Accounts,How many accounts do we have?,['SELECT' 'count' '(' '*' ')' 'FROM' 'Accounts'],['select' 'count' '(' '*' ')' 'from' 'accounts'],['How' 'many' 'accounts' 'do' 'we' 'have' '?'],"['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
2980,sakila_1,SELECT count(*) FROM store,How many stores are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'store'],['select' 'count' '(' '*' ')' 'from' 'store'],['How' 'many' 'stores' 'are' 'there' '?'],"['CREATE TABLE actor ( actor_id SMALLINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id) )', 'CREATE TABLE address ( address_id SMALLINT UNSIGNED NOT NULL, address VARCHAR(50) NOT NULL, address2 VARCHAR(50) DEFAULT NULL, district VARCHAR(20) NOT NULL, city_id SMALLINT UNSIGNED NOT NULL, postal_code VARCHAR(10) DEFAULT NULL, phone VARCHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (address_id), FOREIGN KEY (city_id) REFERENCES city (city_id) )', 'CREATE TABLE category ( category_id TINYINT UNSIGNED NOT NULL, name VARCHAR(25) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (category_id) )', 'CREATE TABLE city ( city_id SMALLINT UNSIGNED NOT NULL, city VARCHAR(50) NOT NULL, country_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (city_id), FOREIGN KEY (country_id) REFERENCES country (country_id) )', 'CREATE TABLE country ( country_id SMALLINT UNSIGNED NOT NULL, country VARCHAR(50) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (country_id) )', 'CREATE TABLE customer ( customer_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, email VARCHAR(50) DEFAULT NULL, address_id SMALLINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, create_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (customer_id), FOREIGN KEY (address_id) REFERENCES address (address_id), FOREIGN KEY (store_id) REFERENCES store (store_id) )', ""CREATE TABLE film ( film_id SMALLINT UNSIGNED NOT NULL, title VARCHAR(255) NOT NULL, description TEXT DEFAULT NULL, release_year YEAR DEFAULT NULL, language_id TINYINT UNSIGNED NOT NULL, original_language_id TINYINT UNSIGNED DEFAULT NULL, rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3, rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99, length SMALLINT UNSIGNED DEFAULT NULL, replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99, rating DEFAULT 'G', special_features DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id), FOREIGN KEY (language_id) REFERENCES language (language_id), FOREIGN KEY (original_language_id) REFERENCES language (language_id) )"", 'CREATE TABLE film_actor ( actor_id SMALLINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id,film_id), FOREIGN KEY (actor_id) REFERENCES actor (actor_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE film_category ( film_id SMALLINT UNSIGNED NOT NULL, category_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id, category_id), FOREIGN KEY (film_id) REFERENCES film (film_id), FOREIGN KEY (category_id) REFERENCES category (category_id) )', 'CREATE TABLE film_text ( film_id SMALLINT NOT NULL, title VARCHAR(255) NOT NULL, description TEXT, PRIMARY KEY (film_id) )', 'CREATE TABLE inventory ( inventory_id MEDIUMINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (inventory_id), FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE language ( language_id TINYINT UNSIGNED NOT NULL, name CHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (language_id) )', 'CREATE TABLE payment ( payment_id SMALLINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, staff_id TINYINT UNSIGNED NOT NULL, rental_id INT DEFAULT NULL, amount DECIMAL(5,2) NOT NULL, payment_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (payment_id), FOREIGN KEY (rental_id) REFERENCES rental (rental_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id) )', 'CREATE TABLE rental ( rental_id INT NOT NULL, rental_date DATETIME NOT NULL, inventory_id MEDIUMINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, return_date DATETIME DEFAULT NULL, staff_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (rental_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id), FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id) )', 'CREATE TABLE staff ( staff_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, picture BLOB DEFAULT NULL, email VARCHAR(50) DEFAULT NULL, store_id TINYINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, username VARCHAR(16) NOT NULL, password VARCHAR(40) DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )', 'CREATE TABLE store ( store_id TINYINT UNSIGNED NOT NULL, manager_staff_id TINYINT UNSIGNED NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (store_id), FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )']"
3917,hospital_1,SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1,Find the name of the patient who made the appointment with the most recent start date.,"['SELECT' 'T1.name' 'FROM' 'patient' 'AS' 'T1' 'JOIN' 'appointment' 'AS'
 'T2' 'ON' 'T1.ssn' '=' 'T2.patient' 'ORDER' 'BY' 'T2.start' 'DESC'
 'LIMIT' '1']","['select' 't1' '.' 'name' 'from' 'patient' 'as' 't1' 'join' 'appointment'
 'as' 't2' 'on' 't1' '.' 'ssn' '=' 't2' '.' 'patient' 'order' 'by' 't2'
 '.' 'start' 'desc' 'limit' 'value']","['Find' 'the' 'name' 'of' 'the' 'patient' 'who' 'made' 'the' 'appointment'
 'with' 'the' 'most' 'recent' 'start' 'date' '.']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
5946,cre_Theme_park,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,Which transportation method is used the most often to get to tourist attractions?,"['SELECT' 'How_to_Get_There' 'FROM' 'Tourist_Attractions' 'GROUP' 'BY'
 'How_to_Get_There' 'ORDER' 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'how_to_get_there' 'from' 'tourist_attractions' 'group' 'by'
 'how_to_get_there' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit'
 'value']","['Which' 'transportation' 'method' 'is' 'used' 'the' 'most' 'often' 'to'
 'get' 'to' 'tourist' 'attractions' '?']","['CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) )', 'CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) )', 'CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) )', 'CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) )', 'CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) )', 'CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) )', 'CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) )']"
4491,decoration_competition,"SELECT Leader_Name ,  College_Location FROM college",Show the leader names and locations of colleges.,"['SELECT' 'Leader_Name' ',' 'College_Location' 'FROM' 'college']","['select' 'leader_name' ',' 'college_location' 'from' 'college']",['Show' 'the' 'leader' 'names' 'and' 'locations' 'of' 'colleges' '.'],"['CREATE TABLE ""college"" ( ""College_ID"" int, ""Name"" text, ""Leader_Name"" text, ""College_Location"" text, PRIMARY KEY (""College_ID"") )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Country"" text, ""College_ID"" int, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""College_ID"") REFERENCES `college`(""College_ID"") )', 'CREATE TABLE ""round"" ( ""Round_ID"" int, ""Member_ID"" int, ""Decoration_Theme"" text, ""Rank_in_Round"" int, PRIMARY KEY (""Member_ID"",""Round_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID"") )']"
63,student_assessment,SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance),What are the  ids of every student who has never attended a course?,"['SELECT' 'student_id' 'FROM' 'students' 'WHERE' 'student_id' 'NOT' 'IN'
 '(' 'SELECT' 'student_id' 'FROM' 'student_course_attendance' ')']","['select' 'student_id' 'from' 'students' 'where' 'student_id' 'not' 'in'
 '(' 'select' 'student_id' 'from' 'student_course_attendance' ')']","['What' 'are' 'the' 'ids' 'of' 'every' 'student' 'who' 'has' 'never'
 'attended' 'a' 'course' '?']","['CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) )', 'CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) )', 'CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) )', 'CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) )', 'CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) )', 'CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) )', 'CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) )', 'CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) )', 'CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) )']"
4028,student_1,SELECT count(*) FROM list,Find the number of students in total.,['SELECT' 'count' '(' '*' ')' 'FROM' 'list'],['select' 'count' '(' '*' ')' 'from' 'list'],['Find' 'the' 'number' 'of' 'students' 'in' 'total' '.'],"['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
2859,icfp_1,SELECT count(*) FROM authors,Count the number of authors.,['SELECT' 'count' '(' '*' ')' 'FROM' 'authors'],['select' 'count' '(' '*' ')' 'from' 'authors'],['Count' 'the' 'number' 'of' 'authors' '.'],"['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
4436,network_2,SELECT name FROM Person ORDER BY age DESC,Find the names of all person sorted in the descending order using age.,['SELECT' 'name' 'FROM' 'Person' 'ORDER' 'BY' 'age' 'DESC'],['select' 'name' 'from' 'person' 'order' 'by' 'age' 'desc'],"['Find' 'the' 'names' 'of' 'all' 'person' 'sorted' 'in' 'the' 'descending'
 'order' 'using' 'age' '.']","['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
1791,small_bank_1,"SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",What are the checking and savings balances in accounts belonging to Brown?,"['SELECT' 'T2.balance' ',' 'T3.balance' 'FROM' 'accounts' 'AS' 'T1' 'JOIN'
 'checking' 'AS' 'T2' 'ON' 'T1.custid' '=' 'T2.custid' 'JOIN' 'savings'
 'AS' 'T3' 'ON' 'T1.custid' '=' 'T3.custid' 'WHERE' 'T1.name' '=' ""'Brown""
 ""'""]","['select' 't2' '.' 'balance' ',' 't3' '.' 'balance' 'from' 'accounts' 'as'
 't1' 'join' 'checking' 'as' 't2' 'on' 't1' '.' 'custid' '=' 't2' '.'
 'custid' 'join' 'savings' 'as' 't3' 'on' 't1' '.' 'custid' '=' 't3' '.'
 'custid' 'where' 't1' '.' 'name' '=' 'value']","['What' 'are' 'the' 'checking' 'and' 'savings' 'balances' 'in' 'accounts'
 'belonging' 'to' 'Brown' '?']","['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
4073,student_1,"SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  ""CHRISSY"" AND T1.lastname  =  ""NABOZNY""",Find the number of teachers who teach the student called CHRISSY NABOZNY.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'list' 'AS' 'T1' 'JOIN' 'teachers'
 'AS' 'T2' 'ON' 'T1.classroom' '=' 'T2.classroom' 'WHERE' 'T1.firstname'
 '=' '``' 'CHRISSY' ""''"" 'AND' 'T1.lastname' '=' '``' 'NABOZNY' ""''""]","['select' 'count' '(' '*' ')' 'from' 'list' 'as' 't1' 'join' 'teachers'
 'as' 't2' 'on' 't1' '.' 'classroom' '=' 't2' '.' 'classroom' 'where' 't1'
 '.' 'firstname' '=' 'value' 'and' 't1' '.' 'lastname' '=' 'value']","['Find' 'the' 'number' 'of' 'teachers' 'who' 'teach' 'the' 'student'
 'called' 'CHRISSY' 'NABOZNY' '.']","['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
4190,cre_Doc_Tracking_DB,"SELECT role_code ,  role_name ,  role_description FROM ROLES","List all role codes, role names, and role descriptions.","['SELECT' 'role_code' ',' 'role_name' ',' 'role_description' 'FROM'
 'ROLES']","['select' 'role_code' ',' 'role_name' ',' 'role_description' 'from'
 'roles']","['List' 'all' 'role' 'codes' ',' 'role' 'names' ',' 'and' 'role'
 'descriptions' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
5794,customer_complaints,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1,Find the last name of the staff member who processed the complaint of the cheapest product.,"['SELECT' 't1.last_name' 'FROM' 'staff' 'AS' 't1' 'JOIN' 'complaints' 'AS'
 't2' 'ON' 't1.staff_id' '=' 't2.staff_id' 'JOIN' 'products' 'AS' 't3'
 'ON' 't2.product_id' '=' 't3.product_id' 'ORDER' 'BY' 't3.product_price'
 'LIMIT' '1']","['select' 't1' '.' 'last_name' 'from' 'staff' 'as' 't1' 'join'
 'complaints' 'as' 't2' 'on' 't1' '.' 'staff_id' '=' 't2' '.' 'staff_id'
 'join' 'products' 'as' 't3' 'on' 't2' '.' 'product_id' '=' 't3' '.'
 'product_id' 'order' 'by' 't3' '.' 'product_price' 'limit' 'value']","['Find' 'the' 'last' 'name' 'of' 'the' 'staff' 'member' 'who' 'processed'
 'the' 'complaint' 'of' 'the' 'cheapest' 'product' '.']","['CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
6025,game_1,"SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  ""Football""",Show student ids who are female and play football.,"['SELECT' 'StuID' 'FROM' 'Student' 'WHERE' 'sex' '=' ""'F"" ""'"" 'INTERSECT'
 'SELECT' 'StuID' 'FROM' 'Sportsinfo' 'WHERE' 'sportname' '=' '``'
 'Football' ""''""]","['select' 'stuid' 'from' 'student' 'where' 'sex' '=' 'value' 'intersect'
 'select' 'stuid' 'from' 'sportsinfo' 'where' 'sportname' '=' 'value']",['Show' 'student' 'ids' 'who' 'are' 'female' 'and' 'play' 'football' '.'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
2761,election,SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000,Find the delegates who are from counties with population below 100000.,"['SELECT' 'T2.Delegate' 'FROM' 'county' 'AS' 'T1' 'JOIN' 'election' 'AS'
 'T2' 'ON' 'T1.County_id' '=' 'T2.District' 'WHERE' 'T1.Population' '<'
 '100000']","['select' 't2' '.' 'delegate' 'from' 'county' 'as' 't1' 'join' 'election'
 'as' 't2' 'on' 't1' '.' 'county_id' '=' 't2' '.' 'district' 'where' 't1'
 '.' 'population' '<' 'value']","['Find' 'the' 'delegates' 'who' 'are' 'from' 'counties' 'with'
 'population' 'below' '100000' '.']","['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
2125,cre_Doc_Control_Systems,"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",Which document has the most draft copies? List its document id and number of draft copies.,"['SELECT' 'document_id' ',' 'count' '(' 'copy_number' ')' 'FROM'
 'Draft_Copies' 'GROUP' 'BY' 'document_id' 'ORDER' 'BY' 'count' '('
 'copy_number' ')' 'DESC' 'LIMIT' '1' ';']","['select' 'document_id' ',' 'count' '(' 'copy_number' ')' 'from'
 'draft_copies' 'group' 'by' 'document_id' 'order' 'by' 'count' '('
 'copy_number' ')' 'desc' 'limit' 'value']","['Which' 'document' 'has' 'the' 'most' 'draft' 'copies' '?' 'List' 'its'
 'document' 'id' 'and' 'number' 'of' 'draft' 'copies' '.']","['CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) )', 'CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) )', 'CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) )', 'CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) )', 'CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) )', 'CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) )', 'CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) )', 'CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) )', 'CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) )', 'CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) )', 'CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) )']"
6366,flight_company,SELECT count(*) FROM flight WHERE velocity  >  200,How many flights have a velocity larger than 200?,['SELECT' 'count' '(' '*' ')' 'FROM' 'flight' 'WHERE' 'velocity' '>' '200'],"['select' 'count' '(' '*' ')' 'from' 'flight' 'where' 'velocity' '>'
 'value']",['How' 'many' 'flights' 'have' 'a' 'velocity' 'larger' 'than' '200' '?'],"['CREATE TABLE ""airport"" ( ""id"" int, ""City"" text, ""Country"" text, ""IATA"" text, ""ICAO"" text, ""name"" text, primary key(""id"") )', 'CREATE TABLE ""operate_company"" ( ""id"" int, ""name"" text, ""Type"" text, ""Principal_activities"" text, ""Incorporated_in"" text, ""Group_Equity_Shareholding"" real, primary key (""id"") )', 'CREATE TABLE ""flight"" ( ""id"" int, ""Vehicle_Flight_number"" text, ""Date"" text, ""Pilot"" text, ""Velocity"" real, ""Altitude"" real, ""airport_id"" int, ""company_id"" int, primary key (""id""), foreign key (""airport_id"") references `airport`(""id""), foreign key (""company_id"") references `operate_company`(""id"") )']"
1677,theme_gallery,"SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",Show theme and year for all exhibitions in an descending order of ticket price.,"['SELECT' 'theme' ',' 'YEAR' 'FROM' 'exhibition' 'ORDER' 'BY'
 'ticket_price' 'DESC']","['select' 'theme' ',' 'year' 'from' 'exhibition' 'order' 'by'
 'ticket_price' 'desc']","['Show' 'theme' 'and' 'year' 'for' 'all' 'exhibitions' 'in' 'an'
 'descending' 'order' 'of' 'ticket' 'price' '.']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Name"" text, ""Country"" text, ""Year_Join"" int, ""Age"" int, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""exhibition"" ( ""Exhibition_ID"" int, ""Year"" int, ""Theme"" text, ""Artist_ID"" int, ""Ticket_Price"" real, PRIMARY KEY (""Exhibition_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""exhibition_record"" ( ""Exhibition_ID"" int, ""Date"" text, ""Attendance"" int, PRIMARY KEY (""Exhibition_ID"",""Date""), FOREIGN KEY (`Exhibition_ID`) REFERENCES `exhibition`(`Exhibition_ID`) )']"
728,customers_card_transactions,"SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  ""Credit""",What are the ids and first names of customers who do not hold a credit card?,"['SELECT' 'customer_id' ',' 'customer_first_name' 'FROM' 'Customers'
 'EXCEPT' 'SELECT' 'T1.customer_id' ',' 'T2.customer_first_name' 'FROM'
 'Customers_cards' 'AS' 'T1' 'JOIN' 'Customers' 'AS' 'T2' 'ON'
 'T1.customer_id' '=' 'T2.customer_id' 'WHERE' 'card_type_code' '=' '``'
 'Credit' ""''""]","['select' 'customer_id' ',' 'customer_first_name' 'from' 'customers'
 'except' 'select' 't1' '.' 'customer_id' ',' 't2' '.'
 'customer_first_name' 'from' 'customers_cards' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'where' 'card_type_code' '=' 'value']","['What' 'are' 'the' 'ids' 'and' 'first' 'names' 'of' 'customers' 'who'
 'do' 'not' 'hold' 'a' 'credit' 'card' '?']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
5164,cre_Drama_Workshop_Groups,SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID,Show the names of all the clients with no booking.,"['SELECT' 'Customer_Name' 'FROM' 'Clients' 'EXCEPT' 'SELECT'
 'T2.Customer_Name' 'FROM' 'Bookings' 'AS' 'T1' 'JOIN' 'Clients' 'AS' 'T2'
 'ON' 'T1.Customer_ID' '=' 'T2.Client_ID']","['select' 'customer_name' 'from' 'clients' 'except' 'select' 't2' '.'
 'customer_name' 'from' 'bookings' 'as' 't1' 'join' 'clients' 'as' 't2'
 'on' 't1' '.' 'customer_id' '=' 't2' '.' 'client_id']",['Show' 'the' 'names' 'of' 'all' 'the' 'clients' 'with' 'no' 'booking' '.'],"['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
411,flight_1,SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99,What is the aircraft name for the flight with number 99,"['SELECT' 'T2.name' 'FROM' 'Flight' 'AS' 'T1' 'JOIN' 'Aircraft' 'AS' 'T2'
 'ON' 'T1.aid' '=' 'T2.aid' 'WHERE' 'T1.flno' '=' '99']","['select' 't2' '.' 'name' 'from' 'flight' 'as' 't1' 'join' 'aircraft' 'as'
 't2' 'on' 't1' '.' 'aid' '=' 't2' '.' 'aid' 'where' 't1' '.' 'flno' '='
 'value']","['What' 'is' 'the' 'aircraft' 'name' 'for' 'the' 'flight' 'with' 'number'
 '99']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
54,farm,"SELECT Census_Ranking FROM city WHERE Status !=  ""Village""","Show the census ranking of cities whose status are not ""Village"".","['SELECT' 'Census_Ranking' 'FROM' 'city' 'WHERE' 'Status' '!' '=' '``'
 'Village' ""''""]",['select' 'census_ranking' 'from' 'city' 'where' 'status' '!' '=' 'value'],"['Show' 'the' 'census' 'ranking' 'of' 'cities' 'whose' 'status' 'are'
 'not' '``' 'Village' ""''"" '.']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""Official_Name"" text, ""Status"" text, ""Area_km_2"" real, ""Population"" real, ""Census_Ranking"" text, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""farm"" ( ""Farm_ID"" int, ""Year"" int, ""Total_Horses"" real, ""Working_Horses"" real, ""Total_Cattle"" real, ""Oxen"" real, ""Bulls"" real, ""Cows"" real, ""Pigs"" real, ""Sheep_and_Goats"" real, PRIMARY KEY (""Farm_ID"") )', 'CREATE TABLE ""farm_competition"" ( ""Competition_ID"" int, ""Year"" int, ""Theme"" text, ""Host_city_ID"" int, ""Hosts"" text, PRIMARY KEY (""Competition_ID""), FOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""competition_record"" ( ""Competition_ID"" int, ""Farm_ID"" int, ""Rank"" int, PRIMARY KEY (""Competition_ID"",""Farm_ID""), FOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`), FOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`) )']"
5149,cre_Drama_Workshop_Groups,SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups,Find the number of distinct currency codes used in drama workshop groups.,"['SELECT' 'count' '(' 'DISTINCT' 'Currency_Code' ')' 'FROM'
 'Drama_Workshop_Groups']","['select' 'count' '(' 'distinct' 'currency_code' ')' 'from'
 'drama_workshop_groups']","['Find' 'the' 'number' 'of' 'distinct' 'currency' 'codes' 'used' 'in'
 'drama' 'workshop' 'groups' '.']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
6532,wine_1,SELECT Name FROM WINE WHERE score  >  90,What are the names of wines with scores higher than 90?,['SELECT' 'Name' 'FROM' 'WINE' 'WHERE' 'score' '>' '90'],['select' 'name' 'from' 'wine' 'where' 'score' '>' 'value'],"['What' 'are' 'the' 'names' 'of' 'wines' 'with' 'scores' 'higher' 'than'
 '90' '?']","['CREATE TABLE ""grapes"" ( \t""ID"" INTEGER PRIMARY KEY, \t""Grape"" TEXT UNIQUE, \t""Color"" TEXT );', 'CREATE TABLE ""appellations"" ( \t""No"" INTEGER PRIMARY KEY, \t""Appelation"" TEXT UNIQUE, \t""County"" TEXT, \t""State"" TEXT, \t""Area"" TEXT, \t""isAVA"" TEXT);', 'CREATE TABLE ""wine"" ( \t""No"" INTEGER, \t""Grape"" TEXT, \t""Winery"" TEXT, \t""Appelation"" TEXT, \t""State"" TEXT, \t""Name"" TEXT, \t""Year"" INTEGER, \t""Price"" INTEGER, \t""Score"" INTEGER, \t""Cases"" INTEGER, \t""Drink"" TEXT,\tFOREIGN KEY (Grape) REFERENCES grapes(Grape),\tFOREIGN KEY (Appelation) REFERENCES appellations(Appelation));']"
1684,theme_gallery,SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500,Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?,"['SELECT' 'T2.theme' 'FROM' 'exhibition_record' 'AS' 'T1' 'JOIN'
 'exhibition' 'AS' 'T2' 'ON' 'T1.exhibition_id' '=' 'T2.exhibition_id'
 'WHERE' 'T1.attendance' '<' '100' 'INTERSECT' 'SELECT' 'T2.theme' 'FROM'
 'exhibition_record' 'AS' 'T1' 'JOIN' 'exhibition' 'AS' 'T2' 'ON'
 'T1.exhibition_id' '=' 'T2.exhibition_id' 'WHERE' 'T1.attendance' '>'
 '500']","['select' 't2' '.' 'theme' 'from' 'exhibition_record' 'as' 't1' 'join'
 'exhibition' 'as' 't2' 'on' 't1' '.' 'exhibition_id' '=' 't2' '.'
 'exhibition_id' 'where' 't1' '.' 'attendance' '<' 'value' 'intersect'
 'select' 't2' '.' 'theme' 'from' 'exhibition_record' 'as' 't1' 'join'
 'exhibition' 'as' 't2' 'on' 't1' '.' 'exhibition_id' '=' 't2' '.'
 'exhibition_id' 'where' 't1' '.' 'attendance' '>' 'value']","['Which' 'themes' 'have' 'had' 'corresponding' 'exhibitions' 'that' 'have'
 'had' 'attendance' 'both' 'below' '100' 'and' 'above' '500' '?']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Name"" text, ""Country"" text, ""Year_Join"" int, ""Age"" int, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""exhibition"" ( ""Exhibition_ID"" int, ""Year"" int, ""Theme"" text, ""Artist_ID"" int, ""Ticket_Price"" real, PRIMARY KEY (""Exhibition_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""exhibition_record"" ( ""Exhibition_ID"" int, ""Date"" text, ""Attendance"" int, PRIMARY KEY (""Exhibition_ID"",""Date""), FOREIGN KEY (`Exhibition_ID`) REFERENCES `exhibition`(`Exhibition_ID`) )']"
4241,cre_Doc_Tracking_DB,SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,Which employees do not authorize destruction for any document? Give me their employee ids.,"['SELECT' 'employee_id' 'FROM' 'Employees' 'EXCEPT' 'SELECT'
 'Destruction_Authorised_by_Employee_ID' 'FROM'
 'Documents_to_be_destroyed']","['select' 'employee_id' 'from' 'employees' 'except' 'select'
 'destruction_authorised_by_employee_id' 'from'
 'documents_to_be_destroyed']","['Which' 'employees' 'do' 'not' 'authorize' 'destruction' 'for' 'any'
 'document' '?' 'Give' 'me' 'their' 'employee' 'ids' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
1163,body_builder,"SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",List each birth place along with the number of people from there.,"['SELECT' 'Birth_Place' ',' 'COUNT' '(' '*' ')' 'FROM' 'people' 'GROUP'
 'BY' 'Birth_Place']","['select' 'birth_place' ',' 'count' '(' '*' ')' 'from' 'people' 'group'
 'by' 'birth_place']","['List' 'each' 'birth' 'place' 'along' 'with' 'the' 'number' 'of' 'people'
 'from' 'there' '.']","['CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") )']"
6982,culture_company,"SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million","Show all movie titles, years, and directors, ordered by budget.","['SELECT' 'title' ',' 'YEAR' ',' 'director' 'FROM' 'movie' 'ORDER' 'BY'
 'budget_million']","['select' 'title' ',' 'year' ',' 'director' 'from' 'movie' 'order' 'by'
 'budget_million']","['Show' 'all' 'movie' 'titles' ',' 'years' ',' 'and' 'directors' ','
 'ordered' 'by' 'budget' '.']","['CREATE TABLE ""book_club"" ( ""book_club_id"" int, ""Year"" int, ""Author_or_Editor"" text, ""Book_Title"" text, ""Publisher"" text, ""Category"" text, ""Result"" text, PRIMARY KEY (""book_club_id"") )', 'CREATE TABLE ""movie"" ( ""movie_id"" int, ""Title"" text, ""Year"" int, ""Director"" text, ""Budget_million"" real, ""Gross_worldwide"" int, PRIMARY KEY(""movie_id"") )', 'CREATE TABLE ""culture_company"" ( ""Company_name"" text, ""Type"" text, ""Incorporated_in"" text, ""Group_Equity_Shareholding"" real, ""book_club_id"" text, ""movie_id"" text, PRIMARY KEY(""Company_name""), FOREIGN KEY (""book_club_id"") REFERENCES ""book_club""(""book_club_id""), FOREIGN KEY (""movie_id"") REFERENCES ""movie""(""movie_id"") )']"
4546,company_office,SELECT name FROM Companies ORDER BY Market_Value_billion DESC,Sort the company names in descending order of the company's market value.,"['SELECT' 'name' 'FROM' 'Companies' 'ORDER' 'BY' 'Market_Value_billion'
 'DESC']","['select' 'name' 'from' 'companies' 'order' 'by' 'market_value_billion'
 'desc']","['Sort' 'the' 'company' 'names' 'in' 'descending' 'order' 'of' 'the'
 'company' ""'s"" 'market' 'value' '.']","['CREATE TABLE ""buildings"" ( ""id"" int, ""name"" text, ""City"" text, ""Height"" int, ""Stories"" int, ""Status"" text, PRIMARY KEY(""id"") )', 'CREATE TABLE ""Companies"" ( ""id"" int, ""name"" text, ""Headquarters"" text, ""Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value_billion"" text, PRIMARY KEY (""id"") )', 'CREATE TABLE ""Office_locations"" ( ""building_id"" int, ""company_id"" int, ""move_in_year"" int, PRIMARY KEY (""building_id"", ""company_id""), FOREIGN KEY (""building_id"") REFERENCES ""buildings""(""id""), FOREIGN KEY (""company_id"") REFERENCES ""Companies""(""id"") )']"
6252,ship_1,"SELECT name FROM ship ORDER BY built_year ,  CLASS",List all ship names in the order of built year and class.,"['SELECT' 'name' 'FROM' 'ship' 'ORDER' 'BY' 'built_year' ',' 'CLASS']","['select' 'name' 'from' 'ship' 'order' 'by' 'built_year' ',' 'class']","['List' 'all' 'ship' 'names' 'in' 'the' 'order' 'of' 'built' 'year' 'and'
 'class' '.']","['CREATE TABLE ""captain"" ( ""Captain_ID"" int, ""Name"" text, ""Ship_ID"" int, ""age"" text, ""Class"" text, ""Rank"" text, PRIMARY KEY (""Captain_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES ""Ship""(""Ship_ID"") )', 'CREATE TABLE ""Ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Built_Year"" real, ""Class"" text, ""Flag"" text, PRIMARY KEY (""Ship_ID"") )']"
2767,election,"SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID","For each delegate, find the names of the party they are part of.","['SELECT' 'T1.Delegate' ',' 'T2.Party' 'FROM' 'election' 'AS' 'T1' 'JOIN'
 'party' 'AS' 'T2' 'ON' 'T1.Party' '=' 'T2.Party_ID']","['select' 't1' '.' 'delegate' ',' 't2' '.' 'party' 'from' 'election' 'as'
 't1' 'join' 'party' 'as' 't2' 'on' 't1' '.' 'party' '=' 't2' '.'
 'party_id']","['For' 'each' 'delegate' ',' 'find' 'the' 'names' 'of' 'the' 'party'
 'they' 'are' 'part' 'of' '.']","['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
2746,election,SELECT Delegate FROM election WHERE District  =  1,Show the delegate from district 1 in election.,['SELECT' 'Delegate' 'FROM' 'election' 'WHERE' 'District' '=' '1'],['select' 'delegate' 'from' 'election' 'where' 'district' '=' 'value'],['Show' 'the' 'delegate' 'from' 'district' '1' 'in' 'election' '.'],"['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
1270,apartment_rentals,"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  ""Confirmed"" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  ""Provisional""","Show the apartment numbers of apartments with bookings that have status code both ""Provisional"" and ""Confirmed""","['SELECT' 'T2.apt_number' 'FROM' 'Apartment_Bookings' 'AS' 'T1' 'JOIN'
 'Apartments' 'AS' 'T2' 'ON' 'T1.apt_id' '=' 'T2.apt_id' 'WHERE'
 'T1.booking_status_code' '=' '``' 'Confirmed' ""''"" 'INTERSECT' 'SELECT'
 'T2.apt_number' 'FROM' 'Apartment_Bookings' 'AS' 'T1' 'JOIN' 'Apartments'
 'AS' 'T2' 'ON' 'T1.apt_id' '=' 'T2.apt_id' 'WHERE'
 'T1.booking_status_code' '=' '``' 'Provisional' ""''""]","['select' 't2' '.' 'apt_number' 'from' 'apartment_bookings' 'as' 't1'
 'join' 'apartments' 'as' 't2' 'on' 't1' '.' 'apt_id' '=' 't2' '.'
 'apt_id' 'where' 't1' '.' 'booking_status_code' '=' 'value' 'intersect'
 'select' 't2' '.' 'apt_number' 'from' 'apartment_bookings' 'as' 't1'
 'join' 'apartments' 'as' 't2' 'on' 't1' '.' 'apt_id' '=' 't2' '.'
 'apt_id' 'where' 't1' '.' 'booking_status_code' '=' 'value']","['Show' 'the' 'apartment' 'numbers' 'of' 'apartments' 'with' 'bookings'
 'that' 'have' 'status' 'code' 'both' '``' 'Provisional' ""''"" 'and' '``'
 'Confirmed' ""''""]","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
4699,college_3,"SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  ""Smith""",Find the average grade point of student whose last name is Smith.,"['SELECT' 'avg' '(' 'T2.gradepoint' ')' 'FROM' 'ENROLLED_IN' 'AS' 'T1'
 'JOIN' 'GRADECONVERSION' 'AS' 'T2' 'JOIN' 'STUDENT' 'AS' 'T3' 'ON'
 'T1.Grade' '=' 'T2.lettergrade' 'AND' 'T1.StuID' '=' 'T3.StuID' 'WHERE'
 'T3.LName' '=' '``' 'Smith' ""''""]","['select' 'avg' '(' 't2' '.' 'gradepoint' ')' 'from' 'enrolled_in' 'as'
 't1' 'join' 'gradeconversion' 'as' 't2' 'join' 'student' 'as' 't3' 'on'
 't1' '.' 'grade' '=' 't2' '.' 'lettergrade' 'and' 't1' '.' 'stuid' '='
 't3' '.' 'stuid' 'where' 't3' '.' 'lname' '=' 'value']","['Find' 'the' 'average' 'grade' 'point' 'of' 'student' 'whose' 'last'
 'name' 'is' 'Smith' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )', 'CREATE TABLE Department ( DNO INTEGER PRIMARY KEY, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER )', 'CREATE TABLE Member_of ( FacID INTEGER, DNO INTEGER, Appt_Type VARCHAR(15), FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Course ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER, Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER, FOREIGN KEY(Instructor) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Minor_in ( StuID INTEGER, DNO INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Enrolled_in ( StuID INTEGER, CID VARCHAR(7), Grade VARCHAR(2), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(CID) REFERENCES Course(CID), FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade) )', 'CREATE TABLE Gradeconversion ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT )']"
5273,manufactory_1,SELECT founder FROM manufacturers WHERE name  =  'Sony',Return the founder of Sony.,"['SELECT' 'founder' 'FROM' 'manufacturers' 'WHERE' 'name' '=' ""'Sony"" ""'""]",['select' 'founder' 'from' 'manufacturers' 'where' 'name' '=' 'value'],['Return' 'the' 'founder' 'of' 'Sony' '.'],"['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
4144,film_rank,SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2,List the names of studios that have at least two films.,"['SELECT' 'Studio' 'FROM' 'film' 'GROUP' 'BY' 'Studio' 'HAVING' 'COUNT'
 '(' '*' ')' '>' '=' '2']","['select' 'studio' 'from' 'film' 'group' 'by' 'studio' 'having' 'count'
 '(' '*' ')' '>' '=' 'value']","['List' 'the' 'names' 'of' 'studios' 'that' 'have' 'at' 'least' 'two'
 'films' '.']","['CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") )', 'CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") )', 'CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") )']"
6830,flight_4,"SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1","What is the name, city, and country of the airport with the lowest altitude?","['SELECT' 'name' ',' 'city' ',' 'country' 'FROM' 'airports' 'ORDER' 'BY'
 'elevation' 'LIMIT' '1']","['select' 'name' ',' 'city' ',' 'country' 'from' 'airports' 'order' 'by'
 'elevation' 'limit' 'value']","['What' 'is' 'the' 'name' ',' 'city' ',' 'and' 'country' 'of' 'the'
 'airport' 'with' 'the' 'lowest' 'altitude' '?']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
6230,ship_1,SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1,Which rank is the most common among captains?,"['SELECT' 'rank' 'FROM' 'captain' 'GROUP' 'BY' 'rank' 'ORDER' 'BY' 'count'
 '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'rank' 'from' 'captain' 'group' 'by' 'rank' 'order' 'by' 'count'
 '(' '*' ')' 'desc' 'limit' 'value']",['Which' 'rank' 'is' 'the' 'most' 'common' 'among' 'captains' '?'],"['CREATE TABLE ""captain"" ( ""Captain_ID"" int, ""Name"" text, ""Ship_ID"" int, ""age"" text, ""Class"" text, ""Rank"" text, PRIMARY KEY (""Captain_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES ""Ship""(""Ship_ID"") )', 'CREATE TABLE ""Ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Built_Year"" real, ""Class"" text, ""Flag"" text, PRIMARY KEY (""Ship_ID"") )']"
462,allergy_1,"SELECT Fname ,  Lname FROM Student",What are the full names of all students,"['SELECT' 'Fname' ',' 'Lname' 'FROM' 'Student']","['select' 'fname' ',' 'lname' 'from' 'student']",['What' 'are' 'the' 'full' 'names' 'of' 'all' 'students'],"['CREATE TABLE Allergy_Type ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) )', 'CREATE TABLE Has_Allergy ( StuID INTEGER, Allergy VARCHAR(20), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )']"
3182,college_1,SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski',How many classes does the professor whose last name is Graztevski teach?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'employee' 'AS' 'T1' 'JOIN' 'CLASS'
 'AS' 'T2' 'ON' 'T1.EMP_NUM' '=' 'T2.PROF_NUM' 'WHERE' 'T1.EMP_LNAME' '='
 ""'Graztevski"" ""'""]","['select' 'count' '(' '*' ')' 'from' 'employee' 'as' 't1' 'join' 'class'
 'as' 't2' 'on' 't1' '.' 'emp_num' '=' 't2' '.' 'prof_num' 'where' 't1'
 '.' 'emp_lname' '=' 'value']","['How' 'many' 'classes' 'does' 'the' 'professor' 'whose' 'last' 'name'
 'is' 'Graztevski' 'teach' '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
2713,storm_record,"SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",How many storms occured in each region?,"['SELECT' 'T1.region_name' ',' 'count' '(' '*' ')' 'FROM' 'region' 'AS'
 'T1' 'JOIN' 'affected_region' 'AS' 'T2' 'ON' 'T1.region_id' '='
 'T2.region_id' 'GROUP' 'BY' 'T1.region_id']","['select' 't1' '.' 'region_name' ',' 'count' '(' '*' ')' 'from' 'region'
 'as' 't1' 'join' 'affected_region' 'as' 't2' 'on' 't1' '.' 'region_id'
 '=' 't2' '.' 'region_id' 'group' 'by' 't1' '.' 'region_id']",['How' 'many' 'storms' 'occured' 'in' 'each' 'region' '?'],"['CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") )', 'CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") )', 'CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) )']"
5588,products_gen_characteristics,"SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  ""white"" AND t2.unit_of_measure != ""Handful""","Find the product names that are colored 'white' but do not have unit of measurement ""Handful"".","['SELECT' 't1.product_name' 'FROM' 'products' 'AS' 't1' 'JOIN'
 'ref_product_categories' 'AS' 't2' 'ON' 't1.product_category_code' '='
 't2.product_category_code' 'JOIN' 'ref_colors' 'AS' 't3' 'ON'
 't1.color_code' '=' 't3.color_code' 'WHERE' 't3.color_description' '='
 '``' 'white' ""''"" 'AND' 't2.unit_of_measure' '!' '=' '``' 'Handful' ""''""]","['select' 't1' '.' 'product_name' 'from' 'products' 'as' 't1' 'join'
 'ref_product_categories' 'as' 't2' 'on' 't1' '.' 'product_category_code'
 '=' 't2' '.' 'product_category_code' 'join' 'ref_colors' 'as' 't3' 'on'
 't1' '.' 'color_code' '=' 't3' '.' 'color_code' 'where' 't3' '.'
 'color_description' '=' 'value' 'and' 't2' '.' 'unit_of_measure' '!' '='
 'value']","['Find' 'the' 'product' 'names' 'that' 'are' 'colored' ""'white"" ""'"" 'but'
 'do' 'not' 'have' 'unit' 'of' 'measurement' '``' 'Handful' ""''"" '.']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
2126,cre_Doc_Control_Systems,"SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",Which documents have more than 1 draft copies? List document id and number of draft copies.,"['SELECT' 'document_id' ',' 'count' '(' '*' ')' 'FROM' 'Draft_Copies'
 'GROUP' 'BY' 'document_id' 'HAVING' 'count' '(' '*' ')' '>' '1' ';']","['select' 'document_id' ',' 'count' '(' '*' ')' 'from' 'draft_copies'
 'group' 'by' 'document_id' 'having' 'count' '(' '*' ')' '>' 'value']","['Which' 'documents' 'have' 'more' 'than' '1' 'draft' 'copies' '?' 'List'
 'document' 'id' 'and' 'number' 'of' 'draft' 'copies' '.']","['CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) )', 'CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) )', 'CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) )', 'CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) )', 'CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) )', 'CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) )', 'CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) )', 'CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) )', 'CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) )', 'CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) )', 'CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) )']"
2594,inn_1,"SELECT decor FROM Rooms WHERE roomName  =  ""Recluse and defiance"";",What is the decor of room Recluse and defiance?,"['SELECT' 'decor' 'FROM' 'Rooms' 'WHERE' 'roomName' '=' '``' 'Recluse'
 'and' 'defiance' ""''"" ';']",['select' 'decor' 'from' 'rooms' 'where' 'roomname' '=' 'value'],['What' 'is' 'the' 'decor' 'of' 'room' 'Recluse' 'and' 'defiance' '?'],"['CREATE TABLE ""Rooms"" ( \t""RoomId"" TEXT PRIMARY KEY,\t""roomName"" TEXT, \t""beds"" INTEGER, \t""bedType"" TEXT, \t""maxOccupancy"" INTEGER, \t""basePrice"" INTEGER, \t""decor"" TEXT);', 'CREATE TABLE ""Reservations"" ( \t""Code"" INTEGER PRIMARY KEY, \t""Room"" TEXT, \t""CheckIn"" TEXT, \t""CheckOut"" TEXT, \t""Rate"" REAL, \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Adults"" INTEGER, \t""Kids"" INTEGER,\tFOREIGN KEY (Room) REFERENCES Rooms(RoomId));']"
2266,entrepreneur,SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC,"What are the companies of entrepreneurs, ordered descending by amount of money requested?","['SELECT' 'Company' 'FROM' 'entrepreneur' 'ORDER' 'BY' 'Money_Requested'
 'DESC']","['select' 'company' 'from' 'entrepreneur' 'order' 'by' 'money_requested'
 'desc']","['What' 'are' 'the' 'companies' 'of' 'entrepreneurs' ',' 'ordered'
 'descending' 'by' 'amount' 'of' 'money' 'requested' '?']","['CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") )']"
1280,game_injury,SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel',What is the season of the game which causes the player 'Walter Samuel' to get injured?,"['SELECT' 'T1.season' 'FROM' 'game' 'AS' 'T1' 'JOIN' 'injury_accident'
 'AS' 'T2' 'ON' 'T1.id' '=' 'T2.game_id' 'WHERE' 'T2.player' '=' ""'Walter""
 'Samuel' ""'""]","['select' 't1' '.' 'season' 'from' 'game' 'as' 't1' 'join'
 'injury_accident' 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'game_id'
 'where' 't2' '.' 'player' '=' 'value']","['What' 'is' 'the' 'season' 'of' 'the' 'game' 'which' 'causes' 'the'
 'player' ""'Walter"" 'Samuel' ""'"" 'to' 'get' 'injured' '?']","['CREATE TABLE ""stadium"" ( ""id"" int, ""name"" text, ""Home_Games"" int, ""Average_Attendance"" real, ""Total_Attendance"" real, ""Capacity_Percentage"" real, primary key (""id"") )', 'CREATE TABLE ""game"" ( ""stadium_id"" int, ""id"" int, ""Season"" int, ""Date"" text, ""Home_team"" text, ""Away_team"" text, ""Score"" text, ""Competition"" text, primary key (""id""), foreign key (""stadium_id"") references `stadium`(""id"") )', 'CREATE TABLE ""injury_accident"" ( ""game_id"" int, ""id"" int, ""Player"" text, ""Injury"" text, ""Number_of_matches"" text, ""Source"" text, primary key (""id""), foreign key (""game_id"") references `game`(""id"") )']"
6265,ship_1,"SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",What are the names and flags of ships that do not have a captain with the rank of Midshipman?,"['SELECT' 'name' ',' 'flag' 'FROM' 'ship' 'WHERE' 'ship_id' 'NOT' 'IN' '('
 'SELECT' 'ship_id' 'FROM' 'captain' 'WHERE' 'rank' '=' ""'Midshipman"" ""'""
 ')']","['select' 'name' ',' 'flag' 'from' 'ship' 'where' 'ship_id' 'not' 'in' '('
 'select' 'ship_id' 'from' 'captain' 'where' 'rank' '=' 'value' ')']","['What' 'are' 'the' 'names' 'and' 'flags' 'of' 'ships' 'that' 'do' 'not'
 'have' 'a' 'captain' 'with' 'the' 'rank' 'of' 'Midshipman' '?']","['CREATE TABLE ""captain"" ( ""Captain_ID"" int, ""Name"" text, ""Ship_ID"" int, ""age"" text, ""Class"" text, ""Rank"" text, PRIMARY KEY (""Captain_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES ""Ship""(""Ship_ID"") )', 'CREATE TABLE ""Ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Built_Year"" real, ""Class"" text, ""Flag"" text, PRIMARY KEY (""Ship_ID"") )']"
4681,college_3,SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1,Which building does the instructor who teaches the most number of courses live in?,"['SELECT' 'T2.Building' 'FROM' 'COURSE' 'AS' 'T1' 'JOIN' 'FACULTY' 'AS'
 'T2' 'ON' 'T1.Instructor' '=' 'T2.FacID' 'GROUP' 'BY' 'T1.Instructor'
 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'building' 'from' 'course' 'as' 't1' 'join' 'faculty'
 'as' 't2' 'on' 't1' '.' 'instructor' '=' 't2' '.' 'facid' 'group' 'by'
 't1' '.' 'instructor' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit'
 'value']","['Which' 'building' 'does' 'the' 'instructor' 'who' 'teaches' 'the' 'most'
 'number' 'of' 'courses' 'live' 'in' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )', 'CREATE TABLE Department ( DNO INTEGER PRIMARY KEY, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER )', 'CREATE TABLE Member_of ( FacID INTEGER, DNO INTEGER, Appt_Type VARCHAR(15), FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Course ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER, Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER, FOREIGN KEY(Instructor) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Minor_in ( StuID INTEGER, DNO INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Enrolled_in ( StuID INTEGER, CID VARCHAR(7), Grade VARCHAR(2), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(CID) REFERENCES Course(CID), FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade) )', 'CREATE TABLE Gradeconversion ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT )']"
2283,entrepreneur,"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  ""Simon Woodroffe"" OR T1.Investor  =  ""Peter Jones""","What are the dates of birth of entrepreneurs with investor ""Simon Woodroffe"" or ""Peter Jones""?","['SELECT' 'T2.Date_of_Birth' 'FROM' 'entrepreneur' 'AS' 'T1' 'JOIN'
 'people' 'AS' 'T2' 'ON' 'T1.People_ID' '=' 'T2.People_ID' 'WHERE'
 'T1.Investor' '=' '``' 'Simon' 'Woodroffe' ""''"" 'OR' 'T1.Investor' '='
 '``' 'Peter' 'Jones' ""''""]","['select' 't2' '.' 'date_of_birth' 'from' 'entrepreneur' 'as' 't1' 'join'
 'people' 'as' 't2' 'on' 't1' '.' 'people_id' '=' 't2' '.' 'people_id'
 'where' 't1' '.' 'investor' '=' 'value' 'or' 't1' '.' 'investor' '='
 'value']","['What' 'are' 'the' 'dates' 'of' 'birth' 'of' 'entrepreneurs' 'with'
 'investor' '``' 'Simon' 'Woodroffe' ""''"" 'or' '``' 'Peter' 'Jones' ""''""
 '?']","['CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") )']"
5578,products_gen_characteristics,"SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  ""Herbs""","What is the unit of measuerment of the product category code ""Herbs""?","['SELECT' 'unit_of_measure' 'FROM' 'ref_product_categories' 'WHERE'
 'product_category_code' '=' '``' 'Herbs' ""''""]","['select' 'unit_of_measure' 'from' 'ref_product_categories' 'where'
 'product_category_code' '=' 'value']","['What' 'is' 'the' 'unit' 'of' 'measuerment' 'of' 'the' 'product'
 'category' 'code' '``' 'Herbs' ""''"" '?']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
2254,machine_repair,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank,What are the names of the technicians by ascending order of quality rank for the machine they are assigned?,"['SELECT' 'T3.Name' 'FROM' 'repair_assignment' 'AS' 'T1' 'JOIN' 'machine'
 'AS' 'T2' 'ON' 'T1.machine_id' '=' 'T2.machine_id' 'JOIN' 'technician'
 'AS' 'T3' 'ON' 'T1.technician_ID' '=' 'T3.technician_ID' 'ORDER' 'BY'
 'T2.quality_rank']","['select' 't3' '.' 'name' 'from' 'repair_assignment' 'as' 't1' 'join'
 'machine' 'as' 't2' 'on' 't1' '.' 'machine_id' '=' 't2' '.' 'machine_id'
 'join' 'technician' 'as' 't3' 'on' 't1' '.' 'technician_id' '=' 't3' '.'
 'technician_id' 'order' 'by' 't2' '.' 'quality_rank']","['What' 'are' 'the' 'names' 'of' 'the' 'technicians' 'by' 'ascending'
 'order' 'of' 'quality' 'rank' 'for' 'the' 'machine' 'they' 'are'
 'assigned' '?']","['CREATE TABLE ""repair"" ( ""repair_ID"" int, ""name"" text, ""Launch_Date"" text, ""Notes"" text, PRIMARY KEY (""repair_ID"") )', 'CREATE TABLE ""machine"" ( ""Machine_ID"" int, ""Making_Year"" int, ""Class"" text, ""Team"" text, ""Machine_series"" text, ""value_points"" real, ""quality_rank"" int, PRIMARY KEY (""Machine_ID"") )', 'CREATE TABLE ""technician"" ( ""technician_id"" real, ""Name"" text, ""Team"" text, ""Starting_Year"" real, ""Age"" int, PRIMARY Key (""technician_id"") )', 'CREATE TABLE ""repair_assignment"" ( ""technician_id"" int, ""repair_ID"" int, ""Machine_ID"" int, PRIMARY Key (""technician_id"",""repair_ID"",""Machine_ID""), FOREIGN KEY (`technician_id`) REFERENCES `technician`(`technician_id`), FOREIGN KEY (`repair_ID`) REFERENCES `repair`(`repair_ID`), FOREIGN KEY (`Machine_ID`) REFERENCES `machine`(`Machine_ID`) )']"
1291,game_injury,"SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",How many games has each stadium held?,"['SELECT' 'T1.id' ',' 'count' '(' '*' ')' 'FROM' 'stadium' 'AS' 'T1'
 'JOIN' 'game' 'AS' 'T2' 'ON' 'T1.id' '=' 'T2.stadium_id' 'GROUP' 'BY'
 'T1.id']","['select' 't1' '.' 'id' ',' 'count' '(' '*' ')' 'from' 'stadium' 'as' 't1'
 'join' 'game' 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'stadium_id'
 'group' 'by' 't1' '.' 'id']",['How' 'many' 'games' 'has' 'each' 'stadium' 'held' '?'],"['CREATE TABLE ""stadium"" ( ""id"" int, ""name"" text, ""Home_Games"" int, ""Average_Attendance"" real, ""Total_Attendance"" real, ""Capacity_Percentage"" real, primary key (""id"") )', 'CREATE TABLE ""game"" ( ""stadium_id"" int, ""id"" int, ""Season"" int, ""Date"" text, ""Home_team"" text, ""Away_team"" text, ""Score"" text, ""Competition"" text, primary key (""id""), foreign key (""stadium_id"") references `stadium`(""id"") )', 'CREATE TABLE ""injury_accident"" ( ""game_id"" int, ""id"" int, ""Player"" text, ""Injury"" text, ""Number_of_matches"" text, ""Source"" text, primary key (""id""), foreign key (""game_id"") references `game`(""id"") )']"
4581,company_office,SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2,Show the headquarters shared by more than two companies.,"['SELECT' 'Headquarters' 'FROM' 'Companies' 'GROUP' 'BY' 'Headquarters'
 'HAVING' 'COUNT' '(' '*' ')' '>' '2']","['select' 'headquarters' 'from' 'companies' 'group' 'by' 'headquarters'
 'having' 'count' '(' '*' ')' '>' 'value']","['Show' 'the' 'headquarters' 'shared' 'by' 'more' 'than' 'two' 'companies'
 '.']","['CREATE TABLE ""buildings"" ( ""id"" int, ""name"" text, ""City"" text, ""Height"" int, ""Stories"" int, ""Status"" text, PRIMARY KEY(""id"") )', 'CREATE TABLE ""Companies"" ( ""id"" int, ""name"" text, ""Headquarters"" text, ""Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value_billion"" text, PRIMARY KEY (""id"") )', 'CREATE TABLE ""Office_locations"" ( ""building_id"" int, ""company_id"" int, ""move_in_year"" int, PRIMARY KEY (""building_id"", ""company_id""), FOREIGN KEY (""building_id"") REFERENCES ""buildings""(""id""), FOREIGN KEY (""company_id"") REFERENCES ""Companies""(""id"") )']"
1620,customers_and_invoices,"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",How many distinct order ids correspond to each product?,"['SELECT' 'product_id' ',' 'count' '(' 'DISTINCT' 'order_id' ')' 'FROM'
 'Order_items' 'GROUP' 'BY' 'product_id']","['select' 'product_id' ',' 'count' '(' 'distinct' 'order_id' ')' 'from'
 'order_items' 'group' 'by' 'product_id']","['How' 'many' 'distinct' 'order' 'ids' 'correspond' 'to' 'each' 'product'
 '?']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
96,student_assessment,SELECT course_name FROM courses ORDER BY course_name,What are the names of the courses in alphabetical order?,['SELECT' 'course_name' 'FROM' 'courses' 'ORDER' 'BY' 'course_name'],['select' 'course_name' 'from' 'courses' 'order' 'by' 'course_name'],"['What' 'are' 'the' 'names' 'of' 'the' 'courses' 'in' 'alphabetical'
 'order' '?']","['CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) )', 'CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) )', 'CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) )', 'CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) )', 'CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) )', 'CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) )', 'CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) )', 'CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) )', 'CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) )']"
208,bike_1,"SELECT name FROM station WHERE city  =  ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips,"['SELECT' 'name' 'FROM' 'station' 'WHERE' 'city' '=' '``' 'Palo' 'Alto'
 ""''"" 'EXCEPT' 'SELECT' 'end_station_name' 'FROM' 'trip' 'GROUP' 'BY'
 'end_station_name' 'HAVING' 'count' '(' '*' ')' '>' '100']","['select' 'name' 'from' 'station' 'where' 'city' '=' 'value' 'except'
 'select' 'end_station_name' 'from' 'trip' 'group' 'by' 'end_station_name'
 'having' 'count' '(' '*' ')' '>' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'stations' 'that' 'are' 'located'
 'in' 'Palo' 'Alto' 'but' 'have' 'never' 'been' 'the' 'ending' 'point'
 'of' 'the' 'trips']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
5302,manufactory_1,SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin'),Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.,"['SELECT' 'name' 'FROM' 'manufacturers' 'WHERE' 'revenue' '<' '(' 'SELECT'
 'min' '(' 'revenue' ')' 'FROM' 'manufacturers' 'WHERE' 'headquarter' '='
 ""'Austin"" ""'"" ')']","['select' 'name' 'from' 'manufacturers' 'where' 'revenue' '<' '(' 'select'
 'min' '(' 'revenue' ')' 'from' 'manufacturers' 'where' 'headquarter' '='
 'value' ')']","['Find' 'the' 'name' 'of' 'companies' 'whose' 'revenue' 'is' 'smaller'
 'than' 'the' 'revenue' 'of' 'all' 'companies' 'based' 'in' 'Austin' '.']","['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
337,product_catalog,SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1,Find the dates on which more than one revisions were made.,"['SELECT' 'date_of_latest_revision' 'FROM' 'Catalogs' 'GROUP' 'BY'
 'date_of_latest_revision' 'HAVING' 'count' '(' '*' ')' '>' '1']","['select' 'date_of_latest_revision' 'from' 'catalogs' 'group' 'by'
 'date_of_latest_revision' 'having' 'count' '(' '*' ')' '>' 'value']","['Find' 'the' 'dates' 'on' 'which' 'more' 'than' 'one' 'revisions' 'were'
 'made' '.']","['CREATE TABLE `Attribute_Definitions` ( `attribute_id` INTEGER PRIMARY KEY, `attribute_name` VARCHAR(30), `attribute_data_type` VARCHAR(10) )', 'CREATE TABLE `Catalogs` ( `catalog_id` INTEGER PRIMARY KEY, `catalog_name` VARCHAR(50), `catalog_publisher` VARCHAR(80), `date_of_publication` DATETIME, `date_of_latest_revision` DATETIME )', 'CREATE TABLE `Catalog_Structure` ( `catalog_level_number` INTEGER PRIMARY KEY, `catalog_id` INTEGER NOT NULL, `catalog_level_name` VARCHAR(50), FOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` ) )', 'CREATE TABLE `Catalog_Contents` ( `catalog_entry_id` INTEGER PRIMARY KEY, `catalog_level_number` INTEGER NOT NULL, `parent_entry_id` INTEGER, `previous_entry_id` INTEGER, `next_entry_id` INTEGER, `catalog_entry_name` VARCHAR(80), `product_stock_number` VARCHAR(50), `price_in_dollars` DOUBLE NULL, `price_in_euros` DOUBLE NULL, `price_in_pounds` DOUBLE NULL, `capacity` VARCHAR(20), `length` VARCHAR(20), `height` VARCHAR(20), `width` VARCHAR(20), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) )', 'CREATE TABLE `Catalog_Contents_Additional_Attributes` ( `catalog_entry_id` INTEGER NOT NULL, `catalog_level_number` INTEGER NOT NULL, `attribute_id` INTEGER NOT NULL, `attribute_value` VARCHAR(255) NOT NULL, FOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) )']"
6075,customers_and_addresses,"SELECT product_details FROM products WHERE product_details LIKE ""%Latte%"" OR product_details LIKE ""%Americano%""","Find the detail of products whose detail contains the word ""Latte"" or the word ""Americano""","['SELECT' 'product_details' 'FROM' 'products' 'WHERE' 'product_details'
 'LIKE' '``' '%' 'Latte' '%' ""''"" 'OR' 'product_details' 'LIKE' '``' '%'
 'Americano' '%' ""''""]","['select' 'product_details' 'from' 'products' 'where' 'product_details'
 'like' 'value' 'or' 'product_details' 'like' 'value']","['Find' 'the' 'detail' 'of' 'products' 'whose' 'detail' 'contains' 'the'
 'word' '``' 'Latte' ""''"" 'or' 'the' 'word' '``' 'Americano' ""''""]","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
3855,insurance_policies,"SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC","What are the method, date and amount of each payment? Sort the list in ascending order of date.","['SELECT' 'Payment_Method_Code' ',' 'Date_Payment_Made' ','
 'Amount_Payment' 'FROM' 'Payments' 'ORDER' 'BY' 'Date_Payment_Made' 'ASC']","['select' 'payment_method_code' ',' 'date_payment_made' ','
 'amount_payment' 'from' 'payments' 'order' 'by' 'date_payment_made' 'asc']","['What' 'are' 'the' 'method' ',' 'date' 'and' 'amount' 'of' 'each'
 'payment' '?' 'Sort' 'the' 'list' 'in' 'ascending' 'order' 'of' 'date'
 '.']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )', 'CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) )']"
5799,customer_complaints,"SELECT last_name FROM staff WHERE email_address LIKE ""%wrau%""","What are the last names of staff with email addressed containing the substring ""wrau""?","['SELECT' 'last_name' 'FROM' 'staff' 'WHERE' 'email_address' 'LIKE' '``'
 '%' 'wrau' '%' ""''""]","['select' 'last_name' 'from' 'staff' 'where' 'email_address' 'like'
 'value']","['What' 'are' 'the' 'last' 'names' 'of' 'staff' 'with' 'email' 'addressed'
 'containing' 'the' 'substring' '``' 'wrau' ""''"" '?']","['CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
2871,icfp_1,"SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""","Which institution is the author ""Matthias Blume"" belong to? Give me the name of the institution.","['SELECT' 'DISTINCT' 't3.name' 'FROM' 'authors' 'AS' 't1' 'JOIN'
 'authorship' 'AS' 't2' 'ON' 't1.authid' '=' 't2.authid' 'JOIN' 'inst'
 'AS' 't3' 'ON' 't2.instid' '=' 't3.instid' 'WHERE' 't1.fname' '=' '``'
 'Matthias' ""''"" 'AND' 't1.lname' '=' '``' 'Blume' ""''""]","['select' 'distinct' 't3' '.' 'name' 'from' 'authors' 'as' 't1' 'join'
 'authorship' 'as' 't2' 'on' 't1' '.' 'authid' '=' 't2' '.' 'authid'
 'join' 'inst' 'as' 't3' 'on' 't2' '.' 'instid' '=' 't3' '.' 'instid'
 'where' 't1' '.' 'fname' '=' 'value' 'and' 't1' '.' 'lname' '=' 'value']","['Which' 'institution' 'is' 'the' 'author' '``' 'Matthias' 'Blume' ""''""
 'belong' 'to' '?' 'Give' 'me' 'the' 'name' 'of' 'the' 'institution' '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
1005,university_basketball,SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public',Find the schools that were either founded after 1850 or public.,"['SELECT' 'school' 'FROM' 'university' 'WHERE' 'founded' '>' '1850' 'OR'
 'affiliation' '=' ""'Public"" ""'""]","['select' 'school' 'from' 'university' 'where' 'founded' '>' 'value' 'or'
 'affiliation' '=' 'value']","['Find' 'the' 'schools' 'that' 'were' 'either' 'founded' 'after' '1850'
 'or' 'public' '.']","['CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) )', 'CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") )']"
5475,voter_2,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE,What are the distinct first names of the students who have class president votes?,"['SELECT' 'DISTINCT' 'T1.Fname' 'FROM' 'STUDENT' 'AS' 'T1' 'JOIN'
 'VOTING_RECORD' 'AS' 'T2' 'ON' 'T1.StuID' '=' 'T2.CLASS_Senator_VOTE']","['select' 'distinct' 't1' '.' 'fname' 'from' 'student' 'as' 't1' 'join'
 'voting_record' 'as' 't2' 'on' 't1' '.' 'stuid' '=' 't2' '.'
 'class_senator_vote']","['What' 'are' 'the' 'distinct' 'first' 'names' 'of' 'the' 'students' 'who'
 'have' 'class' 'president' 'votes' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
1309,performance_attendance,"SELECT Date ,  LOCATION FROM performance",What are the dates and locations of performances?,"['SELECT' 'Date' ',' 'LOCATION' 'FROM' 'performance']","['select' 'date' ',' 'location' 'from' 'performance']",['What' 'are' 'the' 'dates' 'and' 'locations' 'of' 'performances' '?'],"['CREATE TABLE ""member"" ( ""Member_ID"" text, ""Name"" text, ""Nationality"" text, ""Role"" text, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""performance"" ( ""Performance_ID"" real, ""Date"" text, ""Host"" text, ""Location"" text, ""Attendance"" int, PRIMARY KEY (""Performance_ID"") )', 'CREATE TABLE ""member_attendance"" ( ""Member_ID"" int, ""Performance_ID"" int, ""Num_of_Pieces"" int, PRIMARY KEY (""Member_ID"",""Performance_ID""), FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID""), FOREIGN KEY (""Performance_ID"") REFERENCES `performance`(""Performance_ID"") )']"
6168,music_4,"SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  ""Nominated""",What are the songs in volumes that have resulted in a nomination at music festivals?,"['SELECT' 'T2.Song' 'FROM' 'music_festival' 'AS' 'T1' 'JOIN' 'volume' 'AS'
 'T2' 'ON' 'T1.Volume' '=' 'T2.Volume_ID' 'WHERE' 'T1.Result' '=' '``'
 'Nominated' ""''""]","['select' 't2' '.' 'song' 'from' 'music_festival' 'as' 't1' 'join'
 'volume' 'as' 't2' 'on' 't1' '.' 'volume' '=' 't2' '.' 'volume_id'
 'where' 't1' '.' 'result' '=' 'value']","['What' 'are' 'the' 'songs' 'in' 'volumes' 'that' 'have' 'resulted' 'in'
 'a' 'nomination' 'at' 'music' 'festivals' '?']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Artist"" text, ""Age"" int, ""Famous_Title"" text, ""Famous_Release_date"" text, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""volume"" ( ""Volume_ID"" int, ""Volume_Issue"" text, ""Issue_Date"" text, ""Weeks_on_Top"" real, ""Song"" text, ""Artist_ID"" int, PRIMARY KEY (""Volume_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""music_festival"" ( ""ID"" int, ""Music_Festival"" text, ""Date_of_ceremony"" text, ""Category"" text, ""Volume"" int, ""Result"" text, PRIMARY KEY (`ID`), FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`) )']"
6073,customers_and_addresses,"SELECT customer_name FROM customers WHERE customer_name LIKE ""%Alex%""","Find the name of all customers whose name contains ""Alex"".","['SELECT' 'customer_name' 'FROM' 'customers' 'WHERE' 'customer_name'
 'LIKE' '``' '%' 'Alex' '%' ""''""]","['select' 'customer_name' 'from' 'customers' 'where' 'customer_name'
 'like' 'value']","['Find' 'the' 'name' 'of' 'all' 'customers' 'whose' 'name' 'contains' '``'
 'Alex' ""''"" '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
4083,student_1,"SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom","For each classroom, show the classroom number and count the number of distinct grades that use the room.","['SELECT' 'classroom' ',' 'count' '(' 'DISTINCT' 'grade' ')' 'FROM' 'list'
 'GROUP' 'BY' 'classroom']","['select' 'classroom' ',' 'count' '(' 'distinct' 'grade' ')' 'from' 'list'
 'group' 'by' 'classroom']","['For' 'each' 'classroom' ',' 'show' 'the' 'classroom' 'number' 'and'
 'count' 'the' 'number' 'of' 'distinct' 'grades' 'that' 'use' 'the' 'room'
 '.']","['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
6718,activity_1,SELECT DISTINCT rank FROM Faculty,Find the list of distinct ranks for faculty.,['SELECT' 'DISTINCT' 'rank' 'FROM' 'Faculty'],['select' 'distinct' 'rank' 'from' 'faculty'],['Find' 'the' 'list' 'of' 'distinct' 'ranks' 'for' 'faculty' '.'],"['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
6346,e_government,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id,Find the last name of the individuals that have been contact individuals of an organization.,"['SELECT' 'DISTINCT' 't1.individual_last_name' 'FROM' 'individuals' 'AS'
 't1' 'JOIN' 'organization_contact_individuals' 'AS' 't2' 'ON'
 't1.individual_id' '=' 't2.individual_id']","['select' 'distinct' 't1' '.' 'individual_last_name' 'from' 'individuals'
 'as' 't1' 'join' 'organization_contact_individuals' 'as' 't2' 'on' 't1'
 '.' 'individual_id' '=' 't2' '.' 'individual_id']","['Find' 'the' 'last' 'name' 'of' 'the' 'individuals' 'that' 'have' 'been'
 'contact' 'individuals' 'of' 'an' 'organization' '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) )', 'CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) )', 'CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) )', 'CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) )', 'CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) )', 'CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) )', 'CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) )', 'CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) )', 'CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) )']"
5129,cre_Drama_Workshop_Groups,"SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code","List the description, code and the number of services for each service type.","['SELECT' 'T1.Service_Type_Description' ',' 'T2.Service_Type_Code' ','
 'COUNT' '(' '*' ')' 'FROM' 'Ref_Service_Types' 'AS' 'T1' 'JOIN'
 'Services' 'AS' 'T2' 'ON' 'T1.Service_Type_Code' '='
 'T2.Service_Type_Code' 'GROUP' 'BY' 'T2.Service_Type_Code']","['select' 't1' '.' 'service_type_description' ',' 't2' '.'
 'service_type_code' ',' 'count' '(' '*' ')' 'from' 'ref_service_types'
 'as' 't1' 'join' 'services' 'as' 't2' 'on' 't1' '.' 'service_type_code'
 '=' 't2' '.' 'service_type_code' 'group' 'by' 't2' '.'
 'service_type_code']","['List' 'the' 'description' ',' 'code' 'and' 'the' 'number' 'of'
 'services' 'for' 'each' 'service' 'type' '.']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
3939,hospital_1,SELECT count(DISTINCT roomtype) FROM room,Find the number of distinct room types available.,['SELECT' 'count' '(' 'DISTINCT' 'roomtype' ')' 'FROM' 'room'],['select' 'count' '(' 'distinct' 'roomtype' ')' 'from' 'room'],['Find' 'the' 'number' 'of' 'distinct' 'room' 'types' 'available' '.'],"['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
6763,activity_1,SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student,Show ids for the faculty members who don't advise any student.,"['SELECT' 'FacID' 'FROM' 'Faculty' 'EXCEPT' 'SELECT' 'advisor' 'FROM'
 'Student']","['select' 'facid' 'from' 'faculty' 'except' 'select' 'advisor' 'from'
 'student']","['Show' 'ids' 'for' 'the' 'faculty' 'members' 'who' 'do' ""n't"" 'advise'
 'any' 'student' '.']","['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
719,customers_card_transactions,"SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",Show all card type codes and the number of cards in each type.,"['SELECT' 'card_type_code' ',' 'count' '(' '*' ')' 'FROM'
 'Customers_cards' 'GROUP' 'BY' 'card_type_code']","['select' 'card_type_code' ',' 'count' '(' '*' ')' 'from'
 'customers_cards' 'group' 'by' 'card_type_code']","['Show' 'all' 'card' 'type' 'codes' 'and' 'the' 'number' 'of' 'cards' 'in'
 'each' 'type' '.']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
1257,apartment_rentals,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3,What are the top three apartment types in terms of the average room count? Give me the,"['SELECT' 'apt_type_code' 'FROM' 'Apartments' 'GROUP' 'BY' 'apt_type_code'
 'ORDER' 'BY' 'avg' '(' 'room_count' ')' 'DESC' 'LIMIT' '3']","['select' 'apt_type_code' 'from' 'apartments' 'group' 'by' 'apt_type_code'
 'order' 'by' 'avg' '(' 'room_count' ')' 'desc' 'limit' 'value']","['What' 'are' 'the' 'top' 'three' 'apartment' 'types' 'in' 'terms' 'of'
 'the' 'average' 'room' 'count' '?' 'Give' 'me' 'the']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
724,customers_card_transactions,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5,What are the codes of card types that have 5 or more cards?,"['SELECT' 'card_type_code' 'FROM' 'Customers_cards' 'GROUP' 'BY'
 'card_type_code' 'HAVING' 'count' '(' '*' ')' '>' '=' '5']","['select' 'card_type_code' 'from' 'customers_cards' 'group' 'by'
 'card_type_code' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['What' 'are' 'the' 'codes' 'of' 'card' 'types' 'that' 'have' '5' 'or'
 'more' 'cards' '?']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
6552,wine_1,"SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  ""Monterey"" AND T2.price  <  50",Give the neames of wines with prices below 50 and with appelations in Monterey county.,"['SELECT' 'T2.Name' 'FROM' 'APPELLATIONS' 'AS' 'T1' 'JOIN' 'WINE' 'AS'
 'T2' 'ON' 'T1.Appelation' '=' 'T2.Appelation' 'WHERE' 'T1.County' '='
 '``' 'Monterey' ""''"" 'AND' 'T2.price' '<' '50']","['select' 't2' '.' 'name' 'from' 'appellations' 'as' 't1' 'join' 'wine'
 'as' 't2' 'on' 't1' '.' 'appelation' '=' 't2' '.' 'appelation' 'where'
 't1' '.' 'county' '=' 'value' 'and' 't2' '.' 'price' '<' 'value']","['Give' 'the' 'neames' 'of' 'wines' 'with' 'prices' 'below' '50' 'and'
 'with' 'appelations' 'in' 'Monterey' 'county' '.']","['CREATE TABLE ""grapes"" ( \t""ID"" INTEGER PRIMARY KEY, \t""Grape"" TEXT UNIQUE, \t""Color"" TEXT );', 'CREATE TABLE ""appellations"" ( \t""No"" INTEGER PRIMARY KEY, \t""Appelation"" TEXT UNIQUE, \t""County"" TEXT, \t""State"" TEXT, \t""Area"" TEXT, \t""isAVA"" TEXT);', 'CREATE TABLE ""wine"" ( \t""No"" INTEGER, \t""Grape"" TEXT, \t""Winery"" TEXT, \t""Appelation"" TEXT, \t""State"" TEXT, \t""Name"" TEXT, \t""Year"" INTEGER, \t""Price"" INTEGER, \t""Score"" INTEGER, \t""Cases"" INTEGER, \t""Drink"" TEXT,\tFOREIGN KEY (Grape) REFERENCES grapes(Grape),\tFOREIGN KEY (Appelation) REFERENCES appellations(Appelation));']"
150,bike_1,"SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  ""Palo Alto"")",What is the average bike availablility for stations not in Palo Alto?,"['SELECT' 'avg' '(' 'bikes_available' ')' 'FROM' 'status' 'WHERE'
 'station_id' 'NOT' 'IN' '(' 'SELECT' 'id' 'FROM' 'station' 'WHERE' 'city'
 '=' '``' 'Palo' 'Alto' ""''"" ')']","['select' 'avg' '(' 'bikes_available' ')' 'from' 'status' 'where'
 'station_id' 'not' 'in' '(' 'select' 'id' 'from' 'station' 'where' 'city'
 '=' 'value' ')']","['What' 'is' 'the' 'average' 'bike' 'availablility' 'for' 'stations' 'not'
 'in' 'Palo' 'Alto' '?']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
4658,college_3,"SELECT DName FROM DEPARTMENT WHERE Building  =  ""Mergenthaler""",What is the name of the department in the Building Mergenthaler?,"['SELECT' 'DName' 'FROM' 'DEPARTMENT' 'WHERE' 'Building' '=' '``'
 'Mergenthaler' ""''""]",['select' 'dname' 'from' 'department' 'where' 'building' '=' 'value'],"['What' 'is' 'the' 'name' 'of' 'the' 'department' 'in' 'the' 'Building'
 'Mergenthaler' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )', 'CREATE TABLE Department ( DNO INTEGER PRIMARY KEY, Division VARCHAR(2), DName VARCHAR(25), Room VARCHAR(5), Building VARCHAR(13), DPhone INTEGER )', 'CREATE TABLE Member_of ( FacID INTEGER, DNO INTEGER, Appt_Type VARCHAR(15), FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Course ( CID VARCHAR(7) PRIMARY KEY, CName VARCHAR(40), Credits INTEGER, Instructor INTEGER, Days VARCHAR(5), Hours VARCHAR(11), DNO INTEGER, FOREIGN KEY(Instructor) REFERENCES Faculty(FacID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Minor_in ( StuID INTEGER, DNO INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(DNO) REFERENCES Department(DNO) )', 'CREATE TABLE Enrolled_in ( StuID INTEGER, CID VARCHAR(7), Grade VARCHAR(2), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(CID) REFERENCES Course(CID), FOREIGN KEY(Grade) REFERENCES Gradeconversion(lettergrade) )', 'CREATE TABLE Gradeconversion ( lettergrade VARCHAR(2) PRIMARY KEY, gradepoint FLOAT )']"
1403,college_2,"SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",How many courses are provided in each semester and year?,"['SELECT' 'count' '(' '*' ')' ',' 'semester' ',' 'YEAR' 'FROM' 'SECTION'
 'GROUP' 'BY' 'semester' ',' 'YEAR']","['select' 'count' '(' '*' ')' ',' 'semester' ',' 'year' 'from' 'section'
 'group' 'by' 'semester' ',' 'year']","['How' 'many' 'courses' 'are' 'provided' 'in' 'each' 'semester' 'and'
 'year' '?']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
4300,club_1,"SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.age  >  18","How many members of ""Bootup Baltimore"" are older than 18?","['SELECT' 'count' '(' '*' ')' 'FROM' 'club' 'AS' 't1' 'JOIN'
 'member_of_club' 'AS' 't2' 'ON' 't1.clubid' '=' 't2.clubid' 'JOIN'
 'student' 'AS' 't3' 'ON' 't2.stuid' '=' 't3.stuid' 'WHERE' 't1.clubname'
 '=' '``' 'Bootup' 'Baltimore' ""''"" 'AND' 't3.age' '>' '18']","['select' 'count' '(' '*' ')' 'from' 'club' 'as' 't1' 'join'
 'member_of_club' 'as' 't2' 'on' 't1' '.' 'clubid' '=' 't2' '.' 'clubid'
 'join' 'student' 'as' 't3' 'on' 't2' '.' 'stuid' '=' 't3' '.' 'stuid'
 'where' 't1' '.' 'clubname' '=' 'value' 'and' 't3' '.' 'age' '>' 'value']","['How' 'many' 'members' 'of' '``' 'Bootup' 'Baltimore' ""''"" 'are' 'older'
 'than' '18' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Club ( ClubID INTEGER PRIMARY KEY, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) )', 'CREATE TABLE Member_of_club ( StuID INTEGER, ClubID INTEGER, Position VARCHAR(40), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ClubID) REFERENCES Club(ClubID) )']"
930,insurance_fnol,"SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",What is the ordered list of customer ids?,"['SELECT' 'customer_id' ',' 'customer_name' 'FROM' 'customers' 'ORDER'
 'BY' 'customer_id' 'ASC']","['select' 'customer_id' ',' 'customer_name' 'from' 'customers' 'order'
 'by' 'customer_id' 'asc']",['What' 'is' 'the' 'ordered' 'list' 'of' 'customer' 'ids' '?'],"['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) )', 'CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) )', 'CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) )', 'CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )']"
5545,products_gen_characteristics,"SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  ""catnip""",Give the color description for the product 'catnip'.,"['SELECT' 't2.color_description' 'FROM' 'products' 'AS' 't1' 'JOIN'
 'ref_colors' 'AS' 't2' 'ON' 't1.color_code' '=' 't2.color_code' 'WHERE'
 't1.product_name' '=' '``' 'catnip' ""''""]","['select' 't2' '.' 'color_description' 'from' 'products' 'as' 't1' 'join'
 'ref_colors' 'as' 't2' 'on' 't1' '.' 'color_code' '=' 't2' '.'
 'color_code' 'where' 't1' '.' 'product_name' '=' 'value']","['Give' 'the' 'color' 'description' 'for' 'the' 'product' ""'catnip"" ""'""
 '.']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
3248,college_1,SELECT count(*) FROM employee,How many employees are there all together?,['SELECT' 'count' '(' '*' ')' 'FROM' 'employee'],['select' 'count' '(' '*' ')' 'from' 'employee'],['How' 'many' 'employees' 'are' 'there' 'all' 'together' '?'],"['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
5898,cre_Theme_park,"SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  ""5"" AND pets_allowed_yn  =  1",What is the average price range of five star hotels that allow pets?,"['SELECT' 'avg' '(' 'price_range' ')' 'FROM' 'HOTELS' 'WHERE'
 'star_rating_code' '=' '``' '5' ""''"" 'AND' 'pets_allowed_yn' '=' '1']","['select' 'avg' '(' 'price_range' ')' 'from' 'hotels' 'where'
 'star_rating_code' '=' 'value' 'and' 'pets_allowed_yn' '=' 'value']","['What' 'is' 'the' 'average' 'price' 'range' 'of' 'five' 'star' 'hotels'
 'that' 'allow' 'pets' '?']","['CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) )', 'CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) )', 'CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) )', 'CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) )', 'CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) )', 'CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) )', 'CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) )']"
1158,body_builder,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,What is the name of the body builder with the greatest body weight?,"['SELECT' 'T2.Name' 'FROM' 'body_builder' 'AS' 'T1' 'JOIN' 'people' 'AS'
 'T2' 'ON' 'T1.People_ID' '=' 'T2.People_ID' 'ORDER' 'BY' 'T2.Weight'
 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'name' 'from' 'body_builder' 'as' 't1' 'join' 'people'
 'as' 't2' 'on' 't1' '.' 'people_id' '=' 't2' '.' 'people_id' 'order' 'by'
 't2' '.' 'weight' 'desc' 'limit' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'body' 'builder' 'with' 'the'
 'greatest' 'body' 'weight' '?']","['CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") )']"
3451,hr_1,"SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",Find the ids of the departments where any manager is managing 4 or more employees.,"['SELECT' 'DISTINCT' 'department_id' 'FROM' 'employees' 'GROUP' 'BY'
 'department_id' ',' 'manager_id' 'HAVING' 'COUNT' '(' 'employee_id' ')'
 '>' '=' '4']","['select' 'distinct' 'department_id' 'from' 'employees' 'group' 'by'
 'department_id' ',' 'manager_id' 'having' 'count' '(' 'employee_id' ')'
 '>' '=' 'value']","['Find' 'the' 'ids' 'of' 'the' 'departments' 'where' 'any' 'manager' 'is'
 'managing' '4' 'or' 'more' 'employees' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
4389,tracking_grants_for_research,SELECT count(*) FROM Tasks,How many tasks are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'Tasks'],['select' 'count' '(' '*' ')' 'from' 'tasks'],['How' 'many' 'tasks' 'are' 'there' '?'],"['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
3708,baseball_1,SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;,Find all the cities that have 2 to 4 parks.,"['SELECT' 'city' 'FROM' 'park' 'GROUP' 'BY' 'city' 'HAVING' 'count' '('
 '*' ')' 'BETWEEN' '2' 'AND' '4' ';']","['select' 'city' 'from' 'park' 'group' 'by' 'city' 'having' 'count' '('
 '*' ')' 'between' 'value' 'and' 'value']",['Find' 'all' 'the' 'cities' 'that' 'have' '2' 'to' '4' 'parks' '.'],"['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
5205,music_2,"SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  ""Heilo"" AND T3.title  =  ""Le Pop""","What instruments did the musician with the last name ""Heilo"" play in the song ""Le Pop""?","['SELECT' 'T4.instrument' 'FROM' 'Performance' 'AS' 'T1' 'JOIN' 'Band'
 'AS' 'T2' 'ON' 'T1.bandmate' '=' 'T2.id' 'JOIN' 'Songs' 'AS' 'T3' 'ON'
 'T3.SongId' '=' 'T1.SongId' 'JOIN' 'Instruments' 'AS' 'T4' 'ON'
 'T4.songid' '=' 'T3.songid' 'AND' 'T4.bandmateid' '=' 'T2.id' 'WHERE'
 'T2.lastname' '=' '``' 'Heilo' ""''"" 'AND' 'T3.title' '=' '``' 'Le' 'Pop'
 ""''""]","['select' 't4' '.' 'instrument' 'from' 'performance' 'as' 't1' 'join'
 'band' 'as' 't2' 'on' 't1' '.' 'bandmate' '=' 't2' '.' 'id' 'join'
 'songs' 'as' 't3' 'on' 't3' '.' 'songid' '=' 't1' '.' 'songid' 'join'
 'instruments' 'as' 't4' 'on' 't4' '.' 'songid' '=' 't3' '.' 'songid'
 'and' 't4' '.' 'bandmateid' '=' 't2' '.' 'id' 'where' 't2' '.' 'lastname'
 '=' 'value' 'and' 't3' '.' 'title' '=' 'value']","['What' 'instruments' 'did' 'the' 'musician' 'with' 'the' 'last' 'name'
 '``' 'Heilo' ""''"" 'play' 'in' 'the' 'song' '``' 'Le' 'Pop' ""''"" '?']","['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
3442,hr_1,SELECT job_title FROM jobs WHERE min_salary  >  9000,Which job titles correspond to jobs with salaries over 9000?,['SELECT' 'job_title' 'FROM' 'jobs' 'WHERE' 'min_salary' '>' '9000'],['select' 'job_title' 'from' 'jobs' 'where' 'min_salary' '>' 'value'],"['Which' 'job' 'titles' 'correspond' 'to' 'jobs' 'with' 'salaries' 'over'
 '9000' '?']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
2584,inn_1,"SELECT Adults FROM Reservations WHERE CheckIn  =  ""2010-10-23"" AND FirstName  =  ""CONRAD"" AND LastName  =  ""SELBIG"";","How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?","['SELECT' 'Adults' 'FROM' 'Reservations' 'WHERE' 'CheckIn' '=' '``'
 '2010-10-23' ""''"" 'AND' 'FirstName' '=' '``' 'CONRAD' ""''"" 'AND'
 'LastName' '=' '``' 'SELBIG' ""''"" ';']","['select' 'adults' 'from' 'reservations' 'where' 'checkin' '=' 'value'
 'and' 'firstname' '=' 'value' 'and' 'lastname' '=' 'value']","['How' 'many' 'adults' 'stay' 'in' 'the' 'room' 'CONRAD' 'SELBIG'
 'checked' 'in' 'on' 'Oct' '23' ',' '2010' '?']","['CREATE TABLE ""Rooms"" ( \t""RoomId"" TEXT PRIMARY KEY,\t""roomName"" TEXT, \t""beds"" INTEGER, \t""bedType"" TEXT, \t""maxOccupancy"" INTEGER, \t""basePrice"" INTEGER, \t""decor"" TEXT);', 'CREATE TABLE ""Reservations"" ( \t""Code"" INTEGER PRIMARY KEY, \t""Room"" TEXT, \t""CheckIn"" TEXT, \t""CheckOut"" TEXT, \t""Rate"" REAL, \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Adults"" INTEGER, \t""Kids"" INTEGER,\tFOREIGN KEY (Room) REFERENCES Rooms(RoomId));']"
6314,e_government,"SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  ""enrico09@example.com""","Find the payment method and phone of the party with email ""enrico09@example.com"".","['SELECT' 'payment_method_code' ',' 'party_phone' 'FROM' 'parties' 'WHERE'
 'party_email' '=' '``' 'enrico09' '@' 'example.com' ""''""]","['select' 'payment_method_code' ',' 'party_phone' 'from' 'parties' 'where'
 'party_email' '=' 'value']","['Find' 'the' 'payment' 'method' 'and' 'phone' 'of' 'the' 'party' 'with'
 'email' '``' 'enrico09' '@' 'example.com' ""''"" '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) )', 'CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) )', 'CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) )', 'CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) )', 'CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) )', 'CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) )', 'CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) )', 'CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) )', 'CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) )']"
5915,cre_Theme_park,"SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID",What are the details and opening hours of the museums?,"['SELECT' 'T1.Museum_Details' ',' 'T2.Opening_Hours' 'FROM' 'MUSEUMS' 'AS'
 'T1' 'JOIN' 'TOURIST_ATTRACTIONS' 'AS' 'T2' 'ON' 'T1.Museum_ID' '='
 'T2.Tourist_Attraction_ID']","['select' 't1' '.' 'museum_details' ',' 't2' '.' 'opening_hours' 'from'
 'museums' 'as' 't1' 'join' 'tourist_attractions' 'as' 't2' 'on' 't1' '.'
 'museum_id' '=' 't2' '.' 'tourist_attraction_id']","['What' 'are' 'the' 'details' 'and' 'opening' 'hours' 'of' 'the' 'museums'
 '?']","['CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) )', 'CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) )', 'CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) )', 'CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) )', 'CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) )', 'CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) )', 'CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) )']"
2053,party_people,SELECT minister FROM party ORDER BY left_office DESC LIMIT 1,Return the minister who left office at the latest time.,"['SELECT' 'minister' 'FROM' 'party' 'ORDER' 'BY' 'left_office' 'DESC'
 'LIMIT' '1']","['select' 'minister' 'from' 'party' 'order' 'by' 'left_office' 'desc'
 'limit' 'value']","['Return' 'the' 'minister' 'who' 'left' 'office' 'at' 'the' 'latest'
 'time' '.']","['CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) )', 'CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) )']"
6411,cre_Docs_and_Epenses,"SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",Show project ids and the number of documents in each project.,"['SELECT' 'project_id' ',' 'count' '(' '*' ')' 'FROM' 'Documents' 'GROUP'
 'BY' 'project_id']","['select' 'project_id' ',' 'count' '(' '*' ')' 'from' 'documents' 'group'
 'by' 'project_id']","['Show' 'project' 'ids' 'and' 'the' 'number' 'of' 'documents' 'in' 'each'
 'project' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
4760,department_store,"SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE ""2016%""",What are the names and genders of staff who were assigned in 2016?,"['SELECT' 'T1.staff_name' ',' 'T1.staff_gender' 'FROM' 'staff' 'AS' 'T1'
 'JOIN' 'staff_department_assignments' 'AS' 'T2' 'ON' 'T1.staff_id' '='
 'T2.staff_id' 'WHERE' 'T2.date_assigned_from' 'LIKE' '``' '2016' '%' ""''""]","['select' 't1' '.' 'staff_name' ',' 't1' '.' 'staff_gender' 'from' 'staff'
 'as' 't1' 'join' 'staff_department_assignments' 'as' 't2' 'on' 't1' '.'
 'staff_id' '=' 't2' '.' 'staff_id' 'where' 't2' '.' 'date_assigned_from'
 'like' 'value']","['What' 'are' 'the' 'names' 'and' 'genders' 'of' 'staff' 'who' 'were'
 'assigned' 'in' '2016' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) )', 'CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) )', 'CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) )', 'CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
633,store_1,"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"" OR T1.name = ""Jazz""",List the name of tracks belongs to genre Rock or genre Jazz.,"['SELECT' 'T2.name' 'FROM' 'genres' 'AS' 'T1' 'JOIN' 'tracks' 'AS' 'T2'
 'ON' 'T1.id' '=' 'T2.genre_id' 'WHERE' 'T1.name' '=' '``' 'Rock' ""''""
 'OR' 'T1.name' '=' '``' 'Jazz' ""''""]","['select' 't2' '.' 'name' 'from' 'genres' 'as' 't1' 'join' 'tracks' 'as'
 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'genre_id' 'where' 't1' '.' 'name'
 '=' 'value' 'or' 't1' '.' 'name' '=' 'value']","['List' 'the' 'name' 'of' 'tracks' 'belongs' 'to' 'genre' 'Rock' 'or'
 'genre' 'Jazz' '.']","['CREATE TABLE artists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE sqlite_sequence(name,seq)', 'CREATE TABLE albums ( id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(160) NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE employees ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(20) NOT NULL, first_name VARCHAR(20) NOT NULL, title VARCHAR(30), reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), FOREIGN KEY (reports_to) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE customers ( id INTEGER PRIMARY KEY AUTOINCREMENT, first_name VARCHAR(40) NOT NULL, last_name VARCHAR(20) NOT NULL, company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE genres ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE invoices ( id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE media_types ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE tracks ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(200) NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR(220), milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE invoice_lines ( id INTEGER PRIMARY KEY AUTOINCREMENT, invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE playlists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE playlist_tracks ( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
6323,e_government,"SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  ""Labour Party"" ORDER BY t2.date_contact_to DESC LIMIT 1",What is the last name of the contact individual from the Labour party organization who was contacted most recently?,"['SELECT' 't3.individual_last_name' 'FROM' 'organizations' 'AS' 't1'
 'JOIN' 'organization_contact_individuals' 'AS' 't2' 'ON'
 't1.organization_id' '=' 't2.organization_id' 'JOIN' 'individuals' 'AS'
 't3' 'ON' 't2.individual_id' '=' 't3.individual_id' 'WHERE'
 't1.organization_name' '=' '``' 'Labour' 'Party' ""''"" 'ORDER' 'BY'
 't2.date_contact_to' 'DESC' 'LIMIT' '1']","['select' 't3' '.' 'individual_last_name' 'from' 'organizations' 'as' 't1'
 'join' 'organization_contact_individuals' 'as' 't2' 'on' 't1' '.'
 'organization_id' '=' 't2' '.' 'organization_id' 'join' 'individuals'
 'as' 't3' 'on' 't2' '.' 'individual_id' '=' 't3' '.' 'individual_id'
 'where' 't1' '.' 'organization_name' '=' 'value' 'order' 'by' 't2' '.'
 'date_contact_to' 'desc' 'limit' 'value']","['What' 'is' 'the' 'last' 'name' 'of' 'the' 'contact' 'individual' 'from'
 'the' 'Labour' 'party' 'organization' 'who' 'was' 'contacted' 'most'
 'recently' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) )', 'CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) )', 'CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) )', 'CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) )', 'CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) )', 'CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) )', 'CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) )', 'CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) )', 'CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) )']"
3635,baseball_1,"SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;","What are the first name, last name and id of the player with the most all star game experiences? Also list the count.","['SELECT' 'T1.name_first' ',' 'T1.name_last' ',' 'T1.player_id' ','
 'count' '(' '*' ')' 'FROM' 'player' 'AS' 'T1' 'JOIN' 'all_star' 'AS' 'T2'
 'ON' 'T1.player_id' '=' 'T2.player_id' 'GROUP' 'BY' 'T1.player_id'
 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1' ';']","['select' 't1' '.' 'name_first' ',' 't1' '.' 'name_last' ',' 't1' '.'
 'player_id' ',' 'count' '(' '*' ')' 'from' 'player' 'as' 't1' 'join'
 'all_star' 'as' 't2' 'on' 't1' '.' 'player_id' '=' 't2' '.' 'player_id'
 'group' 'by' 't1' '.' 'player_id' 'order' 'by' 'count' '(' '*' ')' 'desc'
 'limit' 'value']","['What' 'are' 'the' 'first' 'name' ',' 'last' 'name' 'and' 'id' 'of' 'the'
 'player' 'with' 'the' 'most' 'all' 'star' 'game' 'experiences' '?' 'Also'
 'list' 'the' 'count' '.']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
2095,pilot_record,"SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",Show the names of pilots and the number of records they have.,"['SELECT' 'T2.Pilot_name' ',' 'COUNT' '(' '*' ')' 'FROM' 'pilot_record'
 'AS' 'T1' 'JOIN' 'pilot' 'AS' 'T2' 'ON' 'T1.pilot_ID' '=' 'T2.pilot_ID'
 'GROUP' 'BY' 'T2.Pilot_name']","['select' 't2' '.' 'pilot_name' ',' 'count' '(' '*' ')' 'from'
 'pilot_record' 'as' 't1' 'join' 'pilot' 'as' 't2' 'on' 't1' '.'
 'pilot_id' '=' 't2' '.' 'pilot_id' 'group' 'by' 't2' '.' 'pilot_name']","['Show' 'the' 'names' 'of' 'pilots' 'and' 'the' 'number' 'of' 'records'
 'they' 'have' '.']","['CREATE TABLE ""aircraft"" ( ""Aircraft_ID"" int, ""Order_Year"" int, ""Manufacturer"" text, ""Model"" text, ""Fleet_Series"" text, ""Powertrain"" text, ""Fuel_Propulsion"" text, PRIMARY KEY (""Aircraft_ID"") )', 'CREATE TABLE ""pilot"" ( ""Pilot_ID"" int, ""Pilot_name"" text, ""Rank"" int, ""Age"" int, ""Nationality"" text, ""Position"" text, ""Join_Year"" int, ""Team"" text, PRIMARY KEY (""Pilot_ID"") )', 'CREATE TABLE ""pilot_record"" ( ""Record_ID"" int, ""Pilot_ID"" int, ""Aircraft_ID"" int, ""Date"" text, PRIMARY KEY (""Pilot_ID"", ""Aircraft_ID"", ""Date""), FOREIGN KEY (`Pilot_ID`) REFERENCES `pilot`(`Pilot_ID`), FOREIGN KEY (`Aircraft_ID`) REFERENCES `aircraft`(`Aircraft_ID`) )']"
5546,products_gen_characteristics,"SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  ""chervil""","What is the color code and description of the product named ""chervil""?","['SELECT' 't1.color_code' ',' 't2.color_description' 'FROM' 'products'
 'AS' 't1' 'JOIN' 'ref_colors' 'AS' 't2' 'ON' 't1.color_code' '='
 't2.color_code' 'WHERE' 't1.product_name' '=' '``' 'chervil' ""''""]","['select' 't1' '.' 'color_code' ',' 't2' '.' 'color_description' 'from'
 'products' 'as' 't1' 'join' 'ref_colors' 'as' 't2' 'on' 't1' '.'
 'color_code' '=' 't2' '.' 'color_code' 'where' 't1' '.' 'product_name'
 '=' 'value']","['What' 'is' 'the' 'color' 'code' 'and' 'description' 'of' 'the' 'product'
 'named' '``' 'chervil' ""''"" '?']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
5555,products_gen_characteristics,"SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  ""sesame""",Count the number of characteristics the product 'sesame' has.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'products' 'AS' 't1' 'JOIN'
 'product_characteristics' 'AS' 't2' 'ON' 't1.product_id' '='
 't2.product_id' 'WHERE' 't1.product_name' '=' '``' 'sesame' ""''""]","['select' 'count' '(' '*' ')' 'from' 'products' 'as' 't1' 'join'
 'product_characteristics' 'as' 't2' 'on' 't1' '.' 'product_id' '=' 't2'
 '.' 'product_id' 'where' 't1' '.' 'product_name' '=' 'value']","['Count' 'the' 'number' 'of' 'characteristics' 'the' 'product' ""'sesame""
 ""'"" 'has' '.']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
3712,mountain_photos,"SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC","Find the brand and name for each camera lens, and sort in descending order of maximum aperture.","['SELECT' 'brand' ',' 'name' 'FROM' 'camera_lens' 'ORDER' 'BY'
 'max_aperture' 'DESC']","['select' 'brand' ',' 'name' 'from' 'camera_lens' 'order' 'by'
 'max_aperture' 'desc']","['Find' 'the' 'brand' 'and' 'name' 'for' 'each' 'camera' 'lens' ',' 'and'
 'sort' 'in' 'descending' 'order' 'of' 'maximum' 'aperture' '.']","['CREATE TABLE ""mountain"" ( ""id"" int, ""name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, primary key(""id"") )', 'CREATE TABLE ""camera_lens"" ( ""id"" int, ""brand"" text, ""name"" text, ""focal_length_mm"" real, ""max_aperture"" real, primary key(""id"") )', 'CREATE TABLE ""photos"" ( ""id"" int, ""camera_lens_id"" int, ""mountain_id"" int, ""color"" text, ""name"" text, primary key(""id""), foreign key(""camera_lens_id"") references `camera_lens`(""id""), foreign key(""mountain_id"") references `mountain`(""id"") )']"
4585,solvency_ii,"SELECT Product_Name ,  Product_Type_Code FROM Products",What are the names and type codes of products?,"['SELECT' 'Product_Name' ',' 'Product_Type_Code' 'FROM' 'Products']","['select' 'product_name' ',' 'product_type_code' 'from' 'products']",['What' 'are' 'the' 'names' 'and' 'type' 'codes' 'of' 'products' '?'],"['CREATE TABLE Addresses ( Address_ID INTEGER NOT NULL , address_details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Products ( Product_ID INTEGER NOT NULL, Product_Type_Code CHAR(15), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Parties ( Party_ID INTEGER NOT NULL, Party_Details VARCHAR(255), PRIMARY KEY (Party_ID) )', 'CREATE TABLE Assets ( Asset_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Asset_ID) )', 'CREATE TABLE Channels ( Channel_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Channel_ID) )', 'CREATE TABLE Finances ( Finance_ID INTEGER NOT NULL , Other_Details VARCHAR(255), PRIMARY KEY (Finance_ID) )', 'CREATE TABLE Events ( Event_ID INTEGER NOT NULL , Address_ID INTEGER, Channel_ID INTEGER NOT NULL, Event_Type_Code CHAR(15), Finance_ID INTEGER NOT NULL, Location_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID), UNIQUE (Event_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Finance_ID) REFERENCES Finances (Finance_ID) )', 'CREATE TABLE Products_in_Events ( Product_in_Event_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Product_in_Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Parties_in_Events ( Party_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, Role_Code CHAR(15), PRIMARY KEY (Party_ID, Event_ID), FOREIGN KEY (Party_ID) REFERENCES Parties (Party_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )', 'CREATE TABLE Agreements ( Document_ID INTEGER NOT NULL , Event_ID INTEGER NOT NULL, PRIMARY KEY (Document_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )', 'CREATE TABLE Assets_in_Events ( Asset_ID INTEGER NOT NULL, Event_ID INTEGER NOT NULL, PRIMARY KEY (Asset_ID, Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )']"
3966,hospital_1,"SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures","What are the highest cost, lowest cost and average cost of procedures?","['SELECT' 'MAX' '(' 'cost' ')' ',' 'MIN' '(' 'cost' ')' ',' 'AVG' '('
 'cost' ')' 'FROM' 'procedures']","['select' 'max' '(' 'cost' ')' ',' 'min' '(' 'cost' ')' ',' 'avg' '('
 'cost' ')' 'from' 'procedures']","['What' 'are' 'the' 'highest' 'cost' ',' 'lowest' 'cost' 'and' 'average'
 'cost' 'of' 'procedures' '?']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
6534,wine_1,"SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  ""Red""",What are the names of wines made from red grapes?,"['SELECT' 'DISTINCT' 'T2.Name' 'FROM' 'GRAPES' 'AS' 'T1' 'JOIN' 'WINE'
 'AS' 'T2' 'ON' 'T1.Grape' '=' 'T2.Grape' 'WHERE' 'T1.Color' '=' '``'
 'Red' ""''""]","['select' 'distinct' 't2' '.' 'name' 'from' 'grapes' 'as' 't1' 'join'
 'wine' 'as' 't2' 'on' 't1' '.' 'grape' '=' 't2' '.' 'grape' 'where' 't1'
 '.' 'color' '=' 'value']",['What' 'are' 'the' 'names' 'of' 'wines' 'made' 'from' 'red' 'grapes' '?'],"['CREATE TABLE ""grapes"" ( \t""ID"" INTEGER PRIMARY KEY, \t""Grape"" TEXT UNIQUE, \t""Color"" TEXT );', 'CREATE TABLE ""appellations"" ( \t""No"" INTEGER PRIMARY KEY, \t""Appelation"" TEXT UNIQUE, \t""County"" TEXT, \t""State"" TEXT, \t""Area"" TEXT, \t""isAVA"" TEXT);', 'CREATE TABLE ""wine"" ( \t""No"" INTEGER, \t""Grape"" TEXT, \t""Winery"" TEXT, \t""Appelation"" TEXT, \t""State"" TEXT, \t""Name"" TEXT, \t""Year"" INTEGER, \t""Price"" INTEGER, \t""Score"" INTEGER, \t""Cases"" INTEGER, \t""Drink"" TEXT,\tFOREIGN KEY (Grape) REFERENCES grapes(Grape),\tFOREIGN KEY (Appelation) REFERENCES appellations(Appelation));']"
5987,game_1,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1,Which game type has least number of games?,"['SELECT' 'gtype' 'FROM' 'Video_games' 'GROUP' 'BY' 'gtype' 'ORDER' 'BY'
 'count' '(' '*' ')' 'LIMIT' '1']","['select' 'gtype' 'from' 'video_games' 'group' 'by' 'gtype' 'order' 'by'
 'count' '(' '*' ')' 'limit' 'value']",['Which' 'game' 'type' 'has' 'least' 'number' 'of' 'games' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
795,coffee_shop,SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40,Which address has both members younger than 30 and members older than 40?,"['SELECT' 'address' 'FROM' 'member' 'WHERE' 'age' '<' '30' 'INTERSECT'
 'SELECT' 'address' 'FROM' 'member' 'WHERE' 'age' '>' '40']","['select' 'address' 'from' 'member' 'where' 'age' '<' 'value' 'intersect'
 'select' 'address' 'from' 'member' 'where' 'age' '>' 'value']","['Which' 'address' 'has' 'both' 'members' 'younger' 'than' '30' 'and'
 'members' 'older' 'than' '40' '?']","['CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Address"" text, ""Num_of_staff"" text, ""Score"" real, ""Open_Year"" text, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Membership_card"" text, ""Age"" int, ""Time_of_purchase"" int, ""Level_of_membership"" int, ""Address"" text, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""happy_hour"" ( ""HH_ID"" int, ""Shop_ID"" int, ""Month"" text, ""Num_of_shaff_in_charge"" int, PRIMARY KEY (""HH_ID"",""Shop_ID"",""Month""), FOREIGN KEY (""Shop_ID"") REFERENCES `shop`(""Shop_ID"") )', 'CREATE TABLE ""happy_hour_member"" ( ""HH_ID"" int, ""Member_ID"" int, ""Total_amount"" real, PRIMARY KEY (""HH_ID"",""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID"") )']"
2723,storm_record,SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2,What are the names of storms that did not affect two or more regions?,"['SELECT' 'name' 'FROM' 'storm' 'EXCEPT' 'SELECT' 'T1.name' 'FROM' 'storm'
 'AS' 'T1' 'JOIN' 'affected_region' 'AS' 'T2' 'ON' 'T1.storm_id' '='
 'T2.storm_id' 'GROUP' 'BY' 'T1.storm_id' 'HAVING' 'count' '(' '*' ')' '>'
 '=' '2']","['select' 'name' 'from' 'storm' 'except' 'select' 't1' '.' 'name' 'from'
 'storm' 'as' 't1' 'join' 'affected_region' 'as' 't2' 'on' 't1' '.'
 'storm_id' '=' 't2' '.' 'storm_id' 'group' 'by' 't1' '.' 'storm_id'
 'having' 'count' '(' '*' ')' '>' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'storms' 'that' 'did' 'not' 'affect'
 'two' 'or' 'more' 'regions' '?']","['CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") )', 'CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") )', 'CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) )']"
2742,election,SELECT DISTINCT District FROM election,Show all the distinct districts for elections.,['SELECT' 'DISTINCT' 'District' 'FROM' 'election'],['select' 'distinct' 'district' 'from' 'election'],['Show' 'all' 'the' 'distinct' 'districts' 'for' 'elections' '.'],"['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
2542,county_public_safety,SELECT Name FROM city ORDER BY Name ASC,What are the names of cities in ascending alphabetical order?,['SELECT' 'Name' 'FROM' 'city' 'ORDER' 'BY' 'Name' 'ASC'],['select' 'name' 'from' 'city' 'order' 'by' 'name' 'asc'],"['What' 'are' 'the' 'names' 'of' 'cities' 'in' 'ascending' 'alphabetical'
 'order' '?']","['CREATE TABLE ""county_public_safety"" ( ""County_ID"" int, ""Name"" text, ""Population"" int, ""Police_officers"" int, ""Residents_per_officer"" int, ""Case_burden"" int, ""Crime_rate"" real, ""Police_force"" text, ""Location"" text, PRIMARY KEY (""County_ID"") )', 'CREATE TABLE ""city"" ( ""City_ID"" int, ""County_ID"" int, ""Name"" text, ""White"" real, ""Black"" real, ""Amerindian"" real, ""Asian"" real, ""Multiracial"" real, ""Hispanic"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (""County_ID"") REFERENCES ""county_public_safety""(""County_ID"") )']"
6784,activity_1,"SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",Find the first and last name of the faculty who is involved in the largest number of activities.,"['SELECT' 'T1.fname' ',' 'T1.lname' 'FROM' 'Faculty' 'AS' 'T1' 'JOIN'
 'Faculty_participates_in' 'AS' 'T2' 'ON' 'T1.facID' '=' 'T2.facID'
 'GROUP' 'BY' 'T1.FacID' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT'
 '1']","['select' 't1' '.' 'fname' ',' 't1' '.' 'lname' 'from' 'faculty' 'as' 't1'
 'join' 'faculty_participates_in' 'as' 't2' 'on' 't1' '.' 'facid' '=' 't2'
 '.' 'facid' 'group' 'by' 't1' '.' 'facid' 'order' 'by' 'count' '(' '*'
 ')' 'desc' 'limit' 'value']","['Find' 'the' 'first' 'and' 'last' 'name' 'of' 'the' 'faculty' 'who' 'is'
 'involved' 'in' 'the' 'largest' 'number' 'of' 'activities' '.']","['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
2684,party_host,SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20,Show the host names for parties with number of hosts greater than 20.,"['SELECT' 'T2.Name' 'FROM' 'party_host' 'AS' 'T1' 'JOIN' 'HOST' 'AS' 'T2'
 'ON' 'T1.Host_ID' '=' 'T2.Host_ID' 'JOIN' 'party' 'AS' 'T3' 'ON'
 'T1.Party_ID' '=' 'T3.Party_ID' 'WHERE' 'T3.Number_of_hosts' '>' '20']","['select' 't2' '.' 'name' 'from' 'party_host' 'as' 't1' 'join' 'host' 'as'
 't2' 'on' 't1' '.' 'host_id' '=' 't2' '.' 'host_id' 'join' 'party' 'as'
 't3' 'on' 't1' '.' 'party_id' '=' 't3' '.' 'party_id' 'where' 't3' '.'
 'number_of_hosts' '>' 'value']","['Show' 'the' 'host' 'names' 'for' 'parties' 'with' 'number' 'of' 'hosts'
 'greater' 'than' '20' '.']","['CREATE TABLE ""party"" ( ""Party_ID"" int, ""Party_Theme"" text, ""Location"" text, ""First_year"" text, ""Last_year"" text, ""Number_of_hosts"" int, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""host"" ( ""Host_ID"" int, ""Name"" text, ""Nationality"" text, ""Age"" text, PRIMARY KEY (""Host_ID"") )', 'CREATE TABLE ""party_host"" ( ""Party_ID"" int, ""Host_ID"" int, ""Is_Main_in_Charge"" bool, PRIMARY KEY (""Party_ID"",""Host_ID""), FOREIGN KEY (""Host_ID"") REFERENCES `host`(""Host_ID""), FOREIGN KEY (""Party_ID"") REFERENCES `party`(""Party_ID"") )']"
5073,device,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the shop that has the most different kinds of devices in stock?,"['SELECT' 'T2.Shop_Name' 'FROM' 'stock' 'AS' 'T1' 'JOIN' 'shop' 'AS' 'T2'
 'ON' 'T1.Shop_ID' '=' 'T2.Shop_ID' 'GROUP' 'BY' 'T1.Shop_ID' 'ORDER' 'BY'
 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'shop_name' 'from' 'stock' 'as' 't1' 'join' 'shop' 'as'
 't2' 'on' 't1' '.' 'shop_id' '=' 't2' '.' 'shop_id' 'group' 'by' 't1' '.'
 'shop_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'shop' 'that' 'has' 'the' 'most'
 'different' 'kinds' 'of' 'devices' 'in' 'stock' '?']","['CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") )', 'CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) )']"
1451,college_2,"SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",Give the title and credits for the course that is taught in the classroom with the greatest capacity.,"['SELECT' 'T3.title' ',' 'T3.credits' 'FROM' 'classroom' 'AS' 'T1' 'JOIN'
 'SECTION' 'AS' 'T2' 'ON' 'T1.building' '=' 'T2.building' 'AND'
 'T1.room_number' '=' 'T2.room_number' 'JOIN' 'course' 'AS' 'T3' 'ON'
 'T2.course_id' '=' 'T3.course_id' 'WHERE' 'T1.capacity' '=' '(' 'SELECT'
 'max' '(' 'capacity' ')' 'FROM' 'classroom' ')']","['select' 't3' '.' 'title' ',' 't3' '.' 'credits' 'from' 'classroom' 'as'
 't1' 'join' 'section' 'as' 't2' 'on' 't1' '.' 'building' '=' 't2' '.'
 'building' 'and' 't1' '.' 'room_number' '=' 't2' '.' 'room_number' 'join'
 'course' 'as' 't3' 'on' 't2' '.' 'course_id' '=' 't3' '.' 'course_id'
 'where' 't1' '.' 'capacity' '=' '(' 'select' 'max' '(' 'capacity' ')'
 'from' 'classroom' ')']","['Give' 'the' 'title' 'and' 'credits' 'for' 'the' 'course' 'that' 'is'
 'taught' 'in' 'the' 'classroom' 'with' 'the' 'greatest' 'capacity' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
5225,music_2,"SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  ""Le Pop""","What are the types of vocals used in the song ""Le Pop""?","['SELECT' 'TYPE' 'FROM' 'vocals' 'AS' 'T1' 'JOIN' 'songs' 'AS' 'T2' 'ON'
 'T1.songid' '=' 'T2.songid' 'WHERE' 'title' '=' '``' 'Le' 'Pop' ""''""]","['select' 'type' 'from' 'vocals' 'as' 't1' 'join' 'songs' 'as' 't2' 'on'
 't1' '.' 'songid' '=' 't2' '.' 'songid' 'where' 'title' '=' 'value']","['What' 'are' 'the' 'types' 'of' 'vocals' 'used' 'in' 'the' 'song' '``'
 'Le' 'Pop' ""''"" '?']","['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
5752,dorm_1,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name,Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.,"['SELECT' 'T3.amenity_name' 'FROM' 'dorm' 'AS' 'T1' 'JOIN' 'has_amenity'
 'AS' 'T2' 'ON' 'T1.dormid' '=' 'T2.dormid' 'JOIN' 'dorm_amenity' 'AS'
 'T3' 'ON' 'T2.amenid' '=' 'T3.amenid' 'WHERE' 'T1.dorm_name' '=' ""'Smith""
 'Hall' ""'"" 'ORDER' 'BY' 'T3.amenity_name']","['select' 't3' '.' 'amenity_name' 'from' 'dorm' 'as' 't1' 'join'
 'has_amenity' 'as' 't2' 'on' 't1' '.' 'dormid' '=' 't2' '.' 'dormid'
 'join' 'dorm_amenity' 'as' 't3' 'on' 't2' '.' 'amenid' '=' 't3' '.'
 'amenid' 'where' 't1' '.' 'dorm_name' '=' 'value' 'order' 'by' 't3' '.'
 'amenity_name']","['Find' 'the' 'name' 'of' 'amenities' 'Smith' 'Hall' 'dorm' 'have' '.'
 'ordered' 'the' 'results' 'by' 'amenity' 'names' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
6142,customers_and_addresses,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano',What are the names of customers who have purchased both products Latte and Americano?,"['SELECT' 't1.customer_name' 'FROM' 'customers' 'AS' 't1' 'JOIN'
 'customer_orders' 'AS' 't2' 'ON' 't1.customer_id' '=' 't2.customer_id'
 'JOIN' 'order_items' 'AS' 't3' 'ON' 't2.order_id' '=' 't3.order_id'
 'JOIN' 'products' 'AS' 't4' 'ON' 't3.product_id' '=' 't4.product_id'
 'WHERE' 't4.product_details' '=' ""'Latte"" ""'"" 'INTERSECT' 'SELECT'
 't1.customer_name' 'FROM' 'customers' 'AS' 't1' 'JOIN' 'customer_orders'
 'AS' 't2' 'ON' 't1.customer_id' '=' 't2.customer_id' 'JOIN' 'order_items'
 'AS' 't3' 'ON' 't2.order_id' '=' 't3.order_id' 'JOIN' 'products' 'AS'
 't4' 'ON' 't3.product_id' '=' 't4.product_id' 'WHERE'
 't4.product_details' '=' ""'Americano"" ""'""]","['select' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1' 'join'
 'customer_orders' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'join' 'order_items' 'as' 't3' 'on' 't2' '.' 'order_id' '='
 't3' '.' 'order_id' 'join' 'products' 'as' 't4' 'on' 't3' '.'
 'product_id' '=' 't4' '.' 'product_id' 'where' 't4' '.' 'product_details'
 '=' 'value' 'intersect' 'select' 't1' '.' 'customer_name' 'from'
 'customers' 'as' 't1' 'join' 'customer_orders' 'as' 't2' 'on' 't1' '.'
 'customer_id' '=' 't2' '.' 'customer_id' 'join' 'order_items' 'as' 't3'
 'on' 't2' '.' 'order_id' '=' 't3' '.' 'order_id' 'join' 'products' 'as'
 't4' 'on' 't3' '.' 'product_id' '=' 't4' '.' 'product_id' 'where' 't4'
 '.' 'product_details' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'customers' 'who' 'have' 'purchased'
 'both' 'products' 'Latte' 'and' 'Americano' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
2947,sakila_1,SELECT count(*) FROM customer WHERE active = '1',Count the number of customers who are active.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'customer' 'WHERE' 'active' '=' ""'1""
 ""'""]","['select' 'count' '(' '*' ')' 'from' 'customer' 'where' 'active' '='
 'value']",['Count' 'the' 'number' 'of' 'customers' 'who' 'are' 'active' '.'],"['CREATE TABLE actor ( actor_id SMALLINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id) )', 'CREATE TABLE address ( address_id SMALLINT UNSIGNED NOT NULL, address VARCHAR(50) NOT NULL, address2 VARCHAR(50) DEFAULT NULL, district VARCHAR(20) NOT NULL, city_id SMALLINT UNSIGNED NOT NULL, postal_code VARCHAR(10) DEFAULT NULL, phone VARCHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (address_id), FOREIGN KEY (city_id) REFERENCES city (city_id) )', 'CREATE TABLE category ( category_id TINYINT UNSIGNED NOT NULL, name VARCHAR(25) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (category_id) )', 'CREATE TABLE city ( city_id SMALLINT UNSIGNED NOT NULL, city VARCHAR(50) NOT NULL, country_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (city_id), FOREIGN KEY (country_id) REFERENCES country (country_id) )', 'CREATE TABLE country ( country_id SMALLINT UNSIGNED NOT NULL, country VARCHAR(50) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (country_id) )', 'CREATE TABLE customer ( customer_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, email VARCHAR(50) DEFAULT NULL, address_id SMALLINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, create_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (customer_id), FOREIGN KEY (address_id) REFERENCES address (address_id), FOREIGN KEY (store_id) REFERENCES store (store_id) )', ""CREATE TABLE film ( film_id SMALLINT UNSIGNED NOT NULL, title VARCHAR(255) NOT NULL, description TEXT DEFAULT NULL, release_year YEAR DEFAULT NULL, language_id TINYINT UNSIGNED NOT NULL, original_language_id TINYINT UNSIGNED DEFAULT NULL, rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3, rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99, length SMALLINT UNSIGNED DEFAULT NULL, replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99, rating DEFAULT 'G', special_features DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id), FOREIGN KEY (language_id) REFERENCES language (language_id), FOREIGN KEY (original_language_id) REFERENCES language (language_id) )"", 'CREATE TABLE film_actor ( actor_id SMALLINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id,film_id), FOREIGN KEY (actor_id) REFERENCES actor (actor_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE film_category ( film_id SMALLINT UNSIGNED NOT NULL, category_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id, category_id), FOREIGN KEY (film_id) REFERENCES film (film_id), FOREIGN KEY (category_id) REFERENCES category (category_id) )', 'CREATE TABLE film_text ( film_id SMALLINT NOT NULL, title VARCHAR(255) NOT NULL, description TEXT, PRIMARY KEY (film_id) )', 'CREATE TABLE inventory ( inventory_id MEDIUMINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (inventory_id), FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE language ( language_id TINYINT UNSIGNED NOT NULL, name CHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (language_id) )', 'CREATE TABLE payment ( payment_id SMALLINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, staff_id TINYINT UNSIGNED NOT NULL, rental_id INT DEFAULT NULL, amount DECIMAL(5,2) NOT NULL, payment_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (payment_id), FOREIGN KEY (rental_id) REFERENCES rental (rental_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id) )', 'CREATE TABLE rental ( rental_id INT NOT NULL, rental_date DATETIME NOT NULL, inventory_id MEDIUMINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, return_date DATETIME DEFAULT NULL, staff_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (rental_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id), FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id) )', 'CREATE TABLE staff ( staff_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, picture BLOB DEFAULT NULL, email VARCHAR(50) DEFAULT NULL, store_id TINYINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, username VARCHAR(16) NOT NULL, password VARCHAR(40) DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )', 'CREATE TABLE store ( store_id TINYINT UNSIGNED NOT NULL, manager_staff_id TINYINT UNSIGNED NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (store_id), FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )']"
1820,small_bank_1,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance,Find the name of accounts whose checking balance is higher than corresponding saving balance.,"['SELECT' 'T1.name' 'FROM' 'accounts' 'AS' 'T1' 'JOIN' 'checking' 'AS'
 'T2' 'ON' 'T1.custid' '=' 'T2.custid' 'JOIN' 'savings' 'AS' 'T3' 'ON'
 'T1.custid' '=' 'T3.custid' 'WHERE' 'T2.balance' '>' 'T3.balance']","['select' 't1' '.' 'name' 'from' 'accounts' 'as' 't1' 'join' 'checking'
 'as' 't2' 'on' 't1' '.' 'custid' '=' 't2' '.' 'custid' 'join' 'savings'
 'as' 't3' 'on' 't1' '.' 'custid' '=' 't3' '.' 'custid' 'where' 't2' '.'
 'balance' '>' 't3' '.' 'balance']","['Find' 'the' 'name' 'of' 'accounts' 'whose' 'checking' 'balance' 'is'
 'higher' 'than' 'corresponding' 'saving' 'balance' '.']","['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
4319,club_1,"SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Tennis Club""","Compute the average age of the members in the club ""Tennis Club"".","['SELECT' 'avg' '(' 't3.age' ')' 'FROM' 'club' 'AS' 't1' 'JOIN'
 'member_of_club' 'AS' 't2' 'ON' 't1.clubid' '=' 't2.clubid' 'JOIN'
 'student' 'AS' 't3' 'ON' 't2.stuid' '=' 't3.stuid' 'WHERE' 't1.clubname'
 '=' '``' 'Tennis' 'Club' ""''""]","['select' 'avg' '(' 't3' '.' 'age' ')' 'from' 'club' 'as' 't1' 'join'
 'member_of_club' 'as' 't2' 'on' 't1' '.' 'clubid' '=' 't2' '.' 'clubid'
 'join' 'student' 'as' 't3' 'on' 't2' '.' 'stuid' '=' 't3' '.' 'stuid'
 'where' 't1' '.' 'clubname' '=' 'value']","['Compute' 'the' 'average' 'age' 'of' 'the' 'members' 'in' 'the' 'club'
 '``' 'Tennis' 'Club' ""''"" '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Club ( ClubID INTEGER PRIMARY KEY, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) )', 'CREATE TABLE Member_of_club ( StuID INTEGER, ClubID INTEGER, Position VARCHAR(40), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ClubID) REFERENCES Club(ClubID) )']"
2019,gas_company,SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas',Show all headquarters with both a company in banking industry and a company in Oil and gas.,"['SELECT' 'headquarters' 'FROM' 'company' 'WHERE' 'main_industry' '='
 ""'Banking"" ""'"" 'INTERSECT' 'SELECT' 'headquarters' 'FROM' 'company'
 'WHERE' 'main_industry' '=' ""'Oil"" 'and' 'gas' ""'""]","['select' 'headquarters' 'from' 'company' 'where' 'main_industry' '='
 'value' 'intersect' 'select' 'headquarters' 'from' 'company' 'where'
 'main_industry' '=' 'value']","['Show' 'all' 'headquarters' 'with' 'both' 'a' 'company' 'in' 'banking'
 'industry' 'and' 'a' 'company' 'in' 'Oil' 'and' 'gas' '.']","['CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") )', 'CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") )', 'CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) )']"
4967,soccer_2,"SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player","What is the average, maximum, and minimum for the number of hours spent training?","['SELECT' 'avg' '(' 'HS' ')' ',' 'max' '(' 'HS' ')' ',' 'min' '(' 'HS' ')'
 'FROM' 'Player']","['select' 'avg' '(' 'hs' ')' ',' 'max' '(' 'hs' ')' ',' 'min' '(' 'hs' ')'
 'from' 'player']","['What' 'is' 'the' 'average' ',' 'maximum' ',' 'and' 'minimum' 'for' 'the'
 'number' 'of' 'hours' 'spent' 'training' '?']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
3111,behavior_monitoring,"SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",What are the code and description of the least frequent detention type ?,"['SELECT' 'T1.detention_type_code' ',' 'T2.detention_type_description'
 'FROM' 'Detention' 'AS' 'T1' 'JOIN' 'Ref_Detention_Type' 'AS' 'T2' 'ON'
 'T1.detention_type_code' '=' 'T2.detention_type_code' 'GROUP' 'BY'
 'T1.detention_type_code' 'ORDER' 'BY' 'count' '(' '*' ')' 'ASC' 'LIMIT'
 '1']","['select' 't1' '.' 'detention_type_code' ',' 't2' '.'
 'detention_type_description' 'from' 'detention' 'as' 't1' 'join'
 'ref_detention_type' 'as' 't2' 'on' 't1' '.' 'detention_type_code' '='
 't2' '.' 'detention_type_code' 'group' 'by' 't1' '.'
 'detention_type_code' 'order' 'by' 'count' '(' '*' ')' 'asc' 'limit'
 'value']","['What' 'are' 'the' 'code' 'and' 'description' 'of' 'the' 'least'
 'frequent' 'detention' 'type' '?']","['CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) )', 'CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) )', 'CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) )', 'CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )']"
3208,college_1,"SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",How many classes exist for each school?,"['SELECT' 'count' '(' '*' ')' ',' 'T3.school_code' 'FROM' 'CLASS' 'AS'
 'T1' 'JOIN' 'course' 'AS' 'T2' 'ON' 'T1.crs_code' '=' 'T2.crs_code'
 'JOIN' 'department' 'AS' 'T3' 'ON' 'T2.dept_code' '=' 'T3.dept_code'
 'GROUP' 'BY' 'T3.school_code']","['select' 'count' '(' '*' ')' ',' 't3' '.' 'school_code' 'from' 'class'
 'as' 't1' 'join' 'course' 'as' 't2' 'on' 't1' '.' 'crs_code' '=' 't2' '.'
 'crs_code' 'join' 'department' 'as' 't3' 'on' 't2' '.' 'dept_code' '='
 't3' '.' 'dept_code' 'group' 'by' 't3' '.' 'school_code']",['How' 'many' 'classes' 'exist' 'for' 'each' 'school' '?'],"['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
3585,music_1,SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1,What is the language used most often in the songs?,"['SELECT' 'languages' 'FROM' 'song' 'GROUP' 'BY' 'languages' 'ORDER' 'BY'
 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'languages' 'from' 'song' 'group' 'by' 'languages' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']",['What' 'is' 'the' 'language' 'used' 'most' 'often' 'in' 'the' 'songs' '?'],"['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
2367,csu_1,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles""",What campuses are in Los Angeles county?,"['SELECT' 'campus' 'FROM' 'campuses' 'WHERE' 'county' '=' '``' 'Los'
 'Angeles' ""''""]",['select' 'campus' 'from' 'campuses' 'where' 'county' '=' 'value'],['What' 'campuses' 'are' 'in' 'Los' 'Angeles' 'county' '?'],"['CREATE TABLE ""Campuses"" ( ""Id"" INTEGER PRIMARY KEY, ""Campus"" TEXT, ""Location"" TEXT, ""County"" TEXT, ""Year"" INTEGER )', 'CREATE TABLE ""csu_fees"" ( ""Campus"" INTEGER PRIMARY KEY, ""Year"" INTEGER, ""CampusFee"" INTEGER, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""degrees"" ( ""Year"" INTEGER, ""Campus"" INTEGER, ""Degrees"" INTEGER, PRIMARY KEY (Year, Campus), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""discipline_enrollments"" ( ""Campus"" INTEGER, ""Discipline"" INTEGER, ""Year"" INTEGER, ""Undergraduate"" INTEGER, ""Graduate"" INTEGER, PRIMARY KEY (Campus, Discipline), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""enrollments"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""TotalEnrollment_AY"" INTEGER, ""FTE_AY"" INTEGER, PRIMARY KEY(Campus, Year), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""faculty"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""Faculty"" REAL, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )']"
5570,products_gen_characteristics,"SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  ""hot""","How many products have the characteristic named ""hot""?","['SELECT' 'count' '(' '*' ')' 'FROM' 'products' 'AS' 't1' 'JOIN'
 'product_characteristics' 'AS' 't2' 'ON' 't1.product_id' '='
 't2.product_id' 'JOIN' 'CHARACTERISTICS' 'AS' 't3' 'ON'
 't2.characteristic_id' '=' 't3.characteristic_id' 'WHERE'
 't3.characteristic_name' '=' '``' 'hot' ""''""]","['select' 'count' '(' '*' ')' 'from' 'products' 'as' 't1' 'join'
 'product_characteristics' 'as' 't2' 'on' 't1' '.' 'product_id' '=' 't2'
 '.' 'product_id' 'join' 'characteristics' 'as' 't3' 'on' 't2' '.'
 'characteristic_id' '=' 't3' '.' 'characteristic_id' 'where' 't3' '.'
 'characteristic_name' '=' 'value']","['How' 'many' 'products' 'have' 'the' 'characteristic' 'named' '``' 'hot'
 ""''"" '?']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
2874,icfp_1,"SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Oxford""","Who belong to the institution ""University of Oxford""? Show the first names and last names.","['SELECT' 'DISTINCT' 't1.fname' ',' 't1.lname' 'FROM' 'authors' 'AS' 't1'
 'JOIN' 'authorship' 'AS' 't2' 'ON' 't1.authid' '=' 't2.authid' 'JOIN'
 'inst' 'AS' 't3' 'ON' 't2.instid' '=' 't3.instid' 'WHERE' 't3.name' '='
 '``' 'University' 'of' 'Oxford' ""''""]","['select' 'distinct' 't1' '.' 'fname' ',' 't1' '.' 'lname' 'from'
 'authors' 'as' 't1' 'join' 'authorship' 'as' 't2' 'on' 't1' '.' 'authid'
 '=' 't2' '.' 'authid' 'join' 'inst' 'as' 't3' 'on' 't2' '.' 'instid' '='
 't3' '.' 'instid' 'where' 't3' '.' 'name' '=' 'value']","['Who' 'belong' 'to' 'the' 'institution' '``' 'University' 'of' 'Oxford'
 ""''"" '?' 'Show' 'the' 'first' 'names' 'and' 'last' 'names' '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
1416,college_2,"SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",Find the name and salary of the instructors who are advisors of any student from History department?,"['SELECT' 'T2.name' ',' 'T2.salary' 'FROM' 'advisor' 'AS' 'T1' 'JOIN'
 'instructor' 'AS' 'T2' 'ON' 'T1.i_id' '=' 'T2.id' 'JOIN' 'student' 'AS'
 'T3' 'ON' 'T1.s_id' '=' 'T3.id' 'WHERE' 'T3.dept_name' '=' ""'History"" ""'""]","['select' 't2' '.' 'name' ',' 't2' '.' 'salary' 'from' 'advisor' 'as' 't1'
 'join' 'instructor' 'as' 't2' 'on' 't1' '.' 'i_id' '=' 't2' '.' 'id'
 'join' 'student' 'as' 't3' 'on' 't1' '.' 's_id' '=' 't3' '.' 'id' 'where'
 't3' '.' 'dept_name' '=' 'value']","['Find' 'the' 'name' 'and' 'salary' 'of' 'the' 'instructors' 'who' 'are'
 'advisors' 'of' 'any' 'student' 'from' 'History' 'department' '?']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
31,farm,SELECT Official_Name FROM city ORDER BY Population DESC,"What are the official names of cities, ordered descending by population?",['SELECT' 'Official_Name' 'FROM' 'city' 'ORDER' 'BY' 'Population' 'DESC'],['select' 'official_name' 'from' 'city' 'order' 'by' 'population' 'desc'],"['What' 'are' 'the' 'official' 'names' 'of' 'cities' ',' 'ordered'
 'descending' 'by' 'population' '?']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""Official_Name"" text, ""Status"" text, ""Area_km_2"" real, ""Population"" real, ""Census_Ranking"" text, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""farm"" ( ""Farm_ID"" int, ""Year"" int, ""Total_Horses"" real, ""Working_Horses"" real, ""Total_Cattle"" real, ""Oxen"" real, ""Bulls"" real, ""Cows"" real, ""Pigs"" real, ""Sheep_and_Goats"" real, PRIMARY KEY (""Farm_ID"") )', 'CREATE TABLE ""farm_competition"" ( ""Competition_ID"" int, ""Year"" int, ""Theme"" text, ""Host_city_ID"" int, ""Hosts"" text, PRIMARY KEY (""Competition_ID""), FOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""competition_record"" ( ""Competition_ID"" int, ""Farm_ID"" int, ""Rank"" int, PRIMARY KEY (""Competition_ID"",""Farm_ID""), FOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`), FOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`) )']"
3552,music_1,SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1,Find the file format that is used by the most files.,"['SELECT' 'formats' 'FROM' 'files' 'GROUP' 'BY' 'formats' 'ORDER' 'BY'
 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'formats' 'from' 'files' 'group' 'by' 'formats' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Find' 'the' 'file' 'format' 'that' 'is' 'used' 'by' 'the' 'most' 'files'
 '.']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
4471,network_2,SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach'),What are the ages of all of Zach's friends who are in the longest relationship?,"['SELECT' 'T1.age' 'FROM' 'Person' 'AS' 'T1' 'JOIN' 'PersonFriend' 'AS'
 'T2' 'ON' 'T1.name' '=' 'T2.friend' 'WHERE' 'T2.name' '=' ""'Zach"" ""'""
 'AND' 'T2.year' '=' '(' 'SELECT' 'max' '(' 'YEAR' ')' 'FROM'
 'PersonFriend' 'WHERE' 'name' '=' ""'Zach"" ""'"" ')']","['select' 't1' '.' 'age' 'from' 'person' 'as' 't1' 'join' 'personfriend'
 'as' 't2' 'on' 't1' '.' 'name' '=' 't2' '.' 'friend' 'where' 't2' '.'
 'name' '=' 'value' 'and' 't2' '.' 'year' '=' '(' 'select' 'max' '('
 'year' ')' 'from' 'personfriend' 'where' 'name' '=' 'value' ')']","['What' 'are' 'the' 'ages' 'of' 'all' 'of' 'Zach' ""'s"" 'friends' 'who'
 'are' 'in' 'the' 'longest' 'relationship' '?']","['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
1235,apartment_rentals,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  ""Female""","What are the start date and end date of the apartment bookings made by female guests (gender code ""Female"")?","['SELECT' 'T1.booking_start_date' ',' 'T1.booking_start_date' 'FROM'
 'Apartment_Bookings' 'AS' 'T1' 'JOIN' 'Guests' 'AS' 'T2' 'ON'
 'T1.guest_id' '=' 'T2.guest_id' 'WHERE' 'T2.gender_code' '=' '``'
 'Female' ""''""]","['select' 't1' '.' 'booking_start_date' ',' 't1' '.' 'booking_start_date'
 'from' 'apartment_bookings' 'as' 't1' 'join' 'guests' 'as' 't2' 'on' 't1'
 '.' 'guest_id' '=' 't2' '.' 'guest_id' 'where' 't2' '.' 'gender_code' '='
 'value']","['What' 'are' 'the' 'start' 'date' 'and' 'end' 'date' 'of' 'the'
 'apartment' 'bookings' 'made' 'by' 'female' 'guests' '(' 'gender' 'code'
 '``' 'Female' ""''"" ')' '?']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
5807,customer_complaints,"SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  ""vbogisich@example.org""","What are lines 1 and 2 of the addressed of the customer with the email ""vbogisich@example.org""?","['SELECT' 'address_line_1' ',' 'address_line_2' 'FROM' 'customers' 'WHERE'
 'email_address' '=' '``' 'vbogisich' '@' 'example.org' ""''""]","['select' 'address_line_1' ',' 'address_line_2' 'from' 'customers' 'where'
 'email_address' '=' 'value']","['What' 'are' 'lines' '1' 'and' '2' 'of' 'the' 'addressed' 'of' 'the'
 'customer' 'with' 'the' 'email' '``' 'vbogisich' '@' 'example.org' ""''""
 '?']","['CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
2996,sakila_1,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?,"['SELECT' 'DISTINCT' 'T1.first_name' ',' 'T1.last_name' 'FROM' 'staff'
 'AS' 'T1' 'JOIN' 'rental' 'AS' 'T2' 'ON' 'T1.staff_id' '=' 'T2.staff_id'
 'JOIN' 'customer' 'AS' 'T3' 'ON' 'T2.customer_id' '=' 'T3.customer_id'
 'WHERE' 'T3.first_name' '=' ""'APRIL"" ""'"" 'AND' 'T3.last_name' '='
 ""'BURNS"" ""'""]","['select' 'distinct' 't1' '.' 'first_name' ',' 't1' '.' 'last_name' 'from'
 'staff' 'as' 't1' 'join' 'rental' 'as' 't2' 'on' 't1' '.' 'staff_id' '='
 't2' '.' 'staff_id' 'join' 'customer' 'as' 't3' 'on' 't2' '.'
 'customer_id' '=' 't3' '.' 'customer_id' 'where' 't3' '.' 'first_name'
 '=' 'value' 'and' 't3' '.' 'last_name' '=' 'value']","['What' 'is' 'the' 'full' 'name' 'of' 'the' 'staff' 'member' 'who' 'has'
 'rented' 'a' 'film' 'to' 'a' 'customer' 'with' 'the' 'first' 'name'
 'April' 'and' 'the' 'last' 'name' 'Burns' '?']","['CREATE TABLE actor ( actor_id SMALLINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id) )', 'CREATE TABLE address ( address_id SMALLINT UNSIGNED NOT NULL, address VARCHAR(50) NOT NULL, address2 VARCHAR(50) DEFAULT NULL, district VARCHAR(20) NOT NULL, city_id SMALLINT UNSIGNED NOT NULL, postal_code VARCHAR(10) DEFAULT NULL, phone VARCHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (address_id), FOREIGN KEY (city_id) REFERENCES city (city_id) )', 'CREATE TABLE category ( category_id TINYINT UNSIGNED NOT NULL, name VARCHAR(25) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (category_id) )', 'CREATE TABLE city ( city_id SMALLINT UNSIGNED NOT NULL, city VARCHAR(50) NOT NULL, country_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (city_id), FOREIGN KEY (country_id) REFERENCES country (country_id) )', 'CREATE TABLE country ( country_id SMALLINT UNSIGNED NOT NULL, country VARCHAR(50) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (country_id) )', 'CREATE TABLE customer ( customer_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, email VARCHAR(50) DEFAULT NULL, address_id SMALLINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, create_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (customer_id), FOREIGN KEY (address_id) REFERENCES address (address_id), FOREIGN KEY (store_id) REFERENCES store (store_id) )', ""CREATE TABLE film ( film_id SMALLINT UNSIGNED NOT NULL, title VARCHAR(255) NOT NULL, description TEXT DEFAULT NULL, release_year YEAR DEFAULT NULL, language_id TINYINT UNSIGNED NOT NULL, original_language_id TINYINT UNSIGNED DEFAULT NULL, rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3, rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99, length SMALLINT UNSIGNED DEFAULT NULL, replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99, rating DEFAULT 'G', special_features DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id), FOREIGN KEY (language_id) REFERENCES language (language_id), FOREIGN KEY (original_language_id) REFERENCES language (language_id) )"", 'CREATE TABLE film_actor ( actor_id SMALLINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id,film_id), FOREIGN KEY (actor_id) REFERENCES actor (actor_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE film_category ( film_id SMALLINT UNSIGNED NOT NULL, category_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id, category_id), FOREIGN KEY (film_id) REFERENCES film (film_id), FOREIGN KEY (category_id) REFERENCES category (category_id) )', 'CREATE TABLE film_text ( film_id SMALLINT NOT NULL, title VARCHAR(255) NOT NULL, description TEXT, PRIMARY KEY (film_id) )', 'CREATE TABLE inventory ( inventory_id MEDIUMINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (inventory_id), FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE language ( language_id TINYINT UNSIGNED NOT NULL, name CHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (language_id) )', 'CREATE TABLE payment ( payment_id SMALLINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, staff_id TINYINT UNSIGNED NOT NULL, rental_id INT DEFAULT NULL, amount DECIMAL(5,2) NOT NULL, payment_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (payment_id), FOREIGN KEY (rental_id) REFERENCES rental (rental_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id) )', 'CREATE TABLE rental ( rental_id INT NOT NULL, rental_date DATETIME NOT NULL, inventory_id MEDIUMINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, return_date DATETIME DEFAULT NULL, staff_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (rental_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id), FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id) )', 'CREATE TABLE staff ( staff_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, picture BLOB DEFAULT NULL, email VARCHAR(50) DEFAULT NULL, store_id TINYINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, username VARCHAR(16) NOT NULL, password VARCHAR(40) DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )', 'CREATE TABLE store ( store_id TINYINT UNSIGNED NOT NULL, manager_staff_id TINYINT UNSIGNED NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (store_id), FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )']"
4884,school_player,"SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID",Show locations and nicknames of schools.,"['SELECT' 'T1.Location' ',' 'T2.Nickname' 'FROM' 'school' 'AS' 'T1' 'JOIN'
 'school_details' 'AS' 'T2' 'ON' 'T1.School_ID' '=' 'T2.School_ID']","['select' 't1' '.' 'location' ',' 't2' '.' 'nickname' 'from' 'school' 'as'
 't1' 'join' 'school_details' 'as' 't2' 'on' 't1' '.' 'school_id' '=' 't2'
 '.' 'school_id']",['Show' 'locations' 'and' 'nicknames' 'of' 'schools' '.'],"['CREATE TABLE ""school"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Enrollment"" real, ""Founded"" real, ""Denomination"" text, ""Boys_or_Girls"" text, ""Day_or_Boarding"" text, ""Year_Entered_Competition"" real, ""School_Colors"" text, PRIMARY KEY (""School_Id"") )', 'CREATE TABLE ""school_details"" ( ""School_ID"" int, ""Nickname"" text, ""Colors"" text, ""League"" text, ""Class"" text, ""Division"" text, PRIMARY KEY (""School_Id""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""school_performance"" ( ""School_Id"" int, ""School_Year"" text, ""Class_A"" text, ""Class_AA"" text, PRIMARY KEY (""School_Id"",""School_Year""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Team"" text, ""Age"" int, ""Position"" text, ""School_ID"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )']"
4904,store_product,"SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",Find the name and population of district with population between 200000 and 2000000,"['SELECT' 'District_name' ',' 'City_Population' 'FROM' 'district' 'WHERE'
 'City_Population' 'BETWEEN' '200000' 'AND' '2000000']","['select' 'district_name' ',' 'city_population' 'from' 'district' 'where'
 'city_population' 'between' 'value' 'and' 'value']","['Find' 'the' 'name' 'and' 'population' 'of' 'district' 'with'
 'population' 'between' '200000' 'and' '2000000']","['CREATE TABLE ""product"" ( ""product_id"" int, ""product"" text, ""dimensions"" text, ""dpi"" real, ""pages_per_minute_color"" real, ""max_page_size"" text, ""interface"" text, PRIMARY KEY (""product_id"") )', 'CREATE TABLE ""store"" ( ""Store_ID"" int, ""Store_Name"" text, ""Type"" text, ""Area_size"" real, ""Number_of_product_category"" real, ""Ranking"" int, PRIMARY KEY (""Store_ID"") )', 'CREATE TABLE ""district"" ( ""District_ID"" int, ""District_name"" text, ""Headquartered_City"" text, ""City_Population"" real, ""City_Area"" real, PRIMARY KEY (""District_ID"") )', 'CREATE TABLE ""store_product"" ( ""Store_ID"" int, ""Product_ID"" int, PRIMARY KEY (""Store_ID"",""Product_ID""), FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`), FOREIGN KEY (`Product_ID`) REFERENCES `product`(`Product_ID`) )', 'CREATE TABLE ""store_district"" ( ""Store_ID"" int, ""District_ID"" int, PRIMARY KEY (""Store_ID""), FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`), FOREIGN KEY (`District_ID`) REFERENCES `district`(`District_ID`) )']"
535,allergy_1,"SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  ""Soy"")",Find the first name and major of the students who are not allegry to soy.,"['SELECT' 'fname' ',' 'major' 'FROM' 'Student' 'WHERE' 'StuID' 'NOT' 'IN'
 '(' 'SELECT' 'StuID' 'FROM' 'Has_allergy' 'WHERE' 'Allergy' '=' '``'
 'Soy' ""''"" ')']","['select' 'fname' ',' 'major' 'from' 'student' 'where' 'stuid' 'not' 'in'
 '(' 'select' 'stuid' 'from' 'has_allergy' 'where' 'allergy' '=' 'value'
 ')']","['Find' 'the' 'first' 'name' 'and' 'major' 'of' 'the' 'students' 'who'
 'are' 'not' 'allegry' 'to' 'soy' '.']","['CREATE TABLE Allergy_Type ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) )', 'CREATE TABLE Has_Allergy ( StuID INTEGER, Allergy VARCHAR(20), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )']"
3199,college_1,"SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",How many sections does each course has?,"['SELECT' 'count' '(' '*' ')' ',' 'crs_code' 'FROM' 'CLASS' 'GROUP' 'BY'
 'crs_code']","['select' 'count' '(' '*' ')' ',' 'crs_code' 'from' 'class' 'group' 'by'
 'crs_code']",['How' 'many' 'sections' 'does' 'each' 'course' 'has' '?'],"['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
1010,university_basketball,"SELECT count(*) FROM university WHERE LOCATION LIKE ""%NY%""",How many universities have a location that contains NY?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'university' 'WHERE' 'LOCATION'
 'LIKE' '``' '%' 'NY' '%' ""''""]","['select' 'count' '(' '*' ')' 'from' 'university' 'where' 'location'
 'like' 'value']","['How' 'many' 'universities' 'have' 'a' 'location' 'that' 'contains' 'NY'
 '?']","['CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) )', 'CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") )']"
3489,hr_1,SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000,Find the job ID for those jobs which average salary is above 8000.,"['SELECT' 'job_id' 'FROM' 'employees' 'GROUP' 'BY' 'job_id' 'HAVING' 'AVG'
 '(' 'salary' ')' '>' '8000']","['select' 'job_id' 'from' 'employees' 'group' 'by' 'job_id' 'having' 'avg'
 '(' 'salary' ')' '>' 'value']","['Find' 'the' 'job' 'ID' 'for' 'those' 'jobs' 'which' 'average' 'salary'
 'is' 'above' '8000' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
4036,student_1,"SELECT DISTINCT classroom ,  grade FROM list",For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.,"['SELECT' 'DISTINCT' 'classroom' ',' 'grade' 'FROM' 'list']","['select' 'distinct' 'classroom' ',' 'grade' 'from' 'list']","['For' 'each' 'classroom' 'report' 'the' 'grade' 'that' 'is' 'taught' 'in'
 'it' '.' 'Report' 'just' 'the' 'classroom' 'number' 'and' 'the' 'grade'
 'number' '.']","['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
1539,insurance_and_eClaims,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1,Find the name of the customer that has been involved in the most policies.,"['SELECT' 't2.customer_details' 'FROM' 'policies' 'AS' 't1' 'JOIN'
 'customers' 'AS' 't2' 'ON' 't1.customer_id' '=' 't2.customer_id' 'GROUP'
 'BY' 't2.customer_details' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC'
 'LIMIT' '1']","['select' 't2' '.' 'customer_details' 'from' 'policies' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'group' 'by' 't2' '.' 'customer_details' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Find' 'the' 'name' 'of' 'the' 'customer' 'that' 'has' 'been' 'involved'
 'in' 'the' 'most' 'policies' '.']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Staff_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Staff_ID) )', 'CREATE TABLE Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATETIME, End_Date DATETIME, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) )', 'CREATE TABLE Claim_Headers ( Claim_Header_ID INTEGER NOT NULL, Claim_Status_Code CHAR(15) NOT NULL, Claim_Type_Code CHAR(15) NOT NULL, Policy_ID INTEGER NOT NULL, Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4), PRIMARY KEY (Claim_Header_ID), FOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID) )', 'CREATE TABLE Claims_Documents ( Claim_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID, Document_Type_Code), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID) )', 'CREATE TABLE Claims_Processing_Stages ( Claim_Stage_ID INTEGER NOT NULL, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255) NOT NULL, Claim_Status_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Claim_Stage_ID) )', 'CREATE TABLE Claims_Processing ( Claim_Processing_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Claim_Outcome_Code CHAR(15) NOT NULL, Claim_Stage_ID INTEGER NOT NULL, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID) )']"
181,bike_1,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10,Find the zip code in which the average mean visibility is lower than 10.,"['SELECT' 'zip_code' 'FROM' 'weather' 'GROUP' 'BY' 'zip_code' 'HAVING'
 'avg' '(' 'mean_visibility_miles' ')' '<' '10']","['select' 'zip_code' 'from' 'weather' 'group' 'by' 'zip_code' 'having'
 'avg' '(' 'mean_visibility_miles' ')' '<' 'value']","['Find' 'the' 'zip' 'code' 'in' 'which' 'the' 'average' 'mean'
 'visibility' 'is' 'lower' 'than' '10' '.']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
3633,baseball_1,"SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",What are first and last names of players participating in all star game in 1998?,"['SELECT' 'name_first' ',' 'name_last' 'FROM' 'player' 'AS' 'T1' 'JOIN'
 'all_star' 'AS' 'T2' 'ON' 'T1.player_id' '=' 'T2.player_id' 'WHERE'
 'YEAR' '=' '1998']","['select' 'name_first' ',' 'name_last' 'from' 'player' 'as' 't1' 'join'
 'all_star' 'as' 't2' 'on' 't1' '.' 'player_id' '=' 't2' '.' 'player_id'
 'where' 'year' '=' 'value']","['What' 'are' 'first' 'and' 'last' 'names' 'of' 'players' 'participating'
 'in' 'all' 'star' 'game' 'in' '1998' '?']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
416,flight_1,"SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",What is the name of each aircraft and how many flights does each one complete?,"['SELECT' 'T2.name' ',' 'count' '(' '*' ')' 'FROM' 'Flight' 'AS' 'T1'
 'JOIN' 'Aircraft' 'AS' 'T2' 'ON' 'T1.aid' '=' 'T2.aid' 'GROUP' 'BY'
 'T1.aid']","['select' 't2' '.' 'name' ',' 'count' '(' '*' ')' 'from' 'flight' 'as'
 't1' 'join' 'aircraft' 'as' 't2' 'on' 't1' '.' 'aid' '=' 't2' '.' 'aid'
 'group' 'by' 't1' '.' 'aid']","['What' 'is' 'the' 'name' 'of' 'each' 'aircraft' 'and' 'how' 'many'
 'flights' 'does' 'each' 'one' 'complete' '?']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
3581,music_1,"SELECT f_id FROM files WHERE formats  =  ""mp4"" UNION SELECT f_id FROM song WHERE resolution  >  720",What are the ids of songs that are available in either mp4 format or have resolution above 720?,"['SELECT' 'f_id' 'FROM' 'files' 'WHERE' 'formats' '=' '``' 'mp4' ""''""
 'UNION' 'SELECT' 'f_id' 'FROM' 'song' 'WHERE' 'resolution' '>' '720']","['select' 'f_id' 'from' 'files' 'where' 'formats' '=' 'value' 'union'
 'select' 'f_id' 'from' 'song' 'where' 'resolution' '>' 'value']","['What' 'are' 'the' 'ids' 'of' 'songs' 'that' 'are' 'available' 'in'
 'either' 'mp4' 'format' 'or' 'have' 'resolution' 'above' '720' '?']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
146,bike_1,SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3,What are the 3 most common cloud covers in the zip code of 94107?,"['SELECT' 'cloud_cover' 'FROM' 'weather' 'WHERE' 'zip_code' '=' '94107'
 'GROUP' 'BY' 'cloud_cover' 'ORDER' 'BY' 'COUNT' '(' '*' ')' 'DESC'
 'LIMIT' '3']","['select' 'cloud_cover' 'from' 'weather' 'where' 'zip_code' '=' 'value'
 'group' 'by' 'cloud_cover' 'order' 'by' 'count' '(' '*' ')' 'desc'
 'limit' 'value']","['What' 'are' 'the' '3' 'most' 'common' 'cloud' 'covers' 'in' 'the' 'zip'
 'code' 'of' '94107' '?']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
2708,storm_record,SELECT count(DISTINCT region_id) FROM affected_region,How many regions are affected?,['SELECT' 'count' '(' 'DISTINCT' 'region_id' ')' 'FROM' 'affected_region'],['select' 'count' '(' 'distinct' 'region_id' ')' 'from' 'affected_region'],['How' 'many' 'regions' 'are' 'affected' '?'],"['CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") )', 'CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") )', 'CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) )']"
2796,election,SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election),What are the names of parties that do not have delegates in election?,"['SELECT' 'Party' 'FROM' 'party' 'WHERE' 'Party_ID' 'NOT' 'IN' '('
 'SELECT' 'Party' 'FROM' 'election' ')']","['select' 'party' 'from' 'party' 'where' 'party_id' 'not' 'in' '('
 'select' 'party' 'from' 'election' ')']","['What' 'are' 'the' 'names' 'of' 'parties' 'that' 'do' 'not' 'have'
 'delegates' 'in' 'election' '?']","['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
5309,manufactory_1,"SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",What are the names and revenues of the companies with the highest revenues in each headquarter city?,"['SELECT' 'name' ',' 'max' '(' 'revenue' ')' ',' 'Headquarter' 'FROM'
 'manufacturers' 'GROUP' 'BY' 'Headquarter']","['select' 'name' ',' 'max' '(' 'revenue' ')' ',' 'headquarter' 'from'
 'manufacturers' 'group' 'by' 'headquarter']","['What' 'are' 'the' 'names' 'and' 'revenues' 'of' 'the' 'companies' 'with'
 'the' 'highest' 'revenues' 'in' 'each' 'headquarter' 'city' '?']","['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
703,customers_card_transactions,"SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  ""4560596484842""","What is the first name, last name, and phone of the customer with card 4560596484842.","['SELECT' 'T2.customer_first_name' ',' 'T2.customer_last_name' ','
 'T2.customer_phone' 'FROM' 'Customers_cards' 'AS' 'T1' 'JOIN' 'Customers'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE'
 'T1.card_number' '=' '``' '4560596484842' ""''""]","['select' 't2' '.' 'customer_first_name' ',' 't2' '.' 'customer_last_name'
 ',' 't2' '.' 'customer_phone' 'from' 'customers_cards' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'where' 't1' '.' 'card_number' '=' 'value']","['What' 'is' 'the' 'first' 'name' ',' 'last' 'name' ',' 'and' 'phone' 'of'
 'the' 'customer' 'with' 'card' '4560596484842' '.']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
1324,college_2,SELECT count(*) FROM classroom WHERE building != 'Lamberton',Count the number of rooms that are not in the Lamberton building.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'classroom' 'WHERE' 'building' '!'
 '=' ""'Lamberton"" ""'""]","['select' 'count' '(' '*' ')' 'from' 'classroom' 'where' 'building' '!'
 '=' 'value']","['Count' 'the' 'number' 'of' 'rooms' 'that' 'are' 'not' 'in' 'the'
 'Lamberton' 'building' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
1568,customers_and_invoices,"SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",Return the id and full name of the customer with the most accounts.,"['SELECT' 'T1.customer_id' ',' 'T2.customer_first_name' ','
 'T2.customer_last_name' 'FROM' 'Accounts' 'AS' 'T1' 'JOIN' 'Customers'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'GROUP' 'BY'
 'T1.customer_id' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'customer_id' ',' 't2' '.' 'customer_first_name' ','
 't2' '.' 'customer_last_name' 'from' 'accounts' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'group' 'by' 't1' '.' 'customer_id' 'order' 'by' 'count'
 '(' '*' ')' 'desc' 'limit' 'value']","['Return' 'the' 'id' 'and' 'full' 'name' 'of' 'the' 'customer' 'with'
 'the' 'most' 'accounts' '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
623,store_1,"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = ""Balls to the Wall"";",What is title of album which track Balls to the Wall belongs to?,"['SELECT' 'T1.title' 'FROM' 'albums' 'AS' 'T1' 'JOIN' 'tracks' 'AS' 'T2'
 'ON' 'T1.id' '=' 'T2.genre_id' 'WHERE' 'T2.name' '=' '``' 'Balls' 'to'
 'the' 'Wall' ""''"" ';']","['select' 't1' '.' 'title' 'from' 'albums' 'as' 't1' 'join' 'tracks' 'as'
 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'genre_id' 'where' 't2' '.' 'name'
 '=' 'value']","['What' 'is' 'title' 'of' 'album' 'which' 'track' 'Balls' 'to' 'the'
 'Wall' 'belongs' 'to' '?']","['CREATE TABLE artists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE sqlite_sequence(name,seq)', 'CREATE TABLE albums ( id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(160) NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE employees ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(20) NOT NULL, first_name VARCHAR(20) NOT NULL, title VARCHAR(30), reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), FOREIGN KEY (reports_to) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE customers ( id INTEGER PRIMARY KEY AUTOINCREMENT, first_name VARCHAR(40) NOT NULL, last_name VARCHAR(20) NOT NULL, company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE genres ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE invoices ( id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE media_types ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE tracks ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(200) NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR(220), milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE invoice_lines ( id INTEGER PRIMARY KEY AUTOINCREMENT, invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE playlists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE playlist_tracks ( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
5408,shop_membership,SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2,List all open years when at least two shops are opened.,"['SELECT' 'open_year' 'FROM' 'branch' 'GROUP' 'BY' 'open_year' 'HAVING'
 'count' '(' '*' ')' '>' '=' '2']","['select' 'open_year' 'from' 'branch' 'group' 'by' 'open_year' 'having'
 'count' '(' '*' ')' '>' '=' 'value']","['List' 'all' 'open' 'years' 'when' 'at' 'least' 'two' 'shops' 'are'
 'opened' '.']","['CREATE TABLE ""member"" ( ""Member_ID"" int, ""Card_Number"" text, ""Name"" text, ""Hometown"" text, ""Level"" int, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""branch"" ( ""Branch_ID"" int, ""Name"" text, ""Open_year"" text, ""Address_road"" text, ""City"" text, ""membership_amount"" text, PRIMARY KEY (""Branch_ID"") )', 'CREATE TABLE ""membership_register_branch"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Register_Year"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") )', 'CREATE TABLE ""purchase"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Year"" text, ""Total_pounds"" real, PRIMARY KEY (""Member_ID"",""Branch_ID"",""Year""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") )']"
2901,icfp_1,SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1,Find the country that the most papers are affiliated with.,"['SELECT' 't1.country' 'FROM' 'inst' 'AS' 't1' 'JOIN' 'authorship' 'AS'
 't2' 'ON' 't1.instid' '=' 't2.instid' 'JOIN' 'papers' 'AS' 't3' 'ON'
 't2.paperid' '=' 't3.paperid' 'GROUP' 'BY' 't1.country' 'ORDER' 'BY'
 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'country' 'from' 'inst' 'as' 't1' 'join' 'authorship'
 'as' 't2' 'on' 't1' '.' 'instid' '=' 't2' '.' 'instid' 'join' 'papers'
 'as' 't3' 'on' 't2' '.' 'paperid' '=' 't3' '.' 'paperid' 'group' 'by'
 't1' '.' 'country' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit'
 'value']","['Find' 'the' 'country' 'that' 'the' 'most' 'papers' 'are' 'affiliated'
 'with' '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
6367,flight_company,"SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC","List the vehicle flight number, date and pilot of all the flights, ordered by altitude.","['SELECT' 'vehicle_flight_number' ',' 'date' ',' 'pilot' 'FROM' 'flight'
 'ORDER' 'BY' 'altitude' 'ASC']","['select' 'vehicle_flight_number' ',' 'date' ',' 'pilot' 'from' 'flight'
 'order' 'by' 'altitude' 'asc']","['List' 'the' 'vehicle' 'flight' 'number' ',' 'date' 'and' 'pilot' 'of'
 'all' 'the' 'flights' ',' 'ordered' 'by' 'altitude' '.']","['CREATE TABLE ""airport"" ( ""id"" int, ""City"" text, ""Country"" text, ""IATA"" text, ""ICAO"" text, ""name"" text, primary key(""id"") )', 'CREATE TABLE ""operate_company"" ( ""id"" int, ""name"" text, ""Type"" text, ""Principal_activities"" text, ""Incorporated_in"" text, ""Group_Equity_Shareholding"" real, primary key (""id"") )', 'CREATE TABLE ""flight"" ( ""id"" int, ""Vehicle_Flight_number"" text, ""Date"" text, ""Pilot"" text, ""Velocity"" real, ""Altitude"" real, ""airport_id"" int, ""company_id"" int, primary key (""id""), foreign key (""airport_id"") references `airport`(""id""), foreign key (""company_id"") references `operate_company`(""id"") )']"
1109,match_season,"SELECT College FROM match_season WHERE POSITION  =  ""Midfielder"" INTERSECT SELECT College FROM match_season WHERE POSITION  =  ""Defender""","Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.","['SELECT' 'College' 'FROM' 'match_season' 'WHERE' 'POSITION' '=' '``'
 'Midfielder' ""''"" 'INTERSECT' 'SELECT' 'College' 'FROM' 'match_season'
 'WHERE' 'POSITION' '=' '``' 'Defender' ""''""]","['select' 'college' 'from' 'match_season' 'where' 'position' '=' 'value'
 'intersect' 'select' 'college' 'from' 'match_season' 'where' 'position'
 '=' 'value']","['Return' 'the' 'colleges' 'that' 'have' 'players' 'who' 'play' 'the'
 'Midfielder' 'position' ',' 'as' 'well' 'as' 'players' 'who' 'play' 'the'
 'Defender' 'position' '.']","['CREATE TABLE ""country"" ( ""Country_id"" int, ""Country_name"" text, ""Capital"" text, ""Official_native_language"" text, PRIMARY KEY (""Country_id"") )', 'CREATE TABLE `team` ( `Team_id` int, `Name` text, PRIMARY KEY (`Team_id`) )', 'CREATE TABLE ""match_season"" ( ""Season"" real, ""Player"" text, ""Position"" text, ""Country"" int, ""Team"" int, ""Draft_Pick_Number"" int, ""Draft_Class"" text, ""College"" text, PRIMARY KEY (""Season""), FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Years_Played"" text, ""Total_WL"" text, ""Singles_WL"" text, ""Doubles_WL"" text, ""Team"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )']"
1912,protein_institute,SELECT name FROM building ORDER BY height_feet DESC LIMIT 1,What is the name of the tallest building?,"['SELECT' 'name' 'FROM' 'building' 'ORDER' 'BY' 'height_feet' 'DESC'
 'LIMIT' '1']","['select' 'name' 'from' 'building' 'order' 'by' 'height_feet' 'desc'
 'limit' 'value']",['What' 'is' 'the' 'name' 'of' 'the' 'tallest' 'building' '?'],"['CREATE TABLE ""building"" ( ""building_id"" text, ""Name"" text, ""Street_address"" text, ""Years_as_tallest"" text, ""Height_feet"" int, ""Floors"" int, PRIMARY KEY(""building_id"") )', 'CREATE TABLE ""Institution"" ( ""Institution_id"" text, ""Institution"" text, ""Location"" text, ""Founded"" real, ""Type"" text, ""Enrollment"" int, ""Team"" text, ""Primary_Conference"" text, ""building_id"" text, PRIMARY KEY(""Institution_id""), FOREIGN KEY (""building_id"") REFERENCES ""building""(""building_id"") )', 'CREATE TABLE ""protein"" ( ""common_name"" text, ""protein_name"" text, ""divergence_from_human_lineage"" real, ""accession_number"" text, ""sequence_length"" real, ""sequence_identity_to_human_protein"" text, ""Institution_id"" text, PRIMARY KEY(""common_name""), FOREIGN KEY(""Institution_id"") REFERENCES ""Institution""(""Institution_id"") )']"
6098,customers_and_addresses,"SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  ""Tillman Ernser""","Find the contact channel code that was used by the customer named ""Tillman Ernser"".","['SELECT' 'DISTINCT' 'channel_code' 'FROM' 'customers' 'AS' 't1' 'JOIN'
 'customer_contact_channels' 'AS' 't2' 'ON' 't1.customer_id' '='
 't2.customer_id' 'WHERE' 't1.customer_name' '=' '``' 'Tillman' 'Ernser'
 ""''""]","['select' 'distinct' 'channel_code' 'from' 'customers' 'as' 't1' 'join'
 'customer_contact_channels' 'as' 't2' 'on' 't1' '.' 'customer_id' '='
 't2' '.' 'customer_id' 'where' 't1' '.' 'customer_name' '=' 'value']","['Find' 'the' 'contact' 'channel' 'code' 'that' 'was' 'used' 'by' 'the'
 'customer' 'named' '``' 'Tillman' 'Ernser' ""''"" '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
5256,music_2,"SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  ""Heilo"" AND T2.title  =  ""Der Kapitan""","Which vocal type did the musician with last name ""Heilo"" played in the song with title ""Der Kapitan""?","['SELECT' 'TYPE' 'FROM' 'vocals' 'AS' 'T1' 'JOIN' 'songs' 'AS' 'T2' 'ON'
 'T1.songid' '=' 'T2.songid' 'JOIN' 'band' 'AS' 'T3' 'ON' 'T1.bandmate'
 '=' 'T3.id' 'WHERE' 'T3.lastname' '=' '``' 'Heilo' ""''"" 'AND' 'T2.title'
 '=' '``' 'Der' 'Kapitan' ""''""]","['select' 'type' 'from' 'vocals' 'as' 't1' 'join' 'songs' 'as' 't2' 'on'
 't1' '.' 'songid' '=' 't2' '.' 'songid' 'join' 'band' 'as' 't3' 'on' 't1'
 '.' 'bandmate' '=' 't3' '.' 'id' 'where' 't3' '.' 'lastname' '=' 'value'
 'and' 't2' '.' 'title' '=' 'value']","['Which' 'vocal' 'type' 'did' 'the' 'musician' 'with' 'last' 'name' '``'
 'Heilo' ""''"" 'played' 'in' 'the' 'song' 'with' 'title' '``' 'Der'
 'Kapitan' ""''"" '?']","['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
4130,film_rank,"SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID",Please show the titles of films and the types of market estimations.,"['SELECT' 'T1.Title' ',' 'T2.Type' 'FROM' 'film' 'AS' 'T1' 'JOIN'
 'film_market_estimation' 'AS' 'T2' 'ON' 'T1.Film_ID' '=' 'T2.Film_ID']","['select' 't1' '.' 'title' ',' 't2' '.' 'type' 'from' 'film' 'as' 't1'
 'join' 'film_market_estimation' 'as' 't2' 'on' 't1' '.' 'film_id' '='
 't2' '.' 'film_id']","['Please' 'show' 'the' 'titles' 'of' 'films' 'and' 'the' 'types' 'of'
 'market' 'estimations' '.']","['CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") )', 'CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") )', 'CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") )']"
2888,icfp_1,"SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Pennsylvania""","Find the number of papers published by the institution ""University of Pennsylvania"".","['SELECT' 'count' '(' 'DISTINCT' 't1.title' ')' 'FROM' 'papers' 'AS' 't1'
 'JOIN' 'authorship' 'AS' 't2' 'ON' 't1.paperid' '=' 't2.paperid' 'JOIN'
 'inst' 'AS' 't3' 'ON' 't2.instid' '=' 't3.instid' 'WHERE' 't3.name' '='
 '``' 'University' 'of' 'Pennsylvania' ""''""]","['select' 'count' '(' 'distinct' 't1' '.' 'title' ')' 'from' 'papers' 'as'
 't1' 'join' 'authorship' 'as' 't2' 'on' 't1' '.' 'paperid' '=' 't2' '.'
 'paperid' 'join' 'inst' 'as' 't3' 'on' 't2' '.' 'instid' '=' 't3' '.'
 'instid' 'where' 't3' '.' 'name' '=' 'value']","['Find' 'the' 'number' 'of' 'papers' 'published' 'by' 'the' 'institution'
 '``' 'University' 'of' 'Pennsylvania' ""''"" '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
3993,hospital_1,SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' ),How many patients are not using Procrastin-X as medication?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'patient' 'WHERE' 'SSN' 'NOT' 'IN'
 '(' 'SELECT' 'T1.patient' 'FROM' 'Prescribes' 'AS' 'T1' 'JOIN'
 'Medication' 'AS' 'T2' 'ON' 'T1.Medication' '=' 'T2.Code' 'WHERE'
 'T2.name' '=' ""'Procrastin-X"" ""'"" ')']","['select' 'count' '(' '*' ')' 'from' 'patient' 'where' 'ssn' 'not' 'in'
 '(' 'select' 't1' '.' 'patient' 'from' 'prescribes' 'as' 't1' 'join'
 'medication' 'as' 't2' 'on' 't1' '.' 'medication' '=' 't2' '.' 'code'
 'where' 't2' '.' 'name' '=' 'value' ')']","['How' 'many' 'patients' 'are' 'not' 'using' 'Procrastin-X' 'as'
 'medication' '?']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
4114,film_rank,SELECT DISTINCT Director FROM film,List the distinct director of all films.,['SELECT' 'DISTINCT' 'Director' 'FROM' 'film'],['select' 'distinct' 'director' 'from' 'film'],['List' 'the' 'distinct' 'director' 'of' 'all' 'films' '.'],"['CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") )', 'CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") )', 'CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") )']"
2166,formula_1,"SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",What is the forename and surname of the driver with the shortest laptime?,"['SELECT' 'T1.forename' ',' 'T1.surname' 'FROM' 'drivers' 'AS' 'T1' 'JOIN'
 'laptimes' 'AS' 'T2' 'ON' 'T1.driverid' '=' 'T2.driverid' 'ORDER' 'BY'
 'T2.milliseconds' 'LIMIT' '1']","['select' 't1' '.' 'forename' ',' 't1' '.' 'surname' 'from' 'drivers' 'as'
 't1' 'join' 'laptimes' 'as' 't2' 'on' 't1' '.' 'driverid' '=' 't2' '.'
 'driverid' 'order' 'by' 't2' '.' 'milliseconds' 'limit' 'value']","['What' 'is' 'the' 'forename' 'and' 'surname' 'of' 'the' 'driver' 'with'
 'the' 'shortest' 'laptime' '?']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
3789,e_learning,"SELECT login_name FROM Students WHERE family_name  =  ""Ward""","Return the login names of the students whose family name is ""Ward"".","['SELECT' 'login_name' 'FROM' 'Students' 'WHERE' 'family_name' '=' '``'
 'Ward' ""''""]",['select' 'login_name' 'from' 'students' 'where' 'family_name' '=' 'value'],"['Return' 'the' 'login' 'names' 'of' 'the' 'students' 'whose' 'family'
 'name' 'is' '``' 'Ward' ""''"" '.']","['CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) )', 'CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) )', 'CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) )', 'CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) )']"
3131,assets_maintenance,"SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1","Which engineer has visited the most times? Show the engineer id, first name and last name.","['SELECT' 'T1.engineer_id' ',' 'T1.first_name' ',' 'T1.last_name' 'FROM'
 'Maintenance_Engineers' 'AS' 'T1' 'JOIN' 'Engineer_Visits' 'AS' 'T2'
 'GROUP' 'BY' 'T1.engineer_id' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC'
 'LIMIT' '1']","['select' 't1' '.' 'engineer_id' ',' 't1' '.' 'first_name' ',' 't1' '.'
 'last_name' 'from' 'maintenance_engineers' 'as' 't1' 'join'
 'engineer_visits' 'as' 't2' 'group' 'by' 't1' '.' 'engineer_id' 'order'
 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Which' 'engineer' 'has' 'visited' 'the' 'most' 'times' '?' 'Show' 'the'
 'engineer' 'id' ',' 'first' 'name' 'and' 'last' 'name' '.']","['CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) )', 'CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) )', 'CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) )', 'CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) )', 'CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) )', 'CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) )', 'CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) )', 'CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) )', 'CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) )', 'CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) )']"
4113,film_rank,SELECT count(*) FROM film,Count the number of films.,['SELECT' 'count' '(' '*' ')' 'FROM' 'film'],['select' 'count' '(' '*' ')' 'from' 'film'],['Count' 'the' 'number' 'of' 'films' '.'],"['CREATE TABLE ""film"" ( ""Film_ID"" int, ""Title"" text, ""Studio"" text, ""Director"" text, ""Gross_in_dollar"" int, PRIMARY KEY (""Film_ID"") )', 'CREATE TABLE ""market"" ( ""Market_ID"" int, ""Country"" text, ""Number_cities"" int, PRIMARY KEY (""Market_ID"") )', 'CREATE TABLE ""film_market_estimation"" ( ""Estimation_ID"" int, ""Low_Estimate"" real, ""High_Estimate"" real, ""Film_ID"" int, ""Type"" text, ""Market_ID"" int, ""Year"" int, PRIMARY KEY (""Estimation_ID""), FOREIGN KEY (""Film_ID"") REFERENCES film(""Film_ID""), FOREIGN KEY (""Market_ID"") REFERENCES market(""Market_ID"") )']"
5153,cre_Drama_Workshop_Groups,"SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  ""Alaska""",List the email addresses of the drama workshop groups located in Alaska state.,"['SELECT' 'T2.Store_Email_Address' 'FROM' 'Addresses' 'AS' 'T1' 'JOIN'
 'Drama_Workshop_Groups' 'AS' 'T2' 'ON' 'T1.Address_ID' '='
 'T2.Address_ID' 'WHERE' 'T1.State_County' '=' '``' 'Alaska' ""''""]","['select' 't2' '.' 'store_email_address' 'from' 'addresses' 'as' 't1'
 'join' 'drama_workshop_groups' 'as' 't2' 'on' 't1' '.' 'address_id' '='
 't2' '.' 'address_id' 'where' 't1' '.' 'state_county' '=' 'value']","['List' 'the' 'email' 'addresses' 'of' 'the' 'drama' 'workshop' 'groups'
 'located' 'in' 'Alaska' 'state' '.']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
3911,hospital_1,SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID,What are the names of all the physicians who took appointments.,"['SELECT' 'T2.name' 'FROM' 'appointment' 'AS' 'T1' 'JOIN' 'physician' 'AS'
 'T2' 'ON' 'T1.Physician' '=' 'T2.EmployeeID']","['select' 't2' '.' 'name' 'from' 'appointment' 'as' 't1' 'join'
 'physician' 'as' 't2' 'on' 't1' '.' 'physician' '=' 't2' '.' 'employeeid']","['What' 'are' 'the' 'names' 'of' 'all' 'the' 'physicians' 'who' 'took'
 'appointments' '.']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
16,farm,SELECT count(*) FROM farm,How many farms are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'farm'],['select' 'count' '(' '*' ')' 'from' 'farm'],['How' 'many' 'farms' 'are' 'there' '?'],"['CREATE TABLE ""city"" ( ""City_ID"" int, ""Official_Name"" text, ""Status"" text, ""Area_km_2"" real, ""Population"" real, ""Census_Ranking"" text, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""farm"" ( ""Farm_ID"" int, ""Year"" int, ""Total_Horses"" real, ""Working_Horses"" real, ""Total_Cattle"" real, ""Oxen"" real, ""Bulls"" real, ""Cows"" real, ""Pigs"" real, ""Sheep_and_Goats"" real, PRIMARY KEY (""Farm_ID"") )', 'CREATE TABLE ""farm_competition"" ( ""Competition_ID"" int, ""Year"" int, ""Theme"" text, ""Host_city_ID"" int, ""Hosts"" text, PRIMARY KEY (""Competition_ID""), FOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""competition_record"" ( ""Competition_ID"" int, ""Farm_ID"" int, ""Rank"" int, PRIMARY KEY (""Competition_ID"",""Farm_ID""), FOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`), FOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`) )']"
965,medicine_enzyme_interaction,"SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'","What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","['SELECT' 'DISTINCT' 'T1.name' ',' 'T1.location' ',' 'T1.product' 'FROM'
 'enzyme' 'AS' 'T1' 'JOIN' 'medicine_enzyme_interaction' 'AS' 'T2' 'ON'
 'T2.enzyme_id' '=' 'T1.id' 'WHERE' 'T2.interaction_type' '=' ""'inhibitor""
 ""'""]","['select' 'distinct' 't1' '.' 'name' ',' 't1' '.' 'location' ',' 't1' '.'
 'product' 'from' 'enzyme' 'as' 't1' 'join' 'medicine_enzyme_interaction'
 'as' 't2' 'on' 't2' '.' 'enzyme_id' '=' 't1' '.' 'id' 'where' 't2' '.'
 'interaction_type' '=' 'value']","['What' 'are' 'the' 'distinct' 'name' ',' 'location' 'and' 'products' 'of'
 'the' 'enzymes' 'which' 'has' 'any' ""'inhibitor"" ""'"" 'interaction' '?']","['CREATE TABLE ""medicine"" ( ""id"" int, ""name"" text, ""Trade_Name"" text, ""FDA_approved"" text, primary key (""id"") )', 'CREATE TABLE ""enzyme"" ( ""id"" int, ""name"" text, ""Location"" text, ""Product"" text, ""Chromosome"" text, ""OMIM"" int, ""Porphyria"" text, primary key (""id"") )', 'CREATE TABLE ""medicine_enzyme_interaction"" ( ""enzyme_id"" int, ""medicine_id"" int, ""interaction_type"" text, primary key (""enzyme_id"", ""medicine_id""), foreign key (""enzyme_id"") references `enzyme`(""id""), foreign key (""medicine_id"") references `medicine`(""id"") )']"
6201,music_4,SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23,What are the issue dates of volumes associated with the artist aged 23 or younger?,"['SELECT' 'Issue_Date' 'FROM' 'artist' 'AS' 'T1' 'JOIN' 'volume' 'AS' 'T2'
 'ON' 'T1.Artist_ID' '=' 'T2.Artist_ID' 'WHERE' 'T1.age' '<' '=' '23']","['select' 'issue_date' 'from' 'artist' 'as' 't1' 'join' 'volume' 'as' 't2'
 'on' 't1' '.' 'artist_id' '=' 't2' '.' 'artist_id' 'where' 't1' '.' 'age'
 '<' '=' 'value']","['What' 'are' 'the' 'issue' 'dates' 'of' 'volumes' 'associated' 'with'
 'the' 'artist' 'aged' '23' 'or' 'younger' '?']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Artist"" text, ""Age"" int, ""Famous_Title"" text, ""Famous_Release_date"" text, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""volume"" ( ""Volume_ID"" int, ""Volume_Issue"" text, ""Issue_Date"" text, ""Weeks_on_Top"" real, ""Song"" text, ""Artist_ID"" int, PRIMARY KEY (""Volume_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""music_festival"" ( ""ID"" int, ""Music_Festival"" text, ""Date_of_ceremony"" text, ""Category"" text, ""Volume"" int, ""Result"" text, PRIMARY KEY (`ID`), FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`) )']"
1209,apartment_rentals,SELECT avg(bedroom_count) FROM Apartments,Find the average number of bedrooms of all the apartments.,['SELECT' 'avg' '(' 'bedroom_count' ')' 'FROM' 'Apartments'],['select' 'avg' '(' 'bedroom_count' ')' 'from' 'apartments'],"['Find' 'the' 'average' 'number' 'of' 'bedrooms' 'of' 'all' 'the'
 'apartments' '.']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
2265,entrepreneur,SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC,List the companies of entrepreneurs in descending order of money requested.,"['SELECT' 'Company' 'FROM' 'entrepreneur' 'ORDER' 'BY' 'Money_Requested'
 'DESC']","['select' 'company' 'from' 'entrepreneur' 'order' 'by' 'money_requested'
 'desc']","['List' 'the' 'companies' 'of' 'entrepreneurs' 'in' 'descending' 'order'
 'of' 'money' 'requested' '.']","['CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") )']"
5612,swimming,"SELECT country ,  count(*) FROM stadium GROUP BY country",How many stadiums does each country have?,"['SELECT' 'country' ',' 'count' '(' '*' ')' 'FROM' 'stadium' 'GROUP' 'BY'
 'country']","['select' 'country' ',' 'count' '(' '*' ')' 'from' 'stadium' 'group' 'by'
 'country']",['How' 'many' 'stadiums' 'does' 'each' 'country' 'have' '?'],"['CREATE TABLE ""swimmer"" ( ""ID"" int, ""name"" text, ""Nationality"" text, ""meter_100"" real, ""meter_200"" text, ""meter_300"" text, ""meter_400"" text, ""meter_500"" text, ""meter_600"" text, ""meter_700"" text, ""Time"" text, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""stadium"" ( ""ID"" int, ""name"" text, ""Capacity"" int, ""City"" text, ""Country"" text, ""Opening_year"" int, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""event"" ( ""ID"" int, ""Name"" text, ""Stadium_ID"" int, ""Year"" text, PRIMARY KEY (""ID""), FOREIGN KEY (`Stadium_ID`) REFERENCES `stadium`(`ID`) )', 'CREATE TABLE ""record"" ( ""ID"" int, ""Result"" text, ""Swimmer_ID"" int, ""Event_ID"" int, PRIMARY KEY (""Swimmer_ID"",""Event_ID""), FOREIGN KEY (`Event_ID`) REFERENCES `event`(`ID`), FOREIGN KEY (`Swimmer_ID`) REFERENCES `swimmer`(`ID`) )']"
3788,e_learning,"SELECT login_name FROM Students WHERE family_name  =  ""Ward""","What are the login names of the students with family name ""Ward""?","['SELECT' 'login_name' 'FROM' 'Students' 'WHERE' 'family_name' '=' '``'
 'Ward' ""''""]",['select' 'login_name' 'from' 'students' 'where' 'family_name' '=' 'value'],"['What' 'are' 'the' 'login' 'names' 'of' 'the' 'students' 'with' 'family'
 'name' '``' 'Ward' ""''"" '?']","['CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) )', 'CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) )', 'CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) )', 'CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) )']"
4249,cre_Doc_Tracking_DB,SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.,"['SELECT' 'Destroyed_by_Employee_ID' 'FROM' 'Documents_to_be_destroyed'
 'UNION' 'SELECT' 'Destruction_Authorised_by_Employee_ID' 'FROM'
 'Documents_to_be_destroyed']","['select' 'destroyed_by_employee_id' 'from' 'documents_to_be_destroyed'
 'union' 'select' 'destruction_authorised_by_employee_id' 'from'
 'documents_to_be_destroyed']","['Which' 'employees' 'have' 'either' 'destroyed' 'a' 'document' 'or'
 'made' 'an' 'authorization' 'to' 'do' 'so' '?' 'Return' 'their'
 'employee' 'ids' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
5144,cre_Drama_Workshop_Groups,SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1,What are the actual delivery dates of orders with quantity 1?,"['SELECT' 'T1.Actual_Delivery_Date' 'FROM' 'Customer_Orders' 'AS' 'T1'
 'JOIN' 'ORDER_ITEMS' 'AS' 'T2' 'ON' 'T1.Order_ID' '=' 'T2.Order_ID'
 'WHERE' 'T2.Order_Quantity' '=' '1']","['select' 't1' '.' 'actual_delivery_date' 'from' 'customer_orders' 'as'
 't1' 'join' 'order_items' 'as' 't2' 'on' 't1' '.' 'order_id' '=' 't2' '.'
 'order_id' 'where' 't2' '.' 'order_quantity' '=' 'value']","['What' 'are' 'the' 'actual' 'delivery' 'dates' 'of' 'orders' 'with'
 'quantity' '1' '?']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
3194,college_1,"SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",What is the course description and number of credits for QM-261?,"['SELECT' 'crs_credit' ',' 'crs_description' 'FROM' 'course' 'WHERE'
 'crs_code' '=' ""'QM-261"" ""'""]","['select' 'crs_credit' ',' 'crs_description' 'from' 'course' 'where'
 'crs_code' '=' 'value']","['What' 'is' 'the' 'course' 'description' 'and' 'number' 'of' 'credits'
 'for' 'QM-261' '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
5174,music_2,SELECT DISTINCT label FROM Albums,What are all the labels?,['SELECT' 'DISTINCT' 'label' 'FROM' 'Albums'],['select' 'distinct' 'label' 'from' 'albums'],['What' 'are' 'all' 'the' 'labels' '?'],"['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
5266,music_2,"SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  ""A Kiss Before You Go: Live in Hamburg""","What are the songs in album ""A Kiss Before You Go: Live in Hamburg""?","['SELECT' 'T3.title' 'FROM' 'albums' 'AS' 'T1' 'JOIN' 'tracklists' 'AS'
 'T2' 'ON' 'T1.aid' '=' 'T2.albumid' 'JOIN' 'songs' 'AS' 'T3' 'ON'
 'T2.songid' '=' 'T3.songid' 'WHERE' 'T1.title' '=' '``' 'A' 'Kiss'
 'Before' 'You' 'Go' ':' 'Live' 'in' 'Hamburg' ""''""]","['select' 't3' '.' 'title' 'from' 'albums' 'as' 't1' 'join' 'tracklists'
 'as' 't2' 'on' 't1' '.' 'aid' '=' 't2' '.' 'albumid' 'join' 'songs' 'as'
 't3' 'on' 't2' '.' 'songid' '=' 't3' '.' 'songid' 'where' 't1' '.'
 'title' '=' 'value']","['What' 'are' 'the' 'songs' 'in' 'album' '``' 'A' 'Kiss' 'Before' 'You'
 'Go' ':' 'Live' 'in' 'Hamburg' ""''"" '?']","['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
3404,manufacturer,SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10,Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.,"['SELECT' 't3.name' 'FROM' 'furniture' 'AS' 't1' 'JOIN'
 'furniture_manufacte' 'AS' 't2' 'ON' 't1.Furniture_ID' '='
 't2.Furniture_ID' 'JOIN' 'manufacturer' 'AS' 't3' 'ON'
 't2.manufacturer_id' '=' 't3.manufacturer_id' 'WHERE'
 't1.num_of_component' '<' '6' 'INTERSECT' 'SELECT' 't3.name' 'FROM'
 'furniture' 'AS' 't1' 'JOIN' 'furniture_manufacte' 'AS' 't2' 'ON'
 't1.Furniture_ID' '=' 't2.Furniture_ID' 'JOIN' 'manufacturer' 'AS' 't3'
 'ON' 't2.manufacturer_id' '=' 't3.manufacturer_id' 'WHERE'
 't1.num_of_component' '>' '10']","['select' 't3' '.' 'name' 'from' 'furniture' 'as' 't1' 'join'
 'furniture_manufacte' 'as' 't2' 'on' 't1' '.' 'furniture_id' '=' 't2' '.'
 'furniture_id' 'join' 'manufacturer' 'as' 't3' 'on' 't2' '.'
 'manufacturer_id' '=' 't3' '.' 'manufacturer_id' 'where' 't1' '.'
 'num_of_component' '<' 'value' 'intersect' 'select' 't3' '.' 'name'
 'from' 'furniture' 'as' 't1' 'join' 'furniture_manufacte' 'as' 't2' 'on'
 't1' '.' 'furniture_id' '=' 't2' '.' 'furniture_id' 'join' 'manufacturer'
 'as' 't3' 'on' 't2' '.' 'manufacturer_id' '=' 't3' '.' 'manufacturer_id'
 'where' 't1' '.' 'num_of_component' '>' 'value']","['Find' 'the' 'name' 'of' 'the' 'company' 'that' 'produces' 'both'
 'furnitures' 'with' 'less' 'than' '6' 'components' 'and' 'furnitures'
 'with' 'more' 'than' '10' 'components' '.']","['CREATE TABLE ""manufacturer"" ( ""Manufacturer_ID"" int, ""Open_Year"" real, ""Name"" text, ""Num_of_Factories"" int, ""Num_of_Shops"" int, PRIMARY KEY (""Manufacturer_ID"") )', 'CREATE TABLE ""furniture"" ( ""Furniture_ID"" int, ""Name"" text, ""Num_of_Component"" int, ""Market_Rate"" real, PRIMARY KEY (""Furniture_ID"") )', 'CREATE TABLE ""furniture_manufacte"" ( ""Manufacturer_ID"" int, ""Furniture_ID"" int, ""Price_in_Dollar"" real, PRIMARY KEY (""Manufacturer_ID"",""Furniture_ID""), FOREIGN KEY (""Manufacturer_ID"") REFERENCES `manufacturer`(""Manufacturer_ID""), FOREIGN KEY (""Furniture_ID"") REFERENCES `furniture`(""Furniture_ID"") )']"
4973,soccer_2,SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%',Who are the players that have names containing the letter a?,"['SELECT' 'DISTINCT' 'pName' 'FROM' 'Player' 'WHERE' 'pName' 'LIKE' ""'""
 '%' 'a' '%' ""'""]","['select' 'distinct' 'pname' 'from' 'player' 'where' 'pname' 'like'
 'value']","['Who' 'are' 'the' 'players' 'that' 'have' 'names' 'containing' 'the'
 'letter' 'a' '?']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
4041,student_1,SELECT DISTINCT grade FROM list WHERE classroom  =  105,Which grade is studying in room 105?,['SELECT' 'DISTINCT' 'grade' 'FROM' 'list' 'WHERE' 'classroom' '=' '105'],['select' 'distinct' 'grade' 'from' 'list' 'where' 'classroom' '=' 'value'],['Which' 'grade' 'is' 'studying' 'in' 'room' '105' '?'],"['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
4788,department_store,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3,What are the distinct names of customers who have purchased at least three different products?,"['SELECT' 'DISTINCT' 'T1.customer_name' 'FROM' 'customers' 'AS' 'T1'
 'JOIN' 'customer_orders' 'AS' 'T2' 'ON' 'T1.customer_id' '='
 'T2.customer_id' 'JOIN' 'order_items' 'AS' 'T3' 'ON' 'T2.order_id' '='
 'T3.order_id' 'GROUP' 'BY' 'T1.customer_id' 'HAVING' 'COUNT' '('
 'DISTINCT' 'T3.product_id' ')' '>' '=' '3']","['select' 'distinct' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1'
 'join' 'customer_orders' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2'
 '.' 'customer_id' 'join' 'order_items' 'as' 't3' 'on' 't2' '.' 'order_id'
 '=' 't3' '.' 'order_id' 'group' 'by' 't1' '.' 'customer_id' 'having'
 'count' '(' 'distinct' 't3' '.' 'product_id' ')' '>' '=' 'value']","['What' 'are' 'the' 'distinct' 'names' 'of' 'customers' 'who' 'have'
 'purchased' 'at' 'least' 'three' 'different' 'products' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) )', 'CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) )', 'CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) )', 'CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
1745,gymnast,SELECT Name FROM People ORDER BY Name ASC,"Return the names of people, ordered alphabetically.",['SELECT' 'Name' 'FROM' 'People' 'ORDER' 'BY' 'Name' 'ASC'],['select' 'name' 'from' 'people' 'order' 'by' 'name' 'asc'],"['Return' 'the' 'names' 'of' 'people' ',' 'ordered' 'alphabetically' '.']","['CREATE TABLE ""gymnast"" ( ""Gymnast_ID"" int, ""Floor_Exercise_Points"" real, ""Pommel_Horse_Points"" real, ""Rings_Points"" real, ""Vault_Points"" real, ""Parallel_Bars_Points"" real, ""Horizontal_Bar_Points"" real, ""Total_Points"" real, PRIMARY KEY (""Gymnast_ID""), FOREIGN KEY (""Gymnast_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Age"" real, ""Height"" real, ""Hometown"" text, PRIMARY KEY (""People_ID"") )']"
6755,activity_1,"SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID","Show the faculty id of each faculty member, along with the number of students he or she advises.","['SELECT' 'T1.FacID' ',' 'count' '(' '*' ')' 'FROM' 'Faculty' 'AS' 'T1'
 'JOIN' 'Student' 'AS' 'T2' 'ON' 'T1.FacID' '=' 'T2.advisor' 'GROUP' 'BY'
 'T1.FacID']","['select' 't1' '.' 'facid' ',' 'count' '(' '*' ')' 'from' 'faculty' 'as'
 't1' 'join' 'student' 'as' 't2' 'on' 't1' '.' 'facid' '=' 't2' '.'
 'advisor' 'group' 'by' 't1' '.' 'facid']","['Show' 'the' 'faculty' 'id' 'of' 'each' 'faculty' 'member' ',' 'along'
 'with' 'the' 'number' 'of' 'students' 'he' 'or' 'she' 'advises' '.']","['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
2277,entrepreneur,SELECT Weight FROM people ORDER BY Height ASC LIMIT 1,What is the weight of the shortest person?,['SELECT' 'Weight' 'FROM' 'people' 'ORDER' 'BY' 'Height' 'ASC' 'LIMIT' '1'],"['select' 'weight' 'from' 'people' 'order' 'by' 'height' 'asc' 'limit'
 'value']",['What' 'is' 'the' 'weight' 'of' 'the' 'shortest' 'person' '?'],"['CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") )']"
6854,flight_4,SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3),What is the count of cities with more than 3 airports?,"['SELECT' 'count' '(' '*' ')' 'FROM' '(' 'SELECT' 'city' 'FROM' 'airports'
 'GROUP' 'BY' 'city' 'HAVING' 'count' '(' '*' ')' '>' '3' ')']","['select' 'count' '(' '*' ')' 'from' '(' 'select' 'city' 'from' 'airports'
 'group' 'by' 'city' 'having' 'count' '(' '*' ')' '>' 'value' ')']","['What' 'is' 'the' 'count' 'of' 'cities' 'with' 'more' 'than' '3'
 'airports' '?']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
4421,network_2,"SELECT avg(age) ,  gender FROM Person GROUP BY gender","How old is each gender, on average?","['SELECT' 'avg' '(' 'age' ')' ',' 'gender' 'FROM' 'Person' 'GROUP' 'BY'
 'gender']","['select' 'avg' '(' 'age' ')' ',' 'gender' 'from' 'person' 'group' 'by'
 'gender']","['How' 'old' 'is' 'each' 'gender' ',' 'on' 'average' '?']","['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
6892,tracking_orders,SELECT order_item_id FROM order_items WHERE product_id = 11,Find all the order items whose product id is 11. What are the order item ids?,"['SELECT' 'order_item_id' 'FROM' 'order_items' 'WHERE' 'product_id' '='
 '11']","['select' 'order_item_id' 'from' 'order_items' 'where' 'product_id' '='
 'value']","['Find' 'all' 'the' 'order' 'items' 'whose' 'product' 'id' 'is' '11' '.'
 'What' 'are' 'the' 'order' 'item' 'ids' '?']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
5579,products_gen_characteristics,"SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  ""Herbs""",Return the unit of measure for 'Herb' products.,"['SELECT' 'unit_of_measure' 'FROM' 'ref_product_categories' 'WHERE'
 'product_category_code' '=' '``' 'Herbs' ""''""]","['select' 'unit_of_measure' 'from' 'ref_product_categories' 'where'
 'product_category_code' '=' 'value']","['Return' 'the' 'unit' 'of' 'measure' 'for' ""'Herb"" ""'"" 'products' '.']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
3162,station_weather,"SELECT origin ,  count(*) FROM train GROUP BY origin",Find the number of trains starting from each origin.,"['SELECT' 'origin' ',' 'count' '(' '*' ')' 'FROM' 'train' 'GROUP' 'BY'
 'origin']","['select' 'origin' ',' 'count' '(' '*' ')' 'from' 'train' 'group' 'by'
 'origin']",['Find' 'the' 'number' 'of' 'trains' 'starting' 'from' 'each' 'origin' '.'],"['CREATE TABLE ""train"" ( ""id"" int, ""train_number"" int, ""name"" text, ""origin"" text, ""destination"" text, ""time"" text, ""interval"" text, primary key (""id"") )', 'CREATE TABLE ""station"" ( ""id"" int, ""network_name"" text, ""services"" text, ""local_authority"" text, primary key (""id"") )', 'CREATE TABLE ""route"" ( ""train_id"" int, ""station_id"" int, primary key (""train_id"", ""station_id""), foreign key (""train_id"") references `train`(""id""), foreign key (""station_id"") references `station`(""id"") )', 'CREATE TABLE ""weekly_weather"" ( ""station_id"" int, ""day_of_week"" text, ""high_temperature"" int, ""low_temperature"" int, ""precipitation"" real, ""wind_speed_mph"" int, primary key (""station_id"", ""day_of_week""), foreign key (""station_id"") references ""station""(""id"") )']"
4996,soccer_2,SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes',Find the states where have some college students in tryout and their decisions are yes.,"['SELECT' 'DISTINCT' 'T1.state' 'FROM' 'college' 'AS' 'T1' 'JOIN' 'tryout'
 'AS' 'T2' 'ON' 'T1.cName' '=' 'T2.cName' 'WHERE' 'T2.decision' '=' ""'yes""
 ""'""]","['select' 'distinct' 't1' '.' 'state' 'from' 'college' 'as' 't1' 'join'
 'tryout' 'as' 't2' 'on' 't1' '.' 'cname' '=' 't2' '.' 'cname' 'where'
 't2' '.' 'decision' '=' 'value']","['Find' 'the' 'states' 'where' 'have' 'some' 'college' 'students' 'in'
 'tryout' 'and' 'their' 'decisions' 'are' 'yes' '.']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
1793,small_bank_1,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings),What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?,"['SELECT' 'T1.name' 'FROM' 'accounts' 'AS' 'T1' 'JOIN' 'checking' 'AS'
 'T2' 'ON' 'T1.custid' '=' 'T2.custid' 'WHERE' 'T2.balance' '>' '('
 'SELECT' 'avg' '(' 'balance' ')' 'FROM' 'checking' ')' 'INTERSECT'
 'SELECT' 'T1.name' 'FROM' 'accounts' 'AS' 'T1' 'JOIN' 'savings' 'AS' 'T2'
 'ON' 'T1.custid' '=' 'T2.custid' 'WHERE' 'T2.balance' '<' '(' 'SELECT'
 'avg' '(' 'balance' ')' 'FROM' 'savings' ')']","['select' 't1' '.' 'name' 'from' 'accounts' 'as' 't1' 'join' 'checking'
 'as' 't2' 'on' 't1' '.' 'custid' '=' 't2' '.' 'custid' 'where' 't2' '.'
 'balance' '>' '(' 'select' 'avg' '(' 'balance' ')' 'from' 'checking' ')'
 'intersect' 'select' 't1' '.' 'name' 'from' 'accounts' 'as' 't1' 'join'
 'savings' 'as' 't2' 'on' 't1' '.' 'custid' '=' 't2' '.' 'custid' 'where'
 't2' '.' 'balance' '<' '(' 'select' 'avg' '(' 'balance' ')' 'from'
 'savings' ')']","['What' 'are' 'the' 'names' 'of' 'accounts' 'with' 'checking' 'balances'
 'greater' 'than' 'the' 'average' 'checking' 'balance' 'and' 'savings'
 'balances' 'below' 'the' 'average' 'savings' 'balance' '?']","['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
3307,college_1,"SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",Find the first name and office of the professor who is in the history department and has a Ph.D. degree.,"['SELECT' 'T1.emp_fname' ',' 'T2.prof_office' 'FROM' 'employee' 'AS' 'T1'
 'JOIN' 'professor' 'AS' 'T2' 'ON' 'T1.emp_num' '=' 'T2.emp_num' 'JOIN'
 'department' 'AS' 'T3' 'ON' 'T3.dept_code' '=' 'T2.dept_code' 'WHERE'
 'T3.dept_name' '=' ""'History"" ""'"" 'AND' 'T2.prof_high_degree' '=' ""'Ph.D""
 '.' ""'""]","['select' 't1' '.' 'emp_fname' ',' 't2' '.' 'prof_office' 'from'
 'employee' 'as' 't1' 'join' 'professor' 'as' 't2' 'on' 't1' '.' 'emp_num'
 '=' 't2' '.' 'emp_num' 'join' 'department' 'as' 't3' 'on' 't3' '.'
 'dept_code' '=' 't2' '.' 'dept_code' 'where' 't3' '.' 'dept_name' '='
 'value' 'and' 't2' '.' 'prof_high_degree' '=' 'value']","['Find' 'the' 'first' 'name' 'and' 'office' 'of' 'the' 'professor' 'who'
 'is' 'in' 'the' 'history' 'department' 'and' 'has' 'a' 'Ph.D.' 'degree'
 '.']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
4448,network_2,SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student',Find the name of the person who has no student friends.,"['SELECT' 'name' 'FROM' 'person' 'EXCEPT' 'SELECT' 'T2.name' 'FROM'
 'Person' 'AS' 'T1' 'JOIN' 'PersonFriend' 'AS' 'T2' 'ON' 'T1.name' '='
 'T2.friend' 'WHERE' 'T1.job' '=' ""'student"" ""'""]","['select' 'name' 'from' 'person' 'except' 'select' 't2' '.' 'name' 'from'
 'person' 'as' 't1' 'join' 'personfriend' 'as' 't2' 'on' 't1' '.' 'name'
 '=' 't2' '.' 'friend' 'where' 't1' '.' 'job' '=' 'value']","['Find' 'the' 'name' 'of' 'the' 'person' 'who' 'has' 'no' 'student'
 'friends' '.']","['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
6679,driving_school,"SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;","What is the maximum, minimum, and average amount of money outsanding for all customers?","['SELECT' 'max' '(' 'amount_outstanding' ')' ',' 'min' '('
 'amount_outstanding' ')' ',' 'avg' '(' 'amount_outstanding' ')' 'FROM'
 'Customers' ';']","['select' 'max' '(' 'amount_outstanding' ')' ',' 'min' '('
 'amount_outstanding' ')' ',' 'avg' '(' 'amount_outstanding' ')' 'from'
 'customers']","['What' 'is' 'the' 'maximum' ',' 'minimum' ',' 'and' 'average' 'amount'
 'of' 'money' 'outsanding' 'for' 'all' 'customers' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
1989,phone_market,SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50,Show the names of phones that are on market with number of shops greater than 50.,"['SELECT' 'T3.Name' 'FROM' 'phone_market' 'AS' 'T1' 'JOIN' 'market' 'AS'
 'T2' 'ON' 'T1.Market_ID' '=' 'T2.Market_ID' 'JOIN' 'phone' 'AS' 'T3' 'ON'
 'T1.Phone_ID' '=' 'T3.Phone_ID' 'WHERE' 'T2.Num_of_shops' '>' '50']","['select' 't3' '.' 'name' 'from' 'phone_market' 'as' 't1' 'join' 'market'
 'as' 't2' 'on' 't1' '.' 'market_id' '=' 't2' '.' 'market_id' 'join'
 'phone' 'as' 't3' 'on' 't1' '.' 'phone_id' '=' 't3' '.' 'phone_id'
 'where' 't2' '.' 'num_of_shops' '>' 'value']","['Show' 'the' 'names' 'of' 'phones' 'that' 'are' 'on' 'market' 'with'
 'number' 'of' 'shops' 'greater' 'than' '50' '.']","['CREATE TABLE ""phone"" ( ""Name"" text, ""Phone_ID"" int, ""Memory_in_G"" int, ""Carrier"" text, ""Price"" real, PRIMARY KEY (""Phone_ID"") )', 'CREATE TABLE ""market"" ( ""Market_ID"" int, ""District"" text, ""Num_of_employees"" int, ""Num_of_shops"" real, ""Ranking"" int, PRIMARY KEY (""Market_ID"") )', 'CREATE TABLE ""phone_market"" ( ""Market_ID"" int, ""Phone_ID"" text, ""Num_of_stock"" int, PRIMARY KEY (""Market_ID"",""Phone_ID""), FOREIGN KEY (""Market_ID"") REFERENCES `market`(""Market_ID""), FOREIGN KEY (""Phone_ID"") REFERENCES `phone`(""Phone_ID"") )']"
983,university_basketball,SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1,Find the founded year of the newest non public school.,"['SELECT' 'founded' 'FROM' 'university' 'WHERE' 'affiliation' '!' '='
 ""'Public"" ""'"" 'ORDER' 'BY' 'founded' 'DESC' 'LIMIT' '1']","['select' 'founded' 'from' 'university' 'where' 'affiliation' '!' '='
 'value' 'order' 'by' 'founded' 'desc' 'limit' 'value']","['Find' 'the' 'founded' 'year' 'of' 'the' 'newest' 'non' 'public' 'school'
 '.']","['CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) )', 'CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") )']"
5182,music_2,"SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  ""Heilo""","Find all the songs performed by artist with last name ""Heilo""","['SELECT' 'T3.Title' 'FROM' 'Performance' 'AS' 'T1' 'JOIN' 'Band' 'AS'
 'T2' 'ON' 'T1.bandmate' '=' 'T2.id' 'JOIN' 'Songs' 'AS' 'T3' 'ON'
 'T3.SongId' '=' 'T1.SongId' 'WHERE' 'T2.Lastname' '=' '``' 'Heilo' ""''""]","['select' 't3' '.' 'title' 'from' 'performance' 'as' 't1' 'join' 'band'
 'as' 't2' 'on' 't1' '.' 'bandmate' '=' 't2' '.' 'id' 'join' 'songs' 'as'
 't3' 'on' 't3' '.' 'songid' '=' 't1' '.' 'songid' 'where' 't2' '.'
 'lastname' '=' 'value']","['Find' 'all' 'the' 'songs' 'performed' 'by' 'artist' 'with' 'last' 'name'
 '``' 'Heilo' ""''""]","['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
6148,music_4,SELECT avg(Age) FROM artist,Return the average age across all artists.,['SELECT' 'avg' '(' 'Age' ')' 'FROM' 'artist'],['select' 'avg' '(' 'age' ')' 'from' 'artist'],['Return' 'the' 'average' 'age' 'across' 'all' 'artists' '.'],"['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Artist"" text, ""Age"" int, ""Famous_Title"" text, ""Famous_Release_date"" text, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""volume"" ( ""Volume_ID"" int, ""Volume_Issue"" text, ""Issue_Date"" text, ""Weeks_on_Top"" real, ""Song"" text, ""Artist_ID"" int, PRIMARY KEY (""Volume_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""music_festival"" ( ""ID"" int, ""Music_Festival"" text, ""Date_of_ceremony"" text, ""Category"" text, ""Volume"" int, ""Result"" text, PRIMARY KEY (`ID`), FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`) )']"
6858,flight_4,SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*),What are the cities that have more than 2 airports sorted by number of airports?,"['SELECT' 'city' 'FROM' 'airports' 'GROUP' 'BY' 'city' 'HAVING' 'count'
 '(' '*' ')' '>' '2' 'ORDER' 'BY' 'count' '(' '*' ')']","['select' 'city' 'from' 'airports' 'group' 'by' 'city' 'having' 'count'
 '(' '*' ')' '>' 'value' 'order' 'by' 'count' '(' '*' ')']","['What' 'are' 'the' 'cities' 'that' 'have' 'more' 'than' '2' 'airports'
 'sorted' 'by' 'number' 'of' 'airports' '?']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
2323,perpetrator,SELECT max(YEAR) FROM perpetrator;,In which year did the most recent crime happen?,['SELECT' 'max' '(' 'YEAR' ')' 'FROM' 'perpetrator' ';'],['select' 'max' '(' 'year' ')' 'from' 'perpetrator'],['In' 'which' 'year' 'did' 'the' 'most' 'recent' 'crime' 'happen' '?'],"['CREATE TABLE ""perpetrator"" ( ""Perpetrator_ID"" int, ""People_ID"" int, ""Date"" text, ""Year"" real, ""Location"" text, ""Country"" text, ""Killed"" int, ""Injured"" int, PRIMARY KEY (""Perpetrator_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Home Town"" text, PRIMARY KEY (""People_ID"") )']"
3542,music_1,SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1,What are the names of the artists who sang the shortest song?,"['SELECT' 'T1.artist_name' 'FROM' 'song' 'AS' 'T1' 'JOIN' 'files' 'AS'
 'T2' 'ON' 'T1.f_id' '=' 'T2.f_id' 'ORDER' 'BY' 'T2.duration' 'LIMIT' '1']","['select' 't1' '.' 'artist_name' 'from' 'song' 'as' 't1' 'join' 'files'
 'as' 't2' 'on' 't1' '.' 'f_id' '=' 't2' '.' 'f_id' 'order' 'by' 't2' '.'
 'duration' 'limit' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'artists' 'who' 'sang' 'the'
 'shortest' 'song' '?']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
2195,formula_1,"SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.,"['SELECT' 'DISTINCT' 'driverid' ',' 'STOP' 'FROM' 'pitstops' 'WHERE'
 'duration' '<' '(' 'SELECT' 'max' '(' 'duration' ')' 'FROM' 'pitstops'
 'WHERE' 'raceid' '=' '841' ')']","['select' 'distinct' 'driverid' ',' 'stop' 'from' 'pitstops' 'where'
 'duration' '<' '(' 'select' 'max' '(' 'duration' ')' 'from' 'pitstops'
 'where' 'raceid' '=' 'value' ')']","['Find' 'the' 'distinct' 'driver' 'id' 'and' 'the' 'stop' 'number' 'of'
 'all' 'drivers' 'that' 'have' 'a' 'shorter' 'pit' 'stop' 'duration'
 'than' 'some' 'drivers' 'in' 'the' 'race' 'with' 'id' '841' '.']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
3450,hr_1,SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10,What are the department ids for which more than 10 employees had a commission?,"['SELECT' 'department_id' 'FROM' 'employees' 'GROUP' 'BY' 'department_id'
 'HAVING' 'COUNT' '(' 'commission_pct' ')' '>' '10']","['select' 'department_id' 'from' 'employees' 'group' 'by' 'department_id'
 'having' 'count' '(' 'commission_pct' ')' '>' 'value']","['What' 'are' 'the' 'department' 'ids' 'for' 'which' 'more' 'than' '10'
 'employees' 'had' 'a' 'commission' '?']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
1414,college_2,SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History',What is the id of the instructor who advises of all students from History department?,"['SELECT' 'i_id' 'FROM' 'advisor' 'AS' 'T1' 'JOIN' 'student' 'AS' 'T2'
 'ON' 'T1.s_id' '=' 'T2.id' 'WHERE' 'T2.dept_name' '=' ""'History"" ""'""]","['select' 'i_id' 'from' 'advisor' 'as' 't1' 'join' 'student' 'as' 't2'
 'on' 't1' '.' 's_id' '=' 't2' '.' 'id' 'where' 't2' '.' 'dept_name' '='
 'value']","['What' 'is' 'the' 'id' 'of' 'the' 'instructor' 'who' 'advises' 'of' 'all'
 'students' 'from' 'History' 'department' '?']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
3261,college_1,"SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",Find the first names and offices of all professors sorted by alphabetical order of their first name.,"['SELECT' 'T2.emp_fname' ',' 'T1.prof_office' 'FROM' 'professor' 'AS' 'T1'
 'JOIN' 'employee' 'AS' 'T2' 'ON' 'T1.emp_num' '=' 'T2.emp_num' 'ORDER'
 'BY' 'T2.emp_fname']","['select' 't2' '.' 'emp_fname' ',' 't1' '.' 'prof_office' 'from'
 'professor' 'as' 't1' 'join' 'employee' 'as' 't2' 'on' 't1' '.' 'emp_num'
 '=' 't2' '.' 'emp_num' 'order' 'by' 't2' '.' 'emp_fname']","['Find' 'the' 'first' 'names' 'and' 'offices' 'of' 'all' 'professors'
 'sorted' 'by' 'alphabetical' 'order' 'of' 'their' 'first' 'name' '.']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
1730,riding_club,"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",Show the names and genders of players with a coach starting after 2011.,"['SELECT' 'T3.Player_name' ',' 'T3.gender' 'FROM' 'player_coach' 'AS' 'T1'
 'JOIN' 'coach' 'AS' 'T2' 'ON' 'T1.Coach_ID' '=' 'T2.Coach_ID' 'JOIN'
 'player' 'AS' 'T3' 'ON' 'T1.Player_ID' '=' 'T3.Player_ID' 'WHERE'
 'T1.Starting_year' '>' '2011']","['select' 't3' '.' 'player_name' ',' 't3' '.' 'gender' 'from'
 'player_coach' 'as' 't1' 'join' 'coach' 'as' 't2' 'on' 't1' '.'
 'coach_id' '=' 't2' '.' 'coach_id' 'join' 'player' 'as' 't3' 'on' 't1'
 '.' 'player_id' '=' 't3' '.' 'player_id' 'where' 't1' '.' 'starting_year'
 '>' 'value']","['Show' 'the' 'names' 'and' 'genders' 'of' 'players' 'with' 'a' 'coach'
 'starting' 'after' '2011' '.']","['CREATE TABLE ""player"" ( ""Player_ID"" int, ""Sponsor_name"" text, ""Player_name"" text, ""Gender"" text, ""Residence"" text, ""Occupation"" text, ""Votes"" int, ""Rank"" text, PRIMARY KEY (""Player_ID"") )', 'CREATE TABLE ""club"" ( ""Club_ID"" int, ""Club_name"" text, ""Region"" text, ""Start_year"" int, PRIMARY KEY (""Club_ID"") )', 'CREATE TABLE ""coach"" ( ""Coach_ID"" int, ""Coach_name"" text, ""Gender"" text, ""Club_ID"" int, ""Rank"" int, PRIMARY KEY (""Coach_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""player_coach"" ( ""Player_ID"" int, ""Coach_ID"" int, ""Starting_year"" int, PRIMARY KEY (""Player_ID"",""Coach_ID""), FOREIGN KEY (`Player_ID`) REFERENCES `player`(`Player_ID`), FOREIGN KEY (`Coach_ID`) REFERENCES `coach`(`Coach_ID`) )', 'CREATE TABLE ""match_result"" ( ""Rank"" int, ""Club_ID"" int, ""Gold"" int, ""Big_Silver"" int, ""Small_Silver"" int, ""Bronze"" int, ""Points"" int, PRIMARY KEY (""Rank"",""Club_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )']"
5297,manufactory_1,"SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1","What are the names, headquarters and founders of the company with the highest revenue?","['SELECT' 'name' ',' 'headquarter' ',' 'founder' 'FROM' 'manufacturers'
 'ORDER' 'BY' 'revenue' 'DESC' 'LIMIT' '1']","['select' 'name' ',' 'headquarter' ',' 'founder' 'from' 'manufacturers'
 'order' 'by' 'revenue' 'desc' 'limit' 'value']","['What' 'are' 'the' 'names' ',' 'headquarters' 'and' 'founders' 'of' 'the'
 'company' 'with' 'the' 'highest' 'revenue' '?']","['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
757,race_track,"SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)","Show the name, location, open year for all tracks with a seating higher than the average.","['SELECT' 'name' ',' 'LOCATION' ',' 'year_opened' 'FROM' 'track' 'WHERE'
 'seating' '>' '(' 'SELECT' 'avg' '(' 'seating' ')' 'FROM' 'track' ')']","['select' 'name' ',' 'location' ',' 'year_opened' 'from' 'track' 'where'
 'seating' '>' '(' 'select' 'avg' '(' 'seating' ')' 'from' 'track' ')']","['Show' 'the' 'name' ',' 'location' ',' 'open' 'year' 'for' 'all' 'tracks'
 'with' 'a' 'seating' 'higher' 'than' 'the' 'average' '.']","['CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") )', 'CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") )']"
5751,dorm_1,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall',What are the names of the amenities that Smith Hall has?,"['SELECT' 'T3.amenity_name' 'FROM' 'dorm' 'AS' 'T1' 'JOIN' 'has_amenity'
 'AS' 'T2' 'ON' 'T1.dormid' '=' 'T2.dormid' 'JOIN' 'dorm_amenity' 'AS'
 'T3' 'ON' 'T2.amenid' '=' 'T3.amenid' 'WHERE' 'T1.dorm_name' '=' ""'Smith""
 'Hall' ""'""]","['select' 't3' '.' 'amenity_name' 'from' 'dorm' 'as' 't1' 'join'
 'has_amenity' 'as' 't2' 'on' 't1' '.' 'dormid' '=' 't2' '.' 'dormid'
 'join' 'dorm_amenity' 'as' 't3' 'on' 't2' '.' 'amenid' '=' 't3' '.'
 'amenid' 'where' 't1' '.' 'dorm_name' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'amenities' 'that' 'Smith' 'Hall'
 'has' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
487,allergy_1,SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student),Show the student id of the oldest student.,"['SELECT' 'StuID' 'FROM' 'Student' 'WHERE' 'age' '=' '(' 'SELECT' 'max'
 '(' 'age' ')' 'FROM' 'Student' ')']","['select' 'stuid' 'from' 'student' 'where' 'age' '=' '(' 'select' 'max'
 '(' 'age' ')' 'from' 'student' ')']",['Show' 'the' 'student' 'id' 'of' 'the' 'oldest' 'student' '.'],"['CREATE TABLE Allergy_Type ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) )', 'CREATE TABLE Has_Allergy ( StuID INTEGER, Allergy VARCHAR(20), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )']"
4781,department_store,"SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code","What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?","['SELECT' 'max' '(' 'product_price' ')' ',' 'min' '(' 'product_price' ')'
 ',' 'product_type_code' 'FROM' 'products' 'GROUP' 'BY'
 'product_type_code' 'ORDER' 'BY' 'product_type_code']","['select' 'max' '(' 'product_price' ')' ',' 'min' '(' 'product_price' ')'
 ',' 'product_type_code' 'from' 'products' 'group' 'by'
 'product_type_code' 'order' 'by' 'product_type_code']","['What' 'are' 'the' 'highest' 'and' 'lowest' 'prices' 'of' 'products' ','
 'grouped' 'by' 'and' 'alphabetically' 'ordered' 'by' 'product' 'type' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) )', 'CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) )', 'CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) )', 'CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
621,store_1,"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"";",What is the name of tracks whose genre is Rock?,"['SELECT' 'T2.name' 'FROM' 'genres' 'AS' 'T1' 'JOIN' 'tracks' 'AS' 'T2'
 'ON' 'T1.id' '=' 'T2.genre_id' 'WHERE' 'T1.name' '=' '``' 'Rock' ""''"" ';']","['select' 't2' '.' 'name' 'from' 'genres' 'as' 't1' 'join' 'tracks' 'as'
 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'genre_id' 'where' 't1' '.' 'name'
 '=' 'value']",['What' 'is' 'the' 'name' 'of' 'tracks' 'whose' 'genre' 'is' 'Rock' '?'],"['CREATE TABLE artists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE sqlite_sequence(name,seq)', 'CREATE TABLE albums ( id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(160) NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE employees ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(20) NOT NULL, first_name VARCHAR(20) NOT NULL, title VARCHAR(30), reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), FOREIGN KEY (reports_to) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE customers ( id INTEGER PRIMARY KEY AUTOINCREMENT, first_name VARCHAR(40) NOT NULL, last_name VARCHAR(20) NOT NULL, company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE genres ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE invoices ( id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE media_types ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE tracks ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(200) NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR(220), milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE invoice_lines ( id INTEGER PRIMARY KEY AUTOINCREMENT, invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE playlists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE playlist_tracks ( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
6297,city_record,SELECT city FROM city WHERE regional_population  >  10000000,Which cities have regional population above 10000000?,"['SELECT' 'city' 'FROM' 'city' 'WHERE' 'regional_population' '>'
 '10000000']",['select' 'city' 'from' 'city' 'where' 'regional_population' '>' 'value'],['Which' 'cities' 'have' 'regional' 'population' 'above' '10000000' '?'],"['CREATE TABLE ""city"" ( ""City_ID"" int, ""City"" text, ""Hanzi"" text, ""Hanyu_Pinyin"" text, ""Regional_Population"" int, ""GDP"" real, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""match"" ( ""Match_ID"" int, ""Date"" text, ""Venue"" text, ""Score"" text, ""Result"" text, ""Competition"" text, PRIMARY KEY (""Match_ID"") )', 'CREATE TABLE ""temperature"" ( ""City_ID"" int, ""Jan"" real, ""Feb"" real, ""Mar"" real, ""Apr"" real, ""Jun"" real, ""Jul"" real, ""Aug"" real, ""Sep"" real, ""Oct"" real, ""Nov"" real, ""Dec"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (`City_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""hosting_city"" ( ""Year"" int, ""Match_ID"" int, ""Host_City"" text, PRIMARY KEY (""Year""), FOREIGN KEY (`Host_City`) REFERENCES `city`(`City_ID`), FOREIGN KEY (`Match_ID`) REFERENCES `match`(`Match_ID`) )']"
3619,music_1,"SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  ""bangla"" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",Find the top 3 artists who have the largest number of songs works whose language is Bangla.,"['SELECT' 'T1.artist_name' 'FROM' 'artist' 'AS' 'T1' 'JOIN' 'song' 'AS'
 'T2' 'ON' 'T1.artist_name' '=' 'T2.artist_name' 'WHERE' 'T2.languages'
 '=' '``' 'bangla' ""''"" 'GROUP' 'BY' 'T2.artist_name' 'ORDER' 'BY' 'count'
 '(' '*' ')' 'DESC' 'LIMIT' '3']","['select' 't1' '.' 'artist_name' 'from' 'artist' 'as' 't1' 'join' 'song'
 'as' 't2' 'on' 't1' '.' 'artist_name' '=' 't2' '.' 'artist_name' 'where'
 't2' '.' 'languages' '=' 'value' 'group' 'by' 't2' '.' 'artist_name'
 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Find' 'the' 'top' '3' 'artists' 'who' 'have' 'the' 'largest' 'number'
 'of' 'songs' 'works' 'whose' 'language' 'is' 'Bangla' '.']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
3323,college_1,"SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.,"['SELECT' 'DISTINCT' 'T2.emp_fname' ',' 'T3.prof_high_degree' 'FROM'
 'CLASS' 'AS' 'T1' 'JOIN' 'employee' 'AS' 'T2' 'ON' 'T1.prof_num' '='
 'T2.emp_num' 'JOIN' 'professor' 'AS' 'T3' 'ON' 'T2.emp_num' '='
 'T3.emp_num' 'JOIN' 'department' 'AS' 'T4' 'ON' 'T4.dept_code' '='
 'T3.dept_code' 'WHERE' 'T4.dept_name' '=' ""'Computer"" 'Info' '.'
 'Systems' ""'""]","['select' 'distinct' 't2' '.' 'emp_fname' ',' 't3' '.' 'prof_high_degree'
 'from' 'class' 'as' 't1' 'join' 'employee' 'as' 't2' 'on' 't1' '.'
 'prof_num' '=' 't2' '.' 'emp_num' 'join' 'professor' 'as' 't3' 'on' 't2'
 '.' 'emp_num' '=' 't3' '.' 'emp_num' 'join' 'department' 'as' 't4' 'on'
 't4' '.' 'dept_code' '=' 't3' '.' 'dept_code' 'where' 't4' '.'
 'dept_name' '=' 'value']","['Find' 'the' 'first' 'names' 'and' 'degree' 'of' 'all' 'professors' 'who'
 'are' 'teaching' 'some' 'class' 'in' 'Computer' 'Info' '.' 'Systems'
 'department' '.']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
3628,music_1,"SELECT DISTINCT artist_name FROM artist WHERE country  =  ""Bangladesh"" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",What are the names of the different artists from Bangladesh who never received a rating higher than a 7?,"['SELECT' 'DISTINCT' 'artist_name' 'FROM' 'artist' 'WHERE' 'country' '='
 '``' 'Bangladesh' ""''"" 'EXCEPT' 'SELECT' 'DISTINCT' 'artist_name' 'FROM'
 'song' 'WHERE' 'rating' '>' '7']","['select' 'distinct' 'artist_name' 'from' 'artist' 'where' 'country' '='
 'value' 'except' 'select' 'distinct' 'artist_name' 'from' 'song' 'where'
 'rating' '>' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'different' 'artists' 'from'
 'Bangladesh' 'who' 'never' 'received' 'a' 'rating' 'higher' 'than' 'a'
 '7' '?']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
860,chinook_1,"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  ""Brazil""",What are the different first names for customers from Brazil who have also had an invoice?,"['SELECT' 'DISTINCT' 'T1.FirstName' 'FROM' 'CUSTOMER' 'AS' 'T1' 'JOIN'
 'INVOICE' 'AS' 'T2' 'ON' 'T1.CustomerId' '=' 'T2.CustomerId' 'WHERE'
 'T1.country' '=' '``' 'Brazil' ""''""]","['select' 'distinct' 't1' '.' 'firstname' 'from' 'customer' 'as' 't1'
 'join' 'invoice' 'as' 't2' 'on' 't1' '.' 'customerid' '=' 't2' '.'
 'customerid' 'where' 't1' '.' 'country' '=' 'value']","['What' 'are' 'the' 'different' 'first' 'names' 'for' 'customers' 'from'
 'Brazil' 'who' 'have' 'also' 'had' 'an' 'invoice' '?']","['CREATE TABLE `Album` ( `AlbumId` integer NOT NULL , `Title` varchar(160) NOT NULL , `ArtistId` integer NOT NULL , PRIMARY KEY (`AlbumId`) , CONSTRAINT `FK_AlbumArtistId` FOREIGN KEY (`ArtistId`) REFERENCES `Artist` (`ArtistId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Artist` ( `ArtistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`ArtistId`) )', 'CREATE TABLE `Customer` ( `CustomerId` integer NOT NULL , `FirstName` varchar(40) NOT NULL , `LastName` varchar(20) NOT NULL , `Company` varchar(80) DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) NOT NULL , `SupportRepId` integer DEFAULT NULL , PRIMARY KEY (`CustomerId`) , CONSTRAINT `FK_CustomerSupportRepId` FOREIGN KEY (`SupportRepId`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Employee` ( `EmployeeId` integer NOT NULL , `LastName` varchar(20) NOT NULL , `FirstName` varchar(20) NOT NULL , `Title` varchar(30) DEFAULT NULL , `ReportsTo` integer DEFAULT NULL , `BirthDate` datetime DEFAULT NULL , `HireDate` datetime DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) DEFAULT NULL , PRIMARY KEY (`EmployeeId`) , CONSTRAINT `FK_EmployeeReportsTo` FOREIGN KEY (`ReportsTo`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Genre` ( `GenreId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`GenreId`) )', 'CREATE TABLE `Invoice` ( `InvoiceId` integer NOT NULL , `CustomerId` integer NOT NULL , `InvoiceDate` datetime NOT NULL , `BillingAddress` varchar(70) DEFAULT NULL , `BillingCity` varchar(40) DEFAULT NULL , `BillingState` varchar(40) DEFAULT NULL , `BillingCountry` varchar(40) DEFAULT NULL , `BillingPostalCode` varchar(10) DEFAULT NULL , `Total` decimal(10,2) NOT NULL , PRIMARY KEY (`InvoiceId`) , CONSTRAINT `FK_InvoiceCustomerId` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `InvoiceLine` ( `InvoiceLineId` integer NOT NULL , `InvoiceId` integer NOT NULL , `TrackId` integer NOT NULL , `UnitPrice` decimal(10,2) NOT NULL , `Quantity` integer NOT NULL , PRIMARY KEY (`InvoiceLineId`) , CONSTRAINT `FK_InvoiceLineInvoiceId` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_InvoiceLineTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `MediaType` ( `MediaTypeId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`MediaTypeId`) )', 'CREATE TABLE `Playlist` ( `PlaylistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`PlaylistId`) )', 'CREATE TABLE `PlaylistTrack` ( `PlaylistId` integer NOT NULL , `TrackId` integer NOT NULL , PRIMARY KEY (`PlaylistId`,`TrackId`) , CONSTRAINT `FK_PlaylistTrackPlaylistId` FOREIGN KEY (`PlaylistId`) REFERENCES `Playlist` (`PlaylistId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_PlaylistTrackTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Track` ( `TrackId` integer NOT NULL , `Name` varchar(200) NOT NULL , `AlbumId` integer DEFAULT NULL , `MediaTypeId` integer NOT NULL , `GenreId` integer DEFAULT NULL , `Composer` varchar(220) DEFAULT NULL , `Milliseconds` integer NOT NULL , `Bytes` integer DEFAULT NULL , `UnitPrice` decimal(10,2) NOT NULL , PRIMARY KEY (`TrackId`) , CONSTRAINT `FK_TrackAlbumId` FOREIGN KEY (`AlbumId`) REFERENCES `Album` (`AlbumId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackGenreId` FOREIGN KEY (`GenreId`) REFERENCES `Genre` (`GenreId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackMediaTypeId` FOREIGN KEY (`MediaTypeId`) REFERENCES `MediaType` (`MediaTypeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
1478,college_2,SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010,Find courses that ran in Fall 2009 and in Spring 2010.,"['SELECT' 'course_id' 'FROM' 'SECTION' 'WHERE' 'semester' '=' ""'Fall"" ""'""
 'AND' 'YEAR' '=' '2009' 'INTERSECT' 'SELECT' 'course_id' 'FROM' 'SECTION'
 'WHERE' 'semester' '=' ""'Spring"" ""'"" 'AND' 'YEAR' '=' '2010']","['select' 'course_id' 'from' 'section' 'where' 'semester' '=' 'value'
 'and' 'year' '=' 'value' 'intersect' 'select' 'course_id' 'from'
 'section' 'where' 'semester' '=' 'value' 'and' 'year' '=' 'value']","['Find' 'courses' 'that' 'ran' 'in' 'Fall' '2009' 'and' 'in' 'Spring'
 '2010' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
6271,city_record,"SELECT match_id FROM MATCH WHERE competition = ""1994 FIFA World Cup qualification""","What is the match id of the competition called ""1994 FIFA World Cup qualification""?","['SELECT' 'match_id' 'FROM' 'MATCH' 'WHERE' 'competition' '=' '``' '1994'
 'FIFA' 'World' 'Cup' 'qualification' ""''""]",['select' 'match_id' 'from' 'match' 'where' 'competition' '=' 'value'],"['What' 'is' 'the' 'match' 'id' 'of' 'the' 'competition' 'called' '``'
 '1994' 'FIFA' 'World' 'Cup' 'qualification' ""''"" '?']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""City"" text, ""Hanzi"" text, ""Hanyu_Pinyin"" text, ""Regional_Population"" int, ""GDP"" real, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""match"" ( ""Match_ID"" int, ""Date"" text, ""Venue"" text, ""Score"" text, ""Result"" text, ""Competition"" text, PRIMARY KEY (""Match_ID"") )', 'CREATE TABLE ""temperature"" ( ""City_ID"" int, ""Jan"" real, ""Feb"" real, ""Mar"" real, ""Apr"" real, ""Jun"" real, ""Jul"" real, ""Aug"" real, ""Sep"" real, ""Oct"" real, ""Nov"" real, ""Dec"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (`City_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""hosting_city"" ( ""Year"" int, ""Match_ID"" int, ""Host_City"" text, PRIMARY KEY (""Year""), FOREIGN KEY (`Host_City`) REFERENCES `city`(`City_ID`), FOREIGN KEY (`Match_ID`) REFERENCES `match`(`Match_ID`) )']"
5322,manufactory_1,SELECT Name FROM Products,Select the names of all the products in the store.,['SELECT' 'Name' 'FROM' 'Products'],['select' 'name' 'from' 'products'],['Select' 'the' 'names' 'of' 'all' 'the' 'products' 'in' 'the' 'store' '.'],"['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
1597,customers_and_invoices,SELECT DISTINCT product_color FROM Products,Show all product colors.,['SELECT' 'DISTINCT' 'product_color' 'FROM' 'Products'],['select' 'distinct' 'product_color' 'from' 'products'],['Show' 'all' 'product' 'colors' '.'],"['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
2862,icfp_1,SELECT count(*) FROM papers,How many papers are published in total?,['SELECT' 'count' '(' '*' ')' 'FROM' 'papers'],['select' 'count' '(' '*' ')' 'from' 'papers'],['How' 'many' 'papers' 'are' 'published' 'in' 'total' '?'],"['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
684,customers_card_transactions,SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts),How many customers do not have an account?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'Customers' 'WHERE' 'customer_id'
 'NOT' 'IN' '(' 'SELECT' 'customer_id' 'FROM' 'Accounts' ')']","['select' 'count' '(' '*' ')' 'from' 'customers' 'where' 'customer_id'
 'not' 'in' '(' 'select' 'customer_id' 'from' 'accounts' ')']",['How' 'many' 'customers' 'do' 'not' 'have' 'an' 'account' '?'],"['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
212,bike_1,"SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",What is the average latitude and longitude of all starting stations for the trips?,"['SELECT' 'avg' '(' 'T1.lat' ')' ',' 'avg' '(' 'T1.long' ')' 'FROM'
 'station' 'AS' 'T1' 'JOIN' 'trip' 'AS' 'T2' 'ON' 'T1.id' '='
 'T2.start_station_id']","['select' 'avg' '(' 't1' '.' 'lat' ')' ',' 'avg' '(' 't1' '.' 'long' ')'
 'from' 'station' 'as' 't1' 'join' 'trip' 'as' 't2' 'on' 't1' '.' 'id' '='
 't2' '.' 'start_station_id']","['What' 'is' 'the' 'average' 'latitude' 'and' 'longitude' 'of' 'all'
 'starting' 'stations' 'for' 'the' 'trips' '?']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
5197,music_2,SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1,What is the last name of the musician who was in the most songs?,"['SELECT' 'T2.lastname' 'FROM' 'Performance' 'AS' 'T1' 'JOIN' 'Band' 'AS'
 'T2' 'ON' 'T1.bandmate' '=' 'T2.id' 'JOIN' 'Songs' 'AS' 'T3' 'ON'
 'T3.SongId' '=' 'T1.SongId' 'GROUP' 'BY' 'lastname' 'ORDER' 'BY' 'count'
 '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'lastname' 'from' 'performance' 'as' 't1' 'join' 'band'
 'as' 't2' 'on' 't1' '.' 'bandmate' '=' 't2' '.' 'id' 'join' 'songs' 'as'
 't3' 'on' 't3' '.' 'songid' '=' 't1' '.' 'songid' 'group' 'by' 'lastname'
 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'last' 'name' 'of' 'the' 'musician' 'who' 'was' 'in'
 'the' 'most' 'songs' '?']","['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
1164,body_builder,SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1,What is the most common birth place of people?,"['SELECT' 'Birth_Place' 'FROM' 'people' 'GROUP' 'BY' 'Birth_Place' 'ORDER'
 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'birth_place' 'from' 'people' 'group' 'by' 'birth_place' 'order'
 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']",['What' 'is' 'the' 'most' 'common' 'birth' 'place' 'of' 'people' '?'],"['CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") )']"
2327,csu_1,"SELECT campus FROM campuses WHERE LOCATION  =  ""Chico""",What campuses are located in Chico?,"['SELECT' 'campus' 'FROM' 'campuses' 'WHERE' 'LOCATION' '=' '``' 'Chico'
 ""''""]",['select' 'campus' 'from' 'campuses' 'where' 'location' '=' 'value'],['What' 'campuses' 'are' 'located' 'in' 'Chico' '?'],"['CREATE TABLE ""Campuses"" ( ""Id"" INTEGER PRIMARY KEY, ""Campus"" TEXT, ""Location"" TEXT, ""County"" TEXT, ""Year"" INTEGER )', 'CREATE TABLE ""csu_fees"" ( ""Campus"" INTEGER PRIMARY KEY, ""Year"" INTEGER, ""CampusFee"" INTEGER, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""degrees"" ( ""Year"" INTEGER, ""Campus"" INTEGER, ""Degrees"" INTEGER, PRIMARY KEY (Year, Campus), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""discipline_enrollments"" ( ""Campus"" INTEGER, ""Discipline"" INTEGER, ""Year"" INTEGER, ""Undergraduate"" INTEGER, ""Graduate"" INTEGER, PRIMARY KEY (Campus, Discipline), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""enrollments"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""TotalEnrollment_AY"" INTEGER, ""FTE_AY"" INTEGER, PRIMARY KEY(Campus, Year), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""faculty"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""Faculty"" REAL, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )']"
5785,customer_complaints,SELECT phone_number FROM customers UNION SELECT phone_number FROM staff,What are the phone numbers of all customers and all staff members?,"['SELECT' 'phone_number' 'FROM' 'customers' 'UNION' 'SELECT'
 'phone_number' 'FROM' 'staff']","['select' 'phone_number' 'from' 'customers' 'union' 'select'
 'phone_number' 'from' 'staff']","['What' 'are' 'the' 'phone' 'numbers' 'of' 'all' 'customers' 'and' 'all'
 'staff' 'members' '?']","['CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_type_code` VARCHAR(20) NOT NULL, `address_line_1` VARCHAR(80), `address_line_2` VARCHAR(80), `town_city` VARCHAR(80), `state` VARCHAR(80), `email_address` VARCHAR(255), `phone_number` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `product_category_code` VARCHAR(20) NOT NULL, `date_product_first_available` DATETIME, `date_product_discontinued` DATETIME, `product_name` VARCHAR(80), `product_description` VARCHAR(255), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Complaints` ( `complaint_id` INTEGER NOT NULL , `product_id` INTEGER NOT NULL, `customer_id` INTEGER NOT NULL, `complaint_outcome_code` VARCHAR(20) NOT NULL, `complaint_status_code` VARCHAR(20) NOT NULL, `complaint_type_code` VARCHAR(20) NOT NULL, `date_complaint_raised` DATETIME, `date_complaint_closed` DATETIME, `staff_id` INTEGER NOT NULL , FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
2590,inn_1,"SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",List the names and decor of rooms that have a king bed. Sort the list by their price.,"['SELECT' 'roomName' ',' 'decor' 'FROM' 'Rooms' 'WHERE' 'bedtype' '='
 ""'King"" ""'"" 'ORDER' 'BY' 'basePrice' ';']","['select' 'roomname' ',' 'decor' 'from' 'rooms' 'where' 'bedtype' '='
 'value' 'order' 'by' 'baseprice']","['List' 'the' 'names' 'and' 'decor' 'of' 'rooms' 'that' 'have' 'a' 'king'
 'bed' '.' 'Sort' 'the' 'list' 'by' 'their' 'price' '.']","['CREATE TABLE ""Rooms"" ( \t""RoomId"" TEXT PRIMARY KEY,\t""roomName"" TEXT, \t""beds"" INTEGER, \t""bedType"" TEXT, \t""maxOccupancy"" INTEGER, \t""basePrice"" INTEGER, \t""decor"" TEXT);', 'CREATE TABLE ""Reservations"" ( \t""Code"" INTEGER PRIMARY KEY, \t""Room"" TEXT, \t""CheckIn"" TEXT, \t""CheckOut"" TEXT, \t""Rate"" REAL, \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Adults"" INTEGER, \t""Kids"" INTEGER,\tFOREIGN KEY (Room) REFERENCES Rooms(RoomId));']"
5141,cre_Drama_Workshop_Groups,"SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  ""photo""","Compute the total order quantities of the product ""photo"".","['SELECT' 'sum' '(' 'T1.Order_Quantity' ')' 'FROM' 'ORDER_ITEMS' 'AS' 'T1'
 'JOIN' 'Products' 'AS' 'T2' 'ON' 'T1.Product_ID' '=' 'T2.Product_ID'
 'WHERE' 'T2.Product_Name' '=' '``' 'photo' ""''""]","['select' 'sum' '(' 't1' '.' 'order_quantity' ')' 'from' 'order_items'
 'as' 't1' 'join' 'products' 'as' 't2' 'on' 't1' '.' 'product_id' '=' 't2'
 '.' 'product_id' 'where' 't2' '.' 'product_name' '=' 'value']","['Compute' 'the' 'total' 'order' 'quantities' 'of' 'the' 'product' '``'
 'photo' ""''"" '.']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
5402,shop_membership,"SELECT name ,  address_road ,  city FROM branch ORDER BY open_year","Show name, address road, and city for all branches sorted by open year.","['SELECT' 'name' ',' 'address_road' ',' 'city' 'FROM' 'branch' 'ORDER'
 'BY' 'open_year']","['select' 'name' ',' 'address_road' ',' 'city' 'from' 'branch' 'order'
 'by' 'open_year']","['Show' 'name' ',' 'address' 'road' ',' 'and' 'city' 'for' 'all'
 'branches' 'sorted' 'by' 'open' 'year' '.']","['CREATE TABLE ""member"" ( ""Member_ID"" int, ""Card_Number"" text, ""Name"" text, ""Hometown"" text, ""Level"" int, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""branch"" ( ""Branch_ID"" int, ""Name"" text, ""Open_year"" text, ""Address_road"" text, ""City"" text, ""membership_amount"" text, PRIMARY KEY (""Branch_ID"") )', 'CREATE TABLE ""membership_register_branch"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Register_Year"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") )', 'CREATE TABLE ""purchase"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Year"" text, ""Total_pounds"" real, PRIMARY KEY (""Member_ID"",""Branch_ID"",""Year""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") )']"
4882,school_player,SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1,Show the denomination of the school that has the most players.,"['SELECT' 'T2.Denomination' 'FROM' 'player' 'AS' 'T1' 'JOIN' 'school' 'AS'
 'T2' 'ON' 'T1.School_ID' '=' 'T2.School_ID' 'GROUP' 'BY' 'T1.School_ID'
 'ORDER' 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'denomination' 'from' 'player' 'as' 't1' 'join'
 'school' 'as' 't2' 'on' 't1' '.' 'school_id' '=' 't2' '.' 'school_id'
 'group' 'by' 't1' '.' 'school_id' 'order' 'by' 'count' '(' '*' ')' 'desc'
 'limit' 'value']","['Show' 'the' 'denomination' 'of' 'the' 'school' 'that' 'has' 'the' 'most'
 'players' '.']","['CREATE TABLE ""school"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Enrollment"" real, ""Founded"" real, ""Denomination"" text, ""Boys_or_Girls"" text, ""Day_or_Boarding"" text, ""Year_Entered_Competition"" real, ""School_Colors"" text, PRIMARY KEY (""School_Id"") )', 'CREATE TABLE ""school_details"" ( ""School_ID"" int, ""Nickname"" text, ""Colors"" text, ""League"" text, ""Class"" text, ""Division"" text, PRIMARY KEY (""School_Id""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""school_performance"" ( ""School_Id"" int, ""School_Year"" text, ""Class_A"" text, ""Class_AA"" text, PRIMARY KEY (""School_Id"",""School_Year""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Team"" text, ""Age"" int, ""Position"" text, ""School_ID"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )']"
4040,student_1,SELECT DISTINCT grade FROM list WHERE classroom  =  105,Find the grade studying in room 105.,['SELECT' 'DISTINCT' 'grade' 'FROM' 'list' 'WHERE' 'classroom' '=' '105'],['select' 'distinct' 'grade' 'from' 'list' 'where' 'classroom' '=' 'value'],['Find' 'the' 'grade' 'studying' 'in' 'room' '105' '.'],"['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
6133,customers_and_addresses,"SELECT address_content FROM addresses WHERE city  =  ""East Julianaside"" AND state_province_county  =  ""Texas"" UNION SELECT address_content FROM addresses WHERE city  =  ""Gleasonmouth"" AND state_province_county  =  ""Arizona""","Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.","['SELECT' 'address_content' 'FROM' 'addresses' 'WHERE' 'city' '=' '``'
 'East' 'Julianaside' ""''"" 'AND' 'state_province_county' '=' '``' 'Texas'
 ""''"" 'UNION' 'SELECT' 'address_content' 'FROM' 'addresses' 'WHERE' 'city'
 '=' '``' 'Gleasonmouth' ""''"" 'AND' 'state_province_county' '=' '``'
 'Arizona' ""''""]","['select' 'address_content' 'from' 'addresses' 'where' 'city' '=' 'value'
 'and' 'state_province_county' '=' 'value' 'union' 'select'
 'address_content' 'from' 'addresses' 'where' 'city' '=' 'value' 'and'
 'state_province_county' '=' 'value']","['Find' 'all' 'the' 'addresses' 'in' 'East' 'Julianaside' ',' 'Texas' 'or'
 'in' 'Gleasonmouth' ',' 'Arizona' '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
895,insurance_fnol,SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1,Which policy type has the most records in the database?,"['SELECT' 'policy_type_code' 'FROM' 'available_policies' 'GROUP' 'BY'
 'policy_type_code' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'policy_type_code' 'from' 'available_policies' 'group' 'by'
 'policy_type_code' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit'
 'value']","['Which' 'policy' 'type' 'has' 'the' 'most' 'records' 'in' 'the'
 'database' '?']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) )', 'CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) )', 'CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) )', 'CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )']"
4845,local_govt_and_lot,"SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC","How many services has each resident requested? List the resident id, details, and the count in descending order of the count.","['SELECT' 'T1.resident_id' ',' 'T1.other_details' ',' 'count' '(' '*' ')'
 'FROM' 'Residents' 'AS' 'T1' 'JOIN' 'Residents_Services' 'AS' 'T2' 'ON'
 'T1.resident_id' '=' 'T2.resident_id' 'GROUP' 'BY' 'T1.resident_id'
 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC']","['select' 't1' '.' 'resident_id' ',' 't1' '.' 'other_details' ',' 'count'
 '(' '*' ')' 'from' 'residents' 'as' 't1' 'join' 'residents_services' 'as'
 't2' 'on' 't1' '.' 'resident_id' '=' 't2' '.' 'resident_id' 'group' 'by'
 't1' '.' 'resident_id' 'order' 'by' 'count' '(' '*' ')' 'desc']","['How' 'many' 'services' 'has' 'each' 'resident' 'requested' '?' 'List'
 'the' 'resident' 'id' ',' 'details' ',' 'and' 'the' 'count' 'in'
 'descending' 'order' 'of' 'the' 'count' '.']","['CREATE TABLE Customers ( customer_id INTEGER NOT NULL, customer_details VARCHAR(255), PRIMARY KEY (customer_id) )', 'CREATE TABLE Properties ( property_id INTEGER NOT NULL, property_type_code CHAR(15) NOT NULL, property_address VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (property_id) )', 'CREATE TABLE Residents ( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR(255), PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES Properties (property_id) )', 'CREATE TABLE Organizations ( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR(255), PRIMARY KEY (organization_id) )', 'CREATE TABLE Services ( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) )', 'CREATE TABLE Residents_Services ( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255), PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) )', 'CREATE TABLE Things ( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code CHAR(15) NOT NULL, service_type_code CHAR(10) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) )', 'CREATE TABLE Customer_Events ( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES Things (thing_id), FOREIGN KEY (customer_id) REFERENCES Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) )', 'CREATE TABLE Customer_Event_Notes ( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID) )', 'CREATE TABLE Timed_Status_of_Things ( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id) )', 'CREATE TABLE Timed_Locations_of_Things ( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id))']"
2867,icfp_1,"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Aaron"" AND t1.lname  =  ""Turon""","Find the titles of all the papers written by ""Aaron Turon"".","['SELECT' 't3.title' 'FROM' 'authors' 'AS' 't1' 'JOIN' 'authorship' 'AS'
 't2' 'ON' 't1.authid' '=' 't2.authid' 'JOIN' 'papers' 'AS' 't3' 'ON'
 't2.paperid' '=' 't3.paperid' 'WHERE' 't1.fname' '=' '``' 'Aaron' ""''""
 'AND' 't1.lname' '=' '``' 'Turon' ""''""]","['select' 't3' '.' 'title' 'from' 'authors' 'as' 't1' 'join' 'authorship'
 'as' 't2' 'on' 't1' '.' 'authid' '=' 't2' '.' 'authid' 'join' 'papers'
 'as' 't3' 'on' 't2' '.' 'paperid' '=' 't3' '.' 'paperid' 'where' 't1' '.'
 'fname' '=' 'value' 'and' 't1' '.' 'lname' '=' 'value']","['Find' 'the' 'titles' 'of' 'all' 'the' 'papers' 'written' 'by' '``'
 'Aaron' 'Turon' ""''"" '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
2477,movie_1,SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind',What are the names of all the different reviewers who rates Gone with the Wind?,"['SELECT' 'DISTINCT' 'T3.name' 'FROM' 'Rating' 'AS' 'T1' 'JOIN' 'Movie'
 'AS' 'T2' 'ON' 'T1.mID' '=' 'T2.mID' 'JOIN' 'Reviewer' 'AS' 'T3' 'ON'
 'T1.rID' '=' 'T3.rID' 'WHERE' 'T2.title' '=' ""'Gone"" 'with' 'the' 'Wind'
 ""'""]","['select' 'distinct' 't3' '.' 'name' 'from' 'rating' 'as' 't1' 'join'
 'movie' 'as' 't2' 'on' 't1' '.' 'mid' '=' 't2' '.' 'mid' 'join'
 'reviewer' 'as' 't3' 'on' 't1' '.' 'rid' '=' 't3' '.' 'rid' 'where' 't2'
 '.' 'title' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'all' 'the' 'different' 'reviewers' 'who'
 'rates' 'Gone' 'with' 'the' 'Wind' '?']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
1397,college_2,SELECT title FROM course GROUP BY title HAVING count(*)  >  1,What are the titles of courses that are offered in more than one department?,"['SELECT' 'title' 'FROM' 'course' 'GROUP' 'BY' 'title' 'HAVING' 'count'
 '(' '*' ')' '>' '1']","['select' 'title' 'from' 'course' 'group' 'by' 'title' 'having' 'count'
 '(' '*' ')' '>' 'value']","['What' 'are' 'the' 'titles' 'of' 'courses' 'that' 'are' 'offered' 'in'
 'more' 'than' 'one' 'department' '?']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
1781,small_bank_1,SELECT sum(balance) FROM checking,Find the total balance across checking accounts.,['SELECT' 'sum' '(' 'balance' ')' 'FROM' 'checking'],['select' 'sum' '(' 'balance' ')' 'from' 'checking'],['Find' 'the' 'total' 'balance' 'across' 'checking' 'accounts' '.'],"['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
24,farm,SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000,What is the average number of working horses of farms with more than 5000 total number of horses?,"['SELECT' 'avg' '(' 'Working_Horses' ')' 'FROM' 'farm' 'WHERE'
 'Total_Horses' '>' '5000']","['select' 'avg' '(' 'working_horses' ')' 'from' 'farm' 'where'
 'total_horses' '>' 'value']","['What' 'is' 'the' 'average' 'number' 'of' 'working' 'horses' 'of' 'farms'
 'with' 'more' 'than' '5000' 'total' 'number' 'of' 'horses' '?']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""Official_Name"" text, ""Status"" text, ""Area_km_2"" real, ""Population"" real, ""Census_Ranking"" text, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""farm"" ( ""Farm_ID"" int, ""Year"" int, ""Total_Horses"" real, ""Working_Horses"" real, ""Total_Cattle"" real, ""Oxen"" real, ""Bulls"" real, ""Cows"" real, ""Pigs"" real, ""Sheep_and_Goats"" real, PRIMARY KEY (""Farm_ID"") )', 'CREATE TABLE ""farm_competition"" ( ""Competition_ID"" int, ""Year"" int, ""Theme"" text, ""Host_city_ID"" int, ""Hosts"" text, PRIMARY KEY (""Competition_ID""), FOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""competition_record"" ( ""Competition_ID"" int, ""Farm_ID"" int, ""Rank"" int, PRIMARY KEY (""Competition_ID"",""Farm_ID""), FOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`), FOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`) )']"
1821,small_bank_1,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance,What are the names of customers with a higher checking balance than savings balance?,"['SELECT' 'T1.name' 'FROM' 'accounts' 'AS' 'T1' 'JOIN' 'checking' 'AS'
 'T2' 'ON' 'T1.custid' '=' 'T2.custid' 'JOIN' 'savings' 'AS' 'T3' 'ON'
 'T1.custid' '=' 'T3.custid' 'WHERE' 'T2.balance' '>' 'T3.balance']","['select' 't1' '.' 'name' 'from' 'accounts' 'as' 't1' 'join' 'checking'
 'as' 't2' 'on' 't1' '.' 'custid' '=' 't2' '.' 'custid' 'join' 'savings'
 'as' 't3' 'on' 't1' '.' 'custid' '=' 't3' '.' 'custid' 'where' 't2' '.'
 'balance' '>' 't3' '.' 'balance']","['What' 'are' 'the' 'names' 'of' 'customers' 'with' 'a' 'higher'
 'checking' 'balance' 'than' 'savings' 'balance' '?']","['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
1036,phone_1,SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1;,List the name of the phone model launched in year 2002 and with the highest RAM size.,"['SELECT' 'T2.Hardware_Model_name' 'FROM' 'chip_model' 'AS' 'T1' 'JOIN'
 'phone' 'AS' 'T2' 'ON' 'T1.Model_name' '=' 'T2.chip_model' 'WHERE'
 'T1.Launch_year' '=' '2002' 'ORDER' 'BY' 'T1.RAM_MiB' 'DESC' 'LIMIT' '1'
 ';']","['select' 't2' '.' 'hardware_model_name' 'from' 'chip_model' 'as' 't1'
 'join' 'phone' 'as' 't2' 'on' 't1' '.' 'model_name' '=' 't2' '.'
 'chip_model' 'where' 't1' '.' 'launch_year' '=' 'value' 'order' 'by' 't1'
 '.' 'ram_mib' 'desc' 'limit' 'value']","['List' 'the' 'name' 'of' 'the' 'phone' 'model' 'launched' 'in' 'year'
 '2002' 'and' 'with' 'the' 'highest' 'RAM' 'size' '.']","['CREATE TABLE ""chip_model"" ( ""Model_name"" text, ""Launch_year"" real, ""RAM_MiB"" real, ""ROM_MiB"" real, ""Slots"" text, ""WiFi"" text, ""Bluetooth"" text, PRIMARY KEY (""Model_name"") )', 'CREATE TABLE ""screen_mode"" ( ""Graphics_mode"" real, ""Char_cells"" text, ""Pixels"" text, ""Hardware_colours"" real, ""used_kb"" real, ""map"" text, ""Type"" text, PRIMARY KEY (""Graphics_mode"") )', 'CREATE TABLE ""phone"" ( ""Company_name"" text, ""Hardware_Model_name"" text, ""Accreditation_type"" text, ""Accreditation_level"" text, ""Date"" text, ""chip_model"" text, ""screen_mode"" text, PRIMARY KEY(""Hardware_Model_name""), FOREIGN KEY (`screen_mode`) REFERENCES `screen_mode`(`Graphics_mode`), FOREIGN KEY (`chip_model`) REFERENCES `chip_model`(`Model_name`) )']"
5740,dorm_1,"SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name",Find the number of students who is older than 20 in each dorm.,"['SELECT' 'count' '(' '*' ')' ',' 'T3.dorm_name' 'FROM' 'student' 'AS'
 'T1' 'JOIN' 'lives_in' 'AS' 'T2' 'ON' 'T1.stuid' '=' 'T2.stuid' 'JOIN'
 'dorm' 'AS' 'T3' 'ON' 'T3.dormid' '=' 'T2.dormid' 'WHERE' 'T1.age' '>'
 '20' 'GROUP' 'BY' 'T3.dorm_name']","['select' 'count' '(' '*' ')' ',' 't3' '.' 'dorm_name' 'from' 'student'
 'as' 't1' 'join' 'lives_in' 'as' 't2' 'on' 't1' '.' 'stuid' '=' 't2' '.'
 'stuid' 'join' 'dorm' 'as' 't3' 'on' 't3' '.' 'dormid' '=' 't2' '.'
 'dormid' 'where' 't1' '.' 'age' '>' 'value' 'group' 'by' 't3' '.'
 'dorm_name']","['Find' 'the' 'number' 'of' 'students' 'who' 'is' 'older' 'than' '20' 'in'
 'each' 'dorm' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
1220,apartment_rentals,"SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id","Show the apartment numbers, start dates, and end dates of all the apartment bookings.","['SELECT' 'T2.apt_number' ',' 'T1.booking_start_date' ','
 'T1.booking_start_date' 'FROM' 'Apartment_Bookings' 'AS' 'T1' 'JOIN'
 'Apartments' 'AS' 'T2' 'ON' 'T1.apt_id' '=' 'T2.apt_id']","['select' 't2' '.' 'apt_number' ',' 't1' '.' 'booking_start_date' ',' 't1'
 '.' 'booking_start_date' 'from' 'apartment_bookings' 'as' 't1' 'join'
 'apartments' 'as' 't2' 'on' 't1' '.' 'apt_id' '=' 't2' '.' 'apt_id']","['Show' 'the' 'apartment' 'numbers' ',' 'start' 'dates' ',' 'and' 'end'
 'dates' 'of' 'all' 'the' 'apartment' 'bookings' '.']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
1982,phone_market,"SELECT Name FROM phone WHERE Carrier  =  ""Sprint"" OR Carrier  =  ""TMobile""","Show the names of phones with carrier either ""Sprint"" or ""TMobile"".","['SELECT' 'Name' 'FROM' 'phone' 'WHERE' 'Carrier' '=' '``' 'Sprint' ""''""
 'OR' 'Carrier' '=' '``' 'TMobile' ""''""]","['select' 'name' 'from' 'phone' 'where' 'carrier' '=' 'value' 'or'
 'carrier' '=' 'value']","['Show' 'the' 'names' 'of' 'phones' 'with' 'carrier' 'either' '``'
 'Sprint' ""''"" 'or' '``' 'TMobile' ""''"" '.']","['CREATE TABLE ""phone"" ( ""Name"" text, ""Phone_ID"" int, ""Memory_in_G"" int, ""Carrier"" text, ""Price"" real, PRIMARY KEY (""Phone_ID"") )', 'CREATE TABLE ""market"" ( ""Market_ID"" int, ""District"" text, ""Num_of_employees"" int, ""Num_of_shops"" real, ""Ranking"" int, PRIMARY KEY (""Market_ID"") )', 'CREATE TABLE ""phone_market"" ( ""Market_ID"" int, ""Phone_ID"" text, ""Num_of_stock"" int, PRIMARY KEY (""Market_ID"",""Phone_ID""), FOREIGN KEY (""Market_ID"") REFERENCES `market`(""Market_ID""), FOREIGN KEY (""Phone_ID"") REFERENCES `phone`(""Phone_ID"") )']"
1601,customers_and_invoices,"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",What is the invoice number and invoice date for the invoice with most number of transactions?,"['SELECT' 'T2.invoice_number' ',' 'T2.invoice_date' 'FROM'
 'Financial_transactions' 'AS' 'T1' 'JOIN' 'Invoices' 'AS' 'T2' 'ON'
 'T1.invoice_number' '=' 'T2.invoice_number' 'GROUP' 'BY'
 'T1.invoice_number' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'invoice_number' ',' 't2' '.' 'invoice_date' 'from'
 'financial_transactions' 'as' 't1' 'join' 'invoices' 'as' 't2' 'on' 't1'
 '.' 'invoice_number' '=' 't2' '.' 'invoice_number' 'group' 'by' 't1' '.'
 'invoice_number' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'invoice' 'number' 'and' 'invoice' 'date' 'for' 'the'
 'invoice' 'with' 'most' 'number' 'of' 'transactions' '?']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
32,farm,"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",List the official name and status of the city with the largest population.,"['SELECT' 'Official_Name' ',' 'Status' 'FROM' 'city' 'ORDER' 'BY'
 'Population' 'DESC' 'LIMIT' '1']","['select' 'official_name' ',' 'status' 'from' 'city' 'order' 'by'
 'population' 'desc' 'limit' 'value']","['List' 'the' 'official' 'name' 'and' 'status' 'of' 'the' 'city' 'with'
 'the' 'largest' 'population' '.']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""Official_Name"" text, ""Status"" text, ""Area_km_2"" real, ""Population"" real, ""Census_Ranking"" text, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""farm"" ( ""Farm_ID"" int, ""Year"" int, ""Total_Horses"" real, ""Working_Horses"" real, ""Total_Cattle"" real, ""Oxen"" real, ""Bulls"" real, ""Cows"" real, ""Pigs"" real, ""Sheep_and_Goats"" real, PRIMARY KEY (""Farm_ID"") )', 'CREATE TABLE ""farm_competition"" ( ""Competition_ID"" int, ""Year"" int, ""Theme"" text, ""Host_city_ID"" int, ""Hosts"" text, PRIMARY KEY (""Competition_ID""), FOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""competition_record"" ( ""Competition_ID"" int, ""Farm_ID"" int, ""Rank"" int, PRIMARY KEY (""Competition_ID"",""Farm_ID""), FOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`), FOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`) )']"
1282,game_injury,"SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",What are the id and name of the stadium where the most injury accidents happened?,"['SELECT' 'T1.id' ',' 'T1.name' 'FROM' 'stadium' 'AS' 'T1' 'JOIN' 'game'
 'AS' 'T2' 'ON' 'T1.id' '=' 'T2.stadium_id' 'JOIN' 'injury_accident' 'AS'
 'T3' 'ON' 'T2.id' '=' 'T3.game_id' 'GROUP' 'BY' 'T1.id' 'ORDER' 'BY'
 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'id' ',' 't1' '.' 'name' 'from' 'stadium' 'as' 't1'
 'join' 'game' 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'stadium_id'
 'join' 'injury_accident' 'as' 't3' 'on' 't2' '.' 'id' '=' 't3' '.'
 'game_id' 'group' 'by' 't1' '.' 'id' 'order' 'by' 'count' '(' '*' ')'
 'desc' 'limit' 'value']","['What' 'are' 'the' 'id' 'and' 'name' 'of' 'the' 'stadium' 'where' 'the'
 'most' 'injury' 'accidents' 'happened' '?']","['CREATE TABLE ""stadium"" ( ""id"" int, ""name"" text, ""Home_Games"" int, ""Average_Attendance"" real, ""Total_Attendance"" real, ""Capacity_Percentage"" real, primary key (""id"") )', 'CREATE TABLE ""game"" ( ""stadium_id"" int, ""id"" int, ""Season"" int, ""Date"" text, ""Home_team"" text, ""Away_team"" text, ""Score"" text, ""Competition"" text, primary key (""id""), foreign key (""stadium_id"") references `stadium`(""id"") )', 'CREATE TABLE ""injury_accident"" ( ""game_id"" int, ""id"" int, ""Player"" text, ""Injury"" text, ""Number_of_matches"" text, ""Source"" text, primary key (""id""), foreign key (""game_id"") references `game`(""id"") )']"
3666,baseball_1,SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';,What are the maximum scores the team Boston Red Stockings got when the team won in postseason?,"['SELECT' 'max' '(' 'T1.wins' ')' 'FROM' 'postseason' 'AS' 'T1' 'JOIN'
 'team' 'AS' 'T2' 'ON' 'T1.team_id_winner' '=' 'T2.team_id_br' 'WHERE'
 'T2.name' '=' ""'Boston"" 'Red' 'Stockings' ""'"" ';']","['select' 'max' '(' 't1' '.' 'wins' ')' 'from' 'postseason' 'as' 't1'
 'join' 'team' 'as' 't2' 'on' 't1' '.' 'team_id_winner' '=' 't2' '.'
 'team_id_br' 'where' 't2' '.' 'name' '=' 'value']","['What' 'are' 'the' 'maximum' 'scores' 'the' 'team' 'Boston' 'Red'
 'Stockings' 'got' 'when' 'the' 'team' 'won' 'in' 'postseason' '?']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
2879,icfp_1,"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  ""Binders Unbound""","Who is the author of the paper titled ""Binders Unbound""? Give me the last name.","['SELECT' 't1.lname' 'FROM' 'authors' 'AS' 't1' 'JOIN' 'authorship' 'AS'
 't2' 'ON' 't1.authid' '=' 't2.authid' 'JOIN' 'papers' 'AS' 't3' 'ON'
 't2.paperid' '=' 't3.paperid' 'WHERE' 't3.title' '=' '``' 'Binders'
 'Unbound' ""''""]","['select' 't1' '.' 'lname' 'from' 'authors' 'as' 't1' 'join' 'authorship'
 'as' 't2' 'on' 't1' '.' 'authid' '=' 't2' '.' 'authid' 'join' 'papers'
 'as' 't3' 'on' 't2' '.' 'paperid' '=' 't3' '.' 'paperid' 'where' 't3' '.'
 'title' '=' 'value']","['Who' 'is' 'the' 'author' 'of' 'the' 'paper' 'titled' '``' 'Binders'
 'Unbound' ""''"" '?' 'Give' 'me' 'the' 'last' 'name' '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
4179,cre_Doc_Tracking_DB,"SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  ""How to read a book""","Find the document type name of the document named ""How to read a book"".","['SELECT' 'T2.document_type_name' 'FROM' 'All_documents' 'AS' 'T1' 'JOIN'
 'Ref_document_types' 'AS' 'T2' 'ON' 'T1.document_type_code' '='
 'T2.document_type_code' 'WHERE' 'T1.document_name' '=' '``' 'How' 'to'
 'read' 'a' 'book' ""''""]","['select' 't2' '.' 'document_type_name' 'from' 'all_documents' 'as' 't1'
 'join' 'ref_document_types' 'as' 't2' 'on' 't1' '.' 'document_type_code'
 '=' 't2' '.' 'document_type_code' 'where' 't1' '.' 'document_name' '='
 'value']","['Find' 'the' 'document' 'type' 'name' 'of' 'the' 'document' 'named' '``'
 'How' 'to' 'read' 'a' 'book' ""''"" '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
5607,swimming,SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium),Find the names of stadiums whose capacity is smaller than the average capacity.,"['SELECT' 'name' 'FROM' 'stadium' 'WHERE' 'capacity' '<' '(' 'SELECT'
 'avg' '(' 'capacity' ')' 'FROM' 'stadium' ')']","['select' 'name' 'from' 'stadium' 'where' 'capacity' '<' '(' 'select'
 'avg' '(' 'capacity' ')' 'from' 'stadium' ')']","['Find' 'the' 'names' 'of' 'stadiums' 'whose' 'capacity' 'is' 'smaller'
 'than' 'the' 'average' 'capacity' '.']","['CREATE TABLE ""swimmer"" ( ""ID"" int, ""name"" text, ""Nationality"" text, ""meter_100"" real, ""meter_200"" text, ""meter_300"" text, ""meter_400"" text, ""meter_500"" text, ""meter_600"" text, ""meter_700"" text, ""Time"" text, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""stadium"" ( ""ID"" int, ""name"" text, ""Capacity"" int, ""City"" text, ""Country"" text, ""Opening_year"" int, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""event"" ( ""ID"" int, ""Name"" text, ""Stadium_ID"" int, ""Year"" text, PRIMARY KEY (""ID""), FOREIGN KEY (`Stadium_ID`) REFERENCES `stadium`(`ID`) )', 'CREATE TABLE ""record"" ( ""ID"" int, ""Result"" text, ""Swimmer_ID"" int, ""Event_ID"" int, PRIMARY KEY (""Swimmer_ID"",""Event_ID""), FOREIGN KEY (`Event_ID`) REFERENCES `event`(`ID`), FOREIGN KEY (`Swimmer_ID`) REFERENCES `swimmer`(`ID`) )']"
5121,cre_Drama_Workshop_Groups,"SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  ""FJA Filming""","Find the city the store named ""FJA Filming"" is in.","['SELECT' 'T1.City_Town' 'FROM' 'Addresses' 'AS' 'T1' 'JOIN' 'Stores' 'AS'
 'T2' 'ON' 'T1.Address_ID' '=' 'T2.Address_ID' 'WHERE' 'T2.Store_Name' '='
 '``' 'FJA' 'Filming' ""''""]","['select' 't1' '.' 'city_town' 'from' 'addresses' 'as' 't1' 'join'
 'stores' 'as' 't2' 'on' 't1' '.' 'address_id' '=' 't2' '.' 'address_id'
 'where' 't2' '.' 'store_name' '=' 'value']","['Find' 'the' 'city' 'the' 'store' 'named' '``' 'FJA' 'Filming' ""''"" 'is'
 'in' '.']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
5477,voter_2,"SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  ""Fall""",What are the distinct ages of students who have secretary votes in the fall election cycle?,"['SELECT' 'DISTINCT' 'T1.Age' 'FROM' 'STUDENT' 'AS' 'T1' 'JOIN'
 'VOTING_RECORD' 'AS' 'T2' 'ON' 'T1.StuID' '=' 'T2.Secretary_Vote' 'WHERE'
 'T2.Election_Cycle' '=' '``' 'Fall' ""''""]","['select' 'distinct' 't1' '.' 'age' 'from' 'student' 'as' 't1' 'join'
 'voting_record' 'as' 't2' 'on' 't1' '.' 'stuid' '=' 't2' '.'
 'secretary_vote' 'where' 't2' '.' 'election_cycle' '=' 'value']","['What' 'are' 'the' 'distinct' 'ages' 'of' 'students' 'who' 'have'
 'secretary' 'votes' 'in' 'the' 'fall' 'election' 'cycle' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
82,student_assessment,"SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","For each course id, how many students are registered and what are the course names?","['SELECT' 'T3.course_name' ',' 'count' '(' '*' ')' 'FROM' 'students' 'AS'
 'T1' 'JOIN' 'student_course_registrations' 'AS' 'T2' 'ON' 'T1.student_id'
 '=' 'T2.student_id' 'JOIN' 'courses' 'AS' 'T3' 'ON' 'T2.course_id' '='
 'T3.course_id' 'GROUP' 'BY' 'T2.course_id']","['select' 't3' '.' 'course_name' ',' 'count' '(' '*' ')' 'from' 'students'
 'as' 't1' 'join' 'student_course_registrations' 'as' 't2' 'on' 't1' '.'
 'student_id' '=' 't2' '.' 'student_id' 'join' 'courses' 'as' 't3' 'on'
 't2' '.' 'course_id' '=' 't3' '.' 'course_id' 'group' 'by' 't2' '.'
 'course_id']","['For' 'each' 'course' 'id' ',' 'how' 'many' 'students' 'are' 'registered'
 'and' 'what' 'are' 'the' 'course' 'names' '?']","['CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) )', 'CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) )', 'CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) )', 'CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) )', 'CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) )', 'CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) )', 'CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) )', 'CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) )', 'CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) )']"
3015,loan_1,SELECT avg(no_of_customers) FROM bank,What is the average number of bank customers?,['SELECT' 'avg' '(' 'no_of_customers' ')' 'FROM' 'bank'],['select' 'avg' '(' 'no_of_customers' ')' 'from' 'bank'],['What' 'is' 'the' 'average' 'number' 'of' 'bank' 'customers' '?'],"['CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20))', 'CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID))', 'CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID))']"
3386,sports_competition,SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament',What are the countries that participated in both friendly and tournament type competitions?,"['SELECT' 'country' 'FROM' 'competition' 'WHERE' 'competition_type' '='
 ""'Friendly"" ""'"" 'INTERSECT' 'SELECT' 'country' 'FROM' 'competition'
 'WHERE' 'competition_type' '=' ""'Tournament"" ""'""]","['select' 'country' 'from' 'competition' 'where' 'competition_type' '='
 'value' 'intersect' 'select' 'country' 'from' 'competition' 'where'
 'competition_type' '=' 'value']","['What' 'are' 'the' 'countries' 'that' 'participated' 'in' 'both'
 'friendly' 'and' 'tournament' 'type' 'competitions' '?']","['CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") )', 'CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") )', 'CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) )']"
5268,music_2,"SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  ""Universal Music Group""","What are all the songs in albums under label ""Universal Music Group""?","['SELECT' 'T3.title' 'FROM' 'albums' 'AS' 'T1' 'JOIN' 'tracklists' 'AS'
 'T2' 'ON' 'T1.aid' '=' 'T2.albumid' 'JOIN' 'songs' 'AS' 'T3' 'ON'
 'T2.songid' '=' 'T3.songid' 'WHERE' 't1.label' '=' '``' 'Universal'
 'Music' 'Group' ""''""]","['select' 't3' '.' 'title' 'from' 'albums' 'as' 't1' 'join' 'tracklists'
 'as' 't2' 'on' 't1' '.' 'aid' '=' 't2' '.' 'albumid' 'join' 'songs' 'as'
 't3' 'on' 't2' '.' 'songid' '=' 't3' '.' 'songid' 'where' 't1' '.'
 'label' '=' 'value']","['What' 'are' 'all' 'the' 'songs' 'in' 'albums' 'under' 'label' '``'
 'Universal' 'Music' 'Group' ""''"" '?']","['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
6031,game_1,"SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",Show total hours per week and number of games played for students under 20.,"['SELECT' 'sum' '(' 'hoursperweek' ')' ',' 'sum' '(' 'gamesplayed' ')'
 'FROM' 'Sportsinfo' 'AS' 'T1' 'JOIN' 'Student' 'AS' 'T2' 'ON' 'T1.StuID'
 '=' 'T2.StuID' 'WHERE' 'T2.age' '<' '20']","['select' 'sum' '(' 'hoursperweek' ')' ',' 'sum' '(' 'gamesplayed' ')'
 'from' 'sportsinfo' 'as' 't1' 'join' 'student' 'as' 't2' 'on' 't1' '.'
 'stuid' '=' 't2' '.' 'stuid' 'where' 't2' '.' 'age' '<' 'value']","['Show' 'total' 'hours' 'per' 'week' 'and' 'number' 'of' 'games' 'played'
 'for' 'students' 'under' '20' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
1927,protein_institute,"SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",Show the protein name and the institution name.,"['SELECT' 'T2.protein_name' ',' 'T1.institution' 'FROM' 'institution' 'AS'
 'T1' 'JOIN' 'protein' 'AS' 'T2' 'ON' 'T1.institution_id' '='
 'T2.institution_id']","['select' 't2' '.' 'protein_name' ',' 't1' '.' 'institution' 'from'
 'institution' 'as' 't1' 'join' 'protein' 'as' 't2' 'on' 't1' '.'
 'institution_id' '=' 't2' '.' 'institution_id']",['Show' 'the' 'protein' 'name' 'and' 'the' 'institution' 'name' '.'],"['CREATE TABLE ""building"" ( ""building_id"" text, ""Name"" text, ""Street_address"" text, ""Years_as_tallest"" text, ""Height_feet"" int, ""Floors"" int, PRIMARY KEY(""building_id"") )', 'CREATE TABLE ""Institution"" ( ""Institution_id"" text, ""Institution"" text, ""Location"" text, ""Founded"" real, ""Type"" text, ""Enrollment"" int, ""Team"" text, ""Primary_Conference"" text, ""building_id"" text, PRIMARY KEY(""Institution_id""), FOREIGN KEY (""building_id"") REFERENCES ""building""(""building_id"") )', 'CREATE TABLE ""protein"" ( ""common_name"" text, ""protein_name"" text, ""divergence_from_human_lineage"" real, ""accession_number"" text, ""sequence_length"" real, ""sequence_identity_to_human_protein"" text, ""Institution_id"" text, PRIMARY KEY(""common_name""), FOREIGN KEY(""Institution_id"") REFERENCES ""Institution""(""Institution_id"") )']"
2399,candidate_poll,SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3,Return the top 3 greatest support rates.,"['SELECT' 'support_rate' 'FROM' 'candidate' 'ORDER' 'BY' 'support_rate'
 'DESC' 'LIMIT' '3']","['select' 'support_rate' 'from' 'candidate' 'order' 'by' 'support_rate'
 'desc' 'limit' 'value']",['Return' 'the' 'top' '3' 'greatest' 'support' 'rates' '.'],"['CREATE TABLE ""candidate"" ( ""Candidate_ID"" int, ""People_ID"" int, ""Poll_Source"" text, ""Date"" text, ""Support_rate"" real, ""Consider_rate"" real, ""Oppose_rate"" real, ""Unsure_rate"" real, PRIMARY KEY (""Candidate_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Sex"" text, ""Name"" text, ""Date_of_Birth"" text, ""Height"" real, ""Weight"" real, PRIMARY KEY (""People_ID"") )']"
3669,baseball_1,"SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",What are the name and id of the team with the most victories in 2008 postseason?,"['SELECT' 'T2.name' ',' 'T1.team_id_winner' 'FROM' 'postseason' 'AS' 'T1'
 'JOIN' 'team' 'AS' 'T2' 'ON' 'T1.team_id_winner' '=' 'T2.team_id_br'
 'WHERE' 'T1.year' '=' '2008' 'GROUP' 'BY' 'T1.team_id_winner' 'ORDER'
 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1' ';']","['select' 't2' '.' 'name' ',' 't1' '.' 'team_id_winner' 'from'
 'postseason' 'as' 't1' 'join' 'team' 'as' 't2' 'on' 't1' '.'
 'team_id_winner' '=' 't2' '.' 'team_id_br' 'where' 't1' '.' 'year' '='
 'value' 'group' 'by' 't1' '.' 'team_id_winner' 'order' 'by' 'count' '('
 '*' ')' 'desc' 'limit' 'value']","['What' 'are' 'the' 'name' 'and' 'id' 'of' 'the' 'team' 'with' 'the'
 'most' 'victories' 'in' '2008' 'postseason' '?']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
6240,ship_1,SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line',Find the captain rank that has no captain in Third-rate ship of the line class.,"['SELECT' 'rank' 'FROM' 'captain' 'EXCEPT' 'SELECT' 'rank' 'FROM'
 'captain' 'WHERE' 'CLASS' '=' ""'Third-rate"" 'ship' 'of' 'the' 'line' ""'""]","['select' 'rank' 'from' 'captain' 'except' 'select' 'rank' 'from'
 'captain' 'where' 'class' '=' 'value']","['Find' 'the' 'captain' 'rank' 'that' 'has' 'no' 'captain' 'in'
 'Third-rate' 'ship' 'of' 'the' 'line' 'class' '.']","['CREATE TABLE ""captain"" ( ""Captain_ID"" int, ""Name"" text, ""Ship_ID"" int, ""age"" text, ""Class"" text, ""Rank"" text, PRIMARY KEY (""Captain_ID""), FOREIGN KEY (""Ship_ID"") REFERENCES ""Ship""(""Ship_ID"") )', 'CREATE TABLE ""Ship"" ( ""Ship_ID"" int, ""Name"" text, ""Type"" text, ""Built_Year"" real, ""Class"" text, ""Flag"" text, PRIMARY KEY (""Ship_ID"") )']"
4444,network_2,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30),Find the name of the person who has friends with age above 40 and under age 30?,"['SELECT' 'T1.name' 'FROM' 'Person' 'AS' 'T1' 'JOIN' 'PersonFriend' 'AS'
 'T2' 'ON' 'T1.name' '=' 'T2.name' 'WHERE' 'T2.friend' 'IN' '(' 'SELECT'
 'name' 'FROM' 'Person' 'WHERE' 'age' '>' '40' ')' 'INTERSECT' 'SELECT'
 'T1.name' 'FROM' 'Person' 'AS' 'T1' 'JOIN' 'PersonFriend' 'AS' 'T2' 'ON'
 'T1.name' '=' 'T2.name' 'WHERE' 'T2.friend' 'IN' '(' 'SELECT' 'name'
 'FROM' 'Person' 'WHERE' 'age' '<' '30' ')']","['select' 't1' '.' 'name' 'from' 'person' 'as' 't1' 'join' 'personfriend'
 'as' 't2' 'on' 't1' '.' 'name' '=' 't2' '.' 'name' 'where' 't2' '.'
 'friend' 'in' '(' 'select' 'name' 'from' 'person' 'where' 'age' '>'
 'value' ')' 'intersect' 'select' 't1' '.' 'name' 'from' 'person' 'as'
 't1' 'join' 'personfriend' 'as' 't2' 'on' 't1' '.' 'name' '=' 't2' '.'
 'name' 'where' 't2' '.' 'friend' 'in' '(' 'select' 'name' 'from' 'person'
 'where' 'age' '<' 'value' ')']","['Find' 'the' 'name' 'of' 'the' 'person' 'who' 'has' 'friends' 'with'
 'age' 'above' '40' 'and' 'under' 'age' '30' '?']","['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
1699,epinions_1,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10,Find the names of goods that receive a rating of 10.,"['SELECT' 'T1.title' 'FROM' 'item' 'AS' 'T1' 'JOIN' 'review' 'AS' 'T2'
 'ON' 'T1.i_id' '=' 'T2.i_id' 'WHERE' 'T2.rating' '=' '10']","['select' 't1' '.' 'title' 'from' 'item' 'as' 't1' 'join' 'review' 'as'
 't2' 'on' 't1' '.' 'i_id' '=' 't2' '.' 'i_id' 'where' 't2' '.' 'rating'
 '=' 'value']","['Find' 'the' 'names' 'of' 'goods' 'that' 'receive' 'a' 'rating' 'of' '10'
 '.']","['CREATE TABLE `item` ( `i_id` integer NOT NULL , `title` varchar(20) DEFAULT NULL , PRIMARY KEY (`i_id`) )', 'CREATE TABLE `review` ( `a_id` integer NOT NULL PRIMARY KEY , `u_id` integer NOT NULL , `i_id` integer NOT NULL , `rating` integer DEFAULT NULL , `rank` integer DEFAULT NULL , FOREIGN KEY (`u_id`) REFERENCES `useracct`(`u_id`) , FOREIGN KEY (`i_id`) REFERENCES `item`(`i_id`) )', 'CREATE TABLE `useracct` ( `u_id` integer NOT NULL , `name` varchar(128) DEFAULT NULL , PRIMARY KEY (`u_id`) )', 'CREATE TABLE ""trust"" (`source_u_id` integer NOT NULL, `target_u_id` integer NOT NULL, `trust` integer NOT NULL, FOREIGN KEY (`source_u_id`) REFERENCES `useracct`(`u_id`), FOREIGN KEY (`target_u_id`) REFERENCES `useracct`(`u_id`))']"
6870,flight_4,SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy',What is the number of routes whose destinations are Italian airports?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'routes' 'AS' 'T1' 'JOIN' 'airports'
 'AS' 'T2' 'ON' 'T1.dst_apid' '=' 'T2.apid' 'WHERE' 'T2.country' '='
 ""'Italy"" ""'""]","['select' 'count' '(' '*' ')' 'from' 'routes' 'as' 't1' 'join' 'airports'
 'as' 't2' 'on' 't1' '.' 'dst_apid' '=' 't2' '.' 'apid' 'where' 't2' '.'
 'country' '=' 'value']","['What' 'is' 'the' 'number' 'of' 'routes' 'whose' 'destinations' 'are'
 'Italian' 'airports' '?']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
6822,flight_4,SELECT count(*) FROM airports WHERE name LIKE '%International%',How many airports' names have the word Interanation in them?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'airports' 'WHERE' 'name' 'LIKE' ""'""
 '%' 'International' '%' ""'""]","['select' 'count' '(' '*' ')' 'from' 'airports' 'where' 'name' 'like'
 'value']","['How' 'many' 'airports' ""'"" 'names' 'have' 'the' 'word' 'Interanation'
 'in' 'them' '?']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
3686,baseball_1,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;,Find the year in which the least people enter hall of fame.,"['SELECT' 'yearid' 'FROM' 'hall_of_fame' 'GROUP' 'BY' 'yearid' 'ORDER'
 'BY' 'count' '(' '*' ')' 'ASC' 'LIMIT' '1' ';']","['select' 'yearid' 'from' 'hall_of_fame' 'group' 'by' 'yearid' 'order'
 'by' 'count' '(' '*' ')' 'asc' 'limit' 'value']","['Find' 'the' 'year' 'in' 'which' 'the' 'least' 'people' 'enter' 'hall'
 'of' 'fame' '.']","['CREATE TABLE all_star ( player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp NUMERIC, starting_pos NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE appearances ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all NUMERIC, gs NUMERIC, g_batting INTEGER, g_defense NUMERIC, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh NUMERIC, g_ph NUMERIC, g_pr NUMERIC, foreign key (team_id) references team(team_id), foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE player_award ( player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE manager_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER)', 'CREATE TABLE player_award_vote ( award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won NUMERIC, points_max INTEGER, votes_first NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab NUMERIC, r NUMERIC, h NUMERIC, double NUMERIC, triple NUMERIC, hr NUMERIC, rbi NUMERIC, sb NUMERIC, cs NUMERIC, bb NUMERIC, so NUMERIC, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE batting_postseason ( year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs NUMERIC, bb INTEGER, so INTEGER, ibb NUMERIC, hbp NUMERIC, sh NUMERIC, sf NUMERIC, g_idp NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references team(team_id) )', 'CREATE TABLE player_college ( player_id TEXT, college_id TEXT, year INTEGER, foreign key (player_id) references player(player_id), foreign key (college_id) references college(college_id) )', 'CREATE TABLE fielding ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po NUMERIC, a NUMERIC, e NUMERIC, dp NUMERIC, pb NUMERIC, wp NUMERIC, sb NUMERIC, cs NUMERIC, zr NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_outfield ( player_id TEXT, year INTEGER, stint INTEGER, glf NUMERIC, gcf NUMERIC, grf NUMERIC, foreign key (player_id) references player(player_id) )', 'CREATE TABLE fielding_postseason ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs NUMERIC, inn_outs NUMERIC, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb NUMERIC, sb NUMERIC, cs NUMERIC, foreign key (player_id) references player(player_id), foreign key (team_id) references player(team_id) )', 'CREATE TABLE hall_of_fame ( player_id TEXT, yearid INTEGER, votedby TEXT, ballots NUMERIC, needed NUMERIC, votes NUMERIC, inducted TEXT, category TEXT, needed_note TEXT, foreign key (player_id) references player(player_id) )', 'CREATE TABLE home_game ( year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER, foreign key (team_id) references team(team_id), foreign key (park_id) references park(park_id) )', 'CREATE TABLE manager ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank NUMERIC, plyr_mgr TEXT, foreign key (team_id) references team(team_id) )', 'CREATE TABLE manager_half ( player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, foreign key (team_id) references team(team_id) )', 'CREATE TABLE player ( player_id TEXT, birth_year NUMERIC, birth_month NUMERIC, birth_day NUMERIC, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year NUMERIC, death_month NUMERIC, death_day NUMERIC, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight NUMERIC, height NUMERIC, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT)', 'CREATE TABLE park ( park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE pitching ( player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts NUMERIC, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp NUMERIC, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk INTEGER, bfp NUMERIC, gf NUMERIC, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE pitching_postseason ( player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era NUMERIC, ibb NUMERIC, wp NUMERIC, hbp NUMERIC, bk NUMERIC, bfp NUMERIC, gf INTEGER, r INTEGER, sh NUMERIC, sf NUMERIC, g_idp NUMERIC)', 'CREATE TABLE salary ( year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER)', 'CREATE TABLE college ( college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT)', 'CREATE TABLE postseason ( year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER)', 'CREATE TABLE team ( year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome NUMERIC, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so NUMERIC, sb NUMERIC, cs NUMERIC, hbp NUMERIC, sf NUMERIC, ra INTEGER, er INTEGER, era NUMERIC, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp NUMERIC, fp NUMERIC, name TEXT, park TEXT, attendance NUMERIC, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT)', 'CREATE TABLE team_franchise ( franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT)', 'CREATE TABLE team_half ( year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER)']"
2409,candidate_poll,"SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",What are the average height and weight across males (sex is M)?,"['SELECT' 'avg' '(' 'height' ')' ',' 'avg' '(' 'weight' ')' 'FROM'
 'people' 'WHERE' 'sex' '=' ""'M"" ""'""]","['select' 'avg' '(' 'height' ')' ',' 'avg' '(' 'weight' ')' 'from'
 'people' 'where' 'sex' '=' 'value']","['What' 'are' 'the' 'average' 'height' 'and' 'weight' 'across' 'males' '('
 'sex' 'is' 'M' ')' '?']","['CREATE TABLE ""candidate"" ( ""Candidate_ID"" int, ""People_ID"" int, ""Poll_Source"" text, ""Date"" text, ""Support_rate"" real, ""Consider_rate"" real, ""Oppose_rate"" real, ""Unsure_rate"" real, PRIMARY KEY (""Candidate_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Sex"" text, ""Name"" text, ""Date_of_Birth"" text, ""Height"" real, ""Weight"" real, PRIMARY KEY (""People_ID"") )']"
6662,driving_school,"SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",List phone number and email address of customer with more than 2000 outstanding balance.,"['SELECT' 'phone_number' ',' 'email_address' 'FROM' 'Customers' 'WHERE'
 'amount_outstanding' '>' '2000' ';']","['select' 'phone_number' ',' 'email_address' 'from' 'customers' 'where'
 'amount_outstanding' '>' 'value']","['List' 'phone' 'number' 'and' 'email' 'address' 'of' 'customer' 'with'
 'more' 'than' '2000' 'outstanding' 'balance' '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
3904,hospital_1,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn,What are names of patients who made an appointment?,"['SELECT' 'name' 'FROM' 'appointment' 'AS' 'T1' 'JOIN' 'patient' 'AS' 'T2'
 'ON' 'T1.patient' '=' 'T2.ssn']","['select' 'name' 'from' 'appointment' 'as' 't1' 'join' 'patient' 'as' 't2'
 'on' 't1' '.' 'patient' '=' 't2' '.' 'ssn']",['What' 'are' 'names' 'of' 'patients' 'who' 'made' 'an' 'appointment' '?'],"['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
628,store_1,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;,What are the names of the albums that have more than 10 tracks?,"['SELECT' 'T1.title' 'FROM' 'albums' 'AS' 'T1' 'JOIN' 'tracks' 'AS' 'T2'
 'ON' 'T1.id' '=' 'T2.album_id' 'GROUP' 'BY' 'T1.id' 'HAVING' 'count' '('
 'T1.id' ')' '>' '10' ';']","['select' 't1' '.' 'title' 'from' 'albums' 'as' 't1' 'join' 'tracks' 'as'
 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'album_id' 'group' 'by' 't1' '.'
 'id' 'having' 'count' '(' 't1' '.' 'id' ')' '>' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'albums' 'that' 'have' 'more'
 'than' '10' 'tracks' '?']","['CREATE TABLE artists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE sqlite_sequence(name,seq)', 'CREATE TABLE albums ( id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(160) NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE employees ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(20) NOT NULL, first_name VARCHAR(20) NOT NULL, title VARCHAR(30), reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), FOREIGN KEY (reports_to) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE customers ( id INTEGER PRIMARY KEY AUTOINCREMENT, first_name VARCHAR(40) NOT NULL, last_name VARCHAR(20) NOT NULL, company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE genres ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE invoices ( id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE media_types ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE tracks ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(200) NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR(220), milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE invoice_lines ( id INTEGER PRIMARY KEY AUTOINCREMENT, invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE playlists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE playlist_tracks ( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
2392,csu_1,SELECT count(*) FROM campuses,How many CSU campuses are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'campuses'],['select' 'count' '(' '*' ')' 'from' 'campuses'],['How' 'many' 'CSU' 'campuses' 'are' 'there' '?'],"['CREATE TABLE ""Campuses"" ( ""Id"" INTEGER PRIMARY KEY, ""Campus"" TEXT, ""Location"" TEXT, ""County"" TEXT, ""Year"" INTEGER )', 'CREATE TABLE ""csu_fees"" ( ""Campus"" INTEGER PRIMARY KEY, ""Year"" INTEGER, ""CampusFee"" INTEGER, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""degrees"" ( ""Year"" INTEGER, ""Campus"" INTEGER, ""Degrees"" INTEGER, PRIMARY KEY (Year, Campus), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""discipline_enrollments"" ( ""Campus"" INTEGER, ""Discipline"" INTEGER, ""Year"" INTEGER, ""Undergraduate"" INTEGER, ""Graduate"" INTEGER, PRIMARY KEY (Campus, Discipline), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""enrollments"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""TotalEnrollment_AY"" INTEGER, ""FTE_AY"" INTEGER, PRIMARY KEY(Campus, Year), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""faculty"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""Faculty"" REAL, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )']"
2504,movie_1,"SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",Find the title and star rating of the movie that got the least rating star for each reviewer.,"['SELECT' 'T2.title' ',' 'T1.rID' ',' 'T1.stars' ',' 'min' '(' 'T1.stars'
 ')' 'FROM' 'Rating' 'AS' 'T1' 'JOIN' 'Movie' 'AS' 'T2' 'ON' 'T1.mID' '='
 'T2.mID' 'GROUP' 'BY' 'T1.rID']","['select' 't2' '.' 'title' ',' 't1' '.' 'rid' ',' 't1' '.' 'stars' ','
 'min' '(' 't1' '.' 'stars' ')' 'from' 'rating' 'as' 't1' 'join' 'movie'
 'as' 't2' 'on' 't1' '.' 'mid' '=' 't2' '.' 'mid' 'group' 'by' 't1' '.'
 'rid']","['Find' 'the' 'title' 'and' 'star' 'rating' 'of' 'the' 'movie' 'that'
 'got' 'the' 'least' 'rating' 'star' 'for' 'each' 'reviewer' '.']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
56,student_assessment,SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1,which course has most number of registered students?,"['SELECT' 'T1.course_name' 'FROM' 'courses' 'AS' 'T1' 'JOIN'
 'student_course_registrations' 'AS' 'T2' 'ON' 'T1.course_id' '='
 'T2.course_Id' 'GROUP' 'BY' 'T1.course_id' 'ORDER' 'BY' 'count' '(' '*'
 ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'course_name' 'from' 'courses' 'as' 't1' 'join'
 'student_course_registrations' 'as' 't2' 'on' 't1' '.' 'course_id' '='
 't2' '.' 'course_id' 'group' 'by' 't1' '.' 'course_id' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']",['which' 'course' 'has' 'most' 'number' 'of' 'registered' 'students' '?'],"['CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) )', 'CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) )', 'CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) )', 'CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) )', 'CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) )', 'CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) )', 'CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) )', 'CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) )', 'CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) )']"
5656,customers_and_products_contacts,"SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",Show names and phones of customers who do not have address information.,"['SELECT' 'customer_name' ',' 'customer_phone' 'FROM' 'customers' 'WHERE'
 'customer_id' 'NOT' 'IN' '(' 'SELECT' 'customer_id' 'FROM'
 'customer_address_history' ')']","['select' 'customer_name' ',' 'customer_phone' 'from' 'customers' 'where'
 'customer_id' 'not' 'in' '(' 'select' 'customer_id' 'from'
 'customer_address_history' ')']","['Show' 'names' 'and' 'phones' 'of' 'customers' 'who' 'do' 'not' 'have'
 'address' 'information' '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(15), `product_name` VARCHAR(80), `product_price` DOUBLE NULL )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15), `customer_number` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) )', 'CREATE TABLE `Contacts` ( `contact_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `gender` VARCHAR(1), `first_name` VARCHAR(80), `last_name` VARCHAR(50), `contact_phone` VARCHAR(80) )', 'CREATE TABLE `Customer_Address_History` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_date` DATETIME NOT NULL, `order_status_code` VARCHAR(15), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER NOT NULL , `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(80), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
2133,company_1,SELECT count(*) FROM dependent WHERE sex  =  'F',how many female dependents are there?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'dependent' 'WHERE' 'sex' '=' ""'F""
 ""'""]",['select' 'count' '(' '*' ')' 'from' 'dependent' 'where' 'sex' '=' 'value'],['how' 'many' 'female' 'dependents' 'are' 'there' '?'],"['CREATE TABLE works_on( Essn INTEGER, Pno INTEGER, Hours REAL, PRIMARY KEY(Essn, Pno))', 'CREATE TABLE employee( Fname TEXT, Minit TEXT, Lname TEXT, Ssn INTEGER PRIMARY KEY, Bdate TEXT, Address TEXT, Sex TEXT, Salary INTEGER, Super_ssn INTEGER, Dno INTEGER)', 'CREATE TABLE department( Dname TEXT, Dnumber INTEGER PRIMARY KEY, Mgr_ssn INTEGER, Mgr_start_date TEXT)', 'CREATE TABLE project( Pname Text, Pnumber INTEGER PRIMARY KEY, Plocation TEXT, Dnum INTEGER)', 'CREATE TABLE dependent( Essn INTEGER, Dependent_name TEXT, Sex TEXT, Bdate TEXT, Relationship TEXT, PRIMARY KEY(Essn, Dependent_name))', 'CREATE TABLE dept_locations( Dnumber INTEGER, Dlocation TEXT, PRIMARY KEY(Dnumber, Dlocation))']"
2826,restaurant_1,"SELECT Age FROM Student WHERE Fname = ""Linda"" AND Lname = ""Smith"";",What is the age of student Linda Smith?,"['SELECT' 'Age' 'FROM' 'Student' 'WHERE' 'Fname' '=' '``' 'Linda' ""''""
 'AND' 'Lname' '=' '``' 'Smith' ""''"" ';']","['select' 'age' 'from' 'student' 'where' 'fname' '=' 'value' 'and' 'lname'
 '=' 'value']",['What' 'is' 'the' 'age' 'of' 'student' 'Linda' 'Smith' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Restaurant ( ResID INTEGER PRIMARY KEY, ResName VARCHAR(100), Address VARCHAR(100), Rating INTEGER )', 'CREATE TABLE Type_Of_Restaurant ( ResID INTEGER, ResTypeID INTEGER, FOREIGN KEY(ResID) REFERENCES Restaurant(ResID), FOREIGN KEY(ResTypeID) REFERENCES Restaurant_Type(ResTypeID) )', 'CREATE TABLE Restaurant_Type ( ResTypeID INTEGER PRIMARY KEY, ResTypeName VARCHAR(40), ResTypeDescription VARCHAR(100) )', 'CREATE TABLE Visits_Restaurant ( StuID INTEGER, ResID INTEGER, Time TIMESTAMP, Spent FLOAT, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ResID) REFERENCES Restaurant(ResID) )']"
2951,sakila_1,"SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1","What are the title, id, and description of the movie with the greatest number of actors?","['SELECT' 'T2.title' ',' 'T2.film_id' ',' 'T2.description' 'FROM'
 'film_actor' 'AS' 'T1' 'JOIN' 'film' 'AS' 'T2' 'ON' 'T1.film_id' '='
 'T2.film_id' 'GROUP' 'BY' 'T2.film_id' 'ORDER' 'BY' 'count' '(' '*' ')'
 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'title' ',' 't2' '.' 'film_id' ',' 't2' '.'
 'description' 'from' 'film_actor' 'as' 't1' 'join' 'film' 'as' 't2' 'on'
 't1' '.' 'film_id' '=' 't2' '.' 'film_id' 'group' 'by' 't2' '.' 'film_id'
 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'are' 'the' 'title' ',' 'id' ',' 'and' 'description' 'of' 'the'
 'movie' 'with' 'the' 'greatest' 'number' 'of' 'actors' '?']","['CREATE TABLE actor ( actor_id SMALLINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id) )', 'CREATE TABLE address ( address_id SMALLINT UNSIGNED NOT NULL, address VARCHAR(50) NOT NULL, address2 VARCHAR(50) DEFAULT NULL, district VARCHAR(20) NOT NULL, city_id SMALLINT UNSIGNED NOT NULL, postal_code VARCHAR(10) DEFAULT NULL, phone VARCHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (address_id), FOREIGN KEY (city_id) REFERENCES city (city_id) )', 'CREATE TABLE category ( category_id TINYINT UNSIGNED NOT NULL, name VARCHAR(25) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (category_id) )', 'CREATE TABLE city ( city_id SMALLINT UNSIGNED NOT NULL, city VARCHAR(50) NOT NULL, country_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (city_id), FOREIGN KEY (country_id) REFERENCES country (country_id) )', 'CREATE TABLE country ( country_id SMALLINT UNSIGNED NOT NULL, country VARCHAR(50) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (country_id) )', 'CREATE TABLE customer ( customer_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, email VARCHAR(50) DEFAULT NULL, address_id SMALLINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, create_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (customer_id), FOREIGN KEY (address_id) REFERENCES address (address_id), FOREIGN KEY (store_id) REFERENCES store (store_id) )', ""CREATE TABLE film ( film_id SMALLINT UNSIGNED NOT NULL, title VARCHAR(255) NOT NULL, description TEXT DEFAULT NULL, release_year YEAR DEFAULT NULL, language_id TINYINT UNSIGNED NOT NULL, original_language_id TINYINT UNSIGNED DEFAULT NULL, rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3, rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99, length SMALLINT UNSIGNED DEFAULT NULL, replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99, rating DEFAULT 'G', special_features DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id), FOREIGN KEY (language_id) REFERENCES language (language_id), FOREIGN KEY (original_language_id) REFERENCES language (language_id) )"", 'CREATE TABLE film_actor ( actor_id SMALLINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id,film_id), FOREIGN KEY (actor_id) REFERENCES actor (actor_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE film_category ( film_id SMALLINT UNSIGNED NOT NULL, category_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id, category_id), FOREIGN KEY (film_id) REFERENCES film (film_id), FOREIGN KEY (category_id) REFERENCES category (category_id) )', 'CREATE TABLE film_text ( film_id SMALLINT NOT NULL, title VARCHAR(255) NOT NULL, description TEXT, PRIMARY KEY (film_id) )', 'CREATE TABLE inventory ( inventory_id MEDIUMINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (inventory_id), FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE language ( language_id TINYINT UNSIGNED NOT NULL, name CHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (language_id) )', 'CREATE TABLE payment ( payment_id SMALLINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, staff_id TINYINT UNSIGNED NOT NULL, rental_id INT DEFAULT NULL, amount DECIMAL(5,2) NOT NULL, payment_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (payment_id), FOREIGN KEY (rental_id) REFERENCES rental (rental_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id) )', 'CREATE TABLE rental ( rental_id INT NOT NULL, rental_date DATETIME NOT NULL, inventory_id MEDIUMINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, return_date DATETIME DEFAULT NULL, staff_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (rental_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id), FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id) )', 'CREATE TABLE staff ( staff_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, picture BLOB DEFAULT NULL, email VARCHAR(50) DEFAULT NULL, store_id TINYINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, username VARCHAR(16) NOT NULL, password VARCHAR(40) DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )', 'CREATE TABLE store ( store_id TINYINT UNSIGNED NOT NULL, manager_staff_id TINYINT UNSIGNED NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (store_id), FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )']"
6543,wine_1,"SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  ""White""",What are the names and scores of wines that are made of white color grapes?,"['SELECT' 'T2.Name' ',' 'T2.Score' 'FROM' 'GRAPES' 'AS' 'T1' 'JOIN' 'WINE'
 'AS' 'T2' 'ON' 'T1.Grape' '=' 'T2.Grape' 'WHERE' 'T1.Color' '=' '``'
 'White' ""''""]","['select' 't2' '.' 'name' ',' 't2' '.' 'score' 'from' 'grapes' 'as' 't1'
 'join' 'wine' 'as' 't2' 'on' 't1' '.' 'grape' '=' 't2' '.' 'grape'
 'where' 't1' '.' 'color' '=' 'value']","['What' 'are' 'the' 'names' 'and' 'scores' 'of' 'wines' 'that' 'are'
 'made' 'of' 'white' 'color' 'grapes' '?']","['CREATE TABLE ""grapes"" ( \t""ID"" INTEGER PRIMARY KEY, \t""Grape"" TEXT UNIQUE, \t""Color"" TEXT );', 'CREATE TABLE ""appellations"" ( \t""No"" INTEGER PRIMARY KEY, \t""Appelation"" TEXT UNIQUE, \t""County"" TEXT, \t""State"" TEXT, \t""Area"" TEXT, \t""isAVA"" TEXT);', 'CREATE TABLE ""wine"" ( \t""No"" INTEGER, \t""Grape"" TEXT, \t""Winery"" TEXT, \t""Appelation"" TEXT, \t""State"" TEXT, \t""Name"" TEXT, \t""Year"" INTEGER, \t""Price"" INTEGER, \t""Score"" INTEGER, \t""Cases"" INTEGER, \t""Drink"" TEXT,\tFOREIGN KEY (Grape) REFERENCES grapes(Grape),\tFOREIGN KEY (Appelation) REFERENCES appellations(Appelation));']"
5098,cre_Drama_Workshop_Groups,"SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  ""Harold""",What are the phone and email for customer Harold?,"['SELECT' 'Customer_Phone' ',' 'Customer_Email_Address' 'FROM' 'CUSTOMERS'
 'WHERE' 'Customer_Name' '=' '``' 'Harold' ""''""]","['select' 'customer_phone' ',' 'customer_email_address' 'from' 'customers'
 'where' 'customer_name' '=' 'value']",['What' 'are' 'the' 'phone' 'and' 'email' 'for' 'customer' 'Harold' '?'],"['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
163,bike_1,SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1,Which trip started from the station with the largest dock count? Give me the trip id.,"['SELECT' 'T1.id' 'FROM' 'trip' 'AS' 'T1' 'JOIN' 'station' 'AS' 'T2' 'ON'
 'T1.start_station_id' '=' 'T2.id' 'ORDER' 'BY' 'T2.dock_count' 'DESC'
 'LIMIT' '1']","['select' 't1' '.' 'id' 'from' 'trip' 'as' 't1' 'join' 'station' 'as' 't2'
 'on' 't1' '.' 'start_station_id' '=' 't2' '.' 'id' 'order' 'by' 't2' '.'
 'dock_count' 'desc' 'limit' 'value']","['Which' 'trip' 'started' 'from' 'the' 'station' 'with' 'the' 'largest'
 'dock' 'count' '?' 'Give' 'me' 'the' 'trip' 'id' '.']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
6849,flight_4,"SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",How many airports are there per city in the United States? Order the cities by decreasing number of airports.,"['SELECT' 'count' '(' '*' ')' ',' 'city' 'FROM' 'airports' 'WHERE'
 'country' '=' ""'United"" 'States' ""'"" 'GROUP' 'BY' 'city' 'ORDER' 'BY'
 'count' '(' '*' ')' 'DESC']","['select' 'count' '(' '*' ')' ',' 'city' 'from' 'airports' 'where'
 'country' '=' 'value' 'group' 'by' 'city' 'order' 'by' 'count' '(' '*'
 ')' 'desc']","['How' 'many' 'airports' 'are' 'there' 'per' 'city' 'in' 'the' 'United'
 'States' '?' 'Order' 'the' 'cities' 'by' 'decreasing' 'number' 'of'
 'airports' '.']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
2109,cre_Doc_Control_Systems,"SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;","How many employees does each role have? List role description, id and number of employees.","['SELECT' 'T1.role_description' ',' 'T2.role_code' ',' 'count' '(' '*' ')'
 'FROM' 'ROLES' 'AS' 'T1' 'JOIN' 'Employees' 'AS' 'T2' 'ON' 'T1.role_code'
 '=' 'T2.role_code' 'GROUP' 'BY' 'T2.role_code' ';']","['select' 't1' '.' 'role_description' ',' 't2' '.' 'role_code' ',' 'count'
 '(' '*' ')' 'from' 'roles' 'as' 't1' 'join' 'employees' 'as' 't2' 'on'
 't1' '.' 'role_code' '=' 't2' '.' 'role_code' 'group' 'by' 't2' '.'
 'role_code']","['How' 'many' 'employees' 'does' 'each' 'role' 'have' '?' 'List' 'role'
 'description' ',' 'id' 'and' 'number' 'of' 'employees' '.']","['CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) )', 'CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) )', 'CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) )', 'CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) )', 'CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) )', 'CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) )', 'CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) )', 'CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) )', 'CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) )', 'CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) )', 'CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) )']"
3444,hr_1,"SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000","What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?","['SELECT' 'job_title' ',' 'max_salary' '-' 'min_salary' 'FROM' 'jobs'
 'WHERE' 'max_salary' 'BETWEEN' '12000' 'AND' '18000']","['select' 'job_title' ',' 'max_salary' '-' 'min_salary' 'from' 'jobs'
 'where' 'max_salary' 'between' 'value' 'and' 'value']","['What' 'are' 'the' 'job' 'titles' ',' 'and' 'range' 'of' 'salaries' 'for'
 'jobs' 'with' 'maximum' 'salary' 'between' '12000' 'and' '18000' '?']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
3813,e_learning,"SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  ""Computer Science""","What are the names and descriptions of the all courses under the ""Computer Science"" subject?","['SELECT' 'T1.course_name' ',' 'T1.course_description' 'FROM' 'Courses'
 'AS' 'T1' 'JOIN' 'Subjects' 'AS' 'T2' 'ON' 'T1.subject_id' '='
 'T2.subject_id' 'WHERE' 'T2.subject_name' '=' '``' 'Computer' 'Science'
 ""''""]","['select' 't1' '.' 'course_name' ',' 't1' '.' 'course_description' 'from'
 'courses' 'as' 't1' 'join' 'subjects' 'as' 't2' 'on' 't1' '.'
 'subject_id' '=' 't2' '.' 'subject_id' 'where' 't2' '.' 'subject_name'
 '=' 'value']","['What' 'are' 'the' 'names' 'and' 'descriptions' 'of' 'the' 'all'
 'courses' 'under' 'the' '``' 'Computer' 'Science' ""''"" 'subject' '?']","['CREATE TABLE `Course_Authors_and_Tutors` ( `author_id` INTEGER PRIMARY KEY, `author_tutor_ATB` VARCHAR(3), `login_name` VARCHAR(40), `password` VARCHAR(40), `personal_name` VARCHAR(80), `middle_name` VARCHAR(80), `family_name` VARCHAR(80), `gender_mf` VARCHAR(1), `address_line_1` VARCHAR(80) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `date_of_registration` DATETIME, `date_of_latest_logon` DATETIME, `login_name` VARCHAR(40), `password` VARCHAR(10), `personal_name` VARCHAR(40), `middle_name` VARCHAR(40), `family_name` VARCHAR(40) )', 'CREATE TABLE `Subjects` ( `subject_id` INTEGER PRIMARY KEY, `subject_name` VARCHAR(120) )', 'CREATE TABLE `Courses` ( `course_id` INTEGER PRIMARY KEY, `author_id` INTEGER NOT NULL, `subject_id` INTEGER NOT NULL, `course_name` VARCHAR(120), `course_description` VARCHAR(255), FOREIGN KEY (`author_id` ) REFERENCES `Course_Authors_and_Tutors`(`author_id` ), FOREIGN KEY (`subject_id` ) REFERENCES `Subjects`(`subject_id` ) )', 'CREATE TABLE `Student_Course_Enrolment` ( `registration_id` INTEGER PRIMARY KEY, `student_id` INTEGER NOT NULL, `course_id` INTEGER NOT NULL, `date_of_enrolment` DATETIME NOT NULL, `date_of_completion` DATETIME NOT NULL, FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Student_Tests_Taken` ( `registration_id` INTEGER NOT NULL, `date_test_taken` DATETIME NOT NULL, `test_result` VARCHAR(255), FOREIGN KEY (`registration_id` ) REFERENCES `Student_Course_Enrolment`(`registration_id` ) )']"
4723,department_store,"SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1","What are the name, phone number and email address of the customer who made the largest number of orders?","['SELECT' 'T1.customer_name' ',' 'T1.customer_phone' ','
 'T1.customer_email' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'customer_orders'
 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'GROUP' 'BY'
 'T2.customer_id' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'customer_name' ',' 't1' '.' 'customer_phone' ',' 't1'
 '.' 'customer_email' 'from' 'customers' 'as' 't1' 'join'
 'customer_orders' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'group' 'by' 't2' '.' 'customer_id' 'order' 'by' 'count'
 '(' '*' ')' 'desc' 'limit' 'value']","['What' 'are' 'the' 'name' ',' 'phone' 'number' 'and' 'email' 'address'
 'of' 'the' 'customer' 'who' 'made' 'the' 'largest' 'number' 'of' 'orders'
 '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_gender` VARCHAR(1), `staff_name` VARCHAR(80) )', 'CREATE TABLE `Suppliers` ( `supplier_id` INTEGER PRIMARY KEY, `supplier_name` VARCHAR(80), `supplier_phone` VARCHAR(80) )', 'CREATE TABLE `Department_Store_Chain` ( `dept_store_chain_id` INTEGER PRIMARY KEY, `dept_store_chain_name` VARCHAR(80) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(10) NOT NULL, `customer_code` VARCHAR(20), `customer_name` VARCHAR(80), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_type_code` VARCHAR(10) NOT NULL, `product_name` VARCHAR(80), `product_price` DECIMAL(19,4) )', 'CREATE TABLE `Supplier_Addresses` ( `supplier_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`supplier_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `date_to` DATETIME, PRIMARY KEY (`customer_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status_code` VARCHAR(10) NOT NULL, `order_date` DATETIME NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Department_Stores` ( `dept_store_id` INTEGER PRIMARY KEY, `dept_store_chain_id` INTEGER, `store_name` VARCHAR(80), `store_address` VARCHAR(255), `store_phone` VARCHAR(80), `store_email` VARCHAR(80), FOREIGN KEY (`dept_store_chain_id` ) REFERENCES `Department_Store_Chain`(`dept_store_chain_id` ) )', 'CREATE TABLE `Departments` ( `department_id` INTEGER PRIMARY KEY, `dept_store_id` INTEGER NOT NULL, `department_name` VARCHAR(80), FOREIGN KEY (`dept_store_id` ) REFERENCES `Department_Stores`(`dept_store_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Product_Suppliers` ( `product_id` INTEGER NOT NULL, `supplier_id` INTEGER NOT NULL, `date_supplied_from` DATETIME NOT NULL, `date_supplied_to` DATETIME, `total_amount_purchased` VARCHAR(80), `total_value_purchased` DECIMAL(19,4), PRIMARY KEY (`product_id`, `supplier_id`), FOREIGN KEY (`supplier_id` ) REFERENCES `Suppliers`(`supplier_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Staff_Department_Assignments` ( `staff_id` INTEGER NOT NULL, `department_id` INTEGER NOT NULL, `date_assigned_from` DATETIME NOT NULL, `job_title_code` VARCHAR(10) NOT NULL, `date_assigned_to` DATETIME, PRIMARY KEY (`staff_id`, `department_id`), FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
5192,music_2,SELECT count(DISTINCT label) FROM albums,How many unique labels are there for albums?,['SELECT' 'count' '(' 'DISTINCT' 'label' ')' 'FROM' 'albums'],['select' 'count' '(' 'distinct' 'label' ')' 'from' 'albums'],['How' 'many' 'unique' 'labels' 'are' 'there' 'for' 'albums' '?'],"['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
5673,dorm_1,SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25,How many girl students who are younger than 25?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'student' 'WHERE' 'sex' '=' ""'F"" ""'""
 'AND' 'age' '<' '25']","['select' 'count' '(' '*' ')' 'from' 'student' 'where' 'sex' '=' 'value'
 'and' 'age' '<' 'value']",['How' 'many' 'girl' 'students' 'who' 'are' 'younger' 'than' '25' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
4338,tracking_grants_for_research,SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' ),List the project details of the projects which did not hire any staff for a researcher role.,"['SELECT' 'project_details' 'FROM' 'Projects' 'WHERE' 'project_id' 'NOT'
 'IN' '(' 'SELECT' 'project_id' 'FROM' 'Project_Staff' 'WHERE' 'role_code'
 '=' ""'researcher"" ""'"" ')']","['select' 'project_details' 'from' 'projects' 'where' 'project_id' 'not'
 'in' '(' 'select' 'project_id' 'from' 'project_staff' 'where' 'role_code'
 '=' 'value' ')']","['List' 'the' 'project' 'details' 'of' 'the' 'projects' 'which' 'did'
 'not' 'hire' 'any' 'staff' 'for' 'a' 'researcher' 'role' '.']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
195,bike_1,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70,Find all the zip codes in which the max dew point have never reached 70.,"['SELECT' 'DISTINCT' 'zip_code' 'FROM' 'weather' 'EXCEPT' 'SELECT'
 'DISTINCT' 'zip_code' 'FROM' 'weather' 'WHERE' 'max_dew_point_f' '>' '='
 '70']","['select' 'distinct' 'zip_code' 'from' 'weather' 'except' 'select'
 'distinct' 'zip_code' 'from' 'weather' 'where' 'max_dew_point_f' '>' '='
 'value']","['Find' 'all' 'the' 'zip' 'codes' 'in' 'which' 'the' 'max' 'dew' 'point'
 'have' 'never' 'reached' '70' '.']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
557,store_1,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",List the customers first and last name of 10 least expensive invoices.,"['SELECT' 'T1.first_name' ',' 'T1.last_name' 'FROM' 'customers' 'AS' 'T1'
 'JOIN' 'invoices' 'AS' 'T2' 'ON' 'T2.customer_id' '=' 'T1.id' 'ORDER'
 'BY' 'total' 'LIMIT' '10' ';']","['select' 't1' '.' 'first_name' ',' 't1' '.' 'last_name' 'from'
 'customers' 'as' 't1' 'join' 'invoices' 'as' 't2' 'on' 't2' '.'
 'customer_id' '=' 't1' '.' 'id' 'order' 'by' 'total' 'limit' 'value']","['List' 'the' 'customers' 'first' 'and' 'last' 'name' 'of' '10' 'least'
 'expensive' 'invoices' '.']","['CREATE TABLE artists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE sqlite_sequence(name,seq)', 'CREATE TABLE albums ( id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(160) NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE employees ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(20) NOT NULL, first_name VARCHAR(20) NOT NULL, title VARCHAR(30), reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), FOREIGN KEY (reports_to) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE customers ( id INTEGER PRIMARY KEY AUTOINCREMENT, first_name VARCHAR(40) NOT NULL, last_name VARCHAR(20) NOT NULL, company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE genres ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE invoices ( id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE media_types ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE tracks ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(200) NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR(220), milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE invoice_lines ( id INTEGER PRIMARY KEY AUTOINCREMENT, invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE playlists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE playlist_tracks ( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
3427,hr_1,"SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'","Display the first and last name, and salary for those employees whose first name is ending with the letter m.","['SELECT' 'first_name' ',' 'last_name' ',' 'salary' 'FROM' 'employees'
 'WHERE' 'first_name' 'LIKE' ""'"" '%' 'm' ""'""]","['select' 'first_name' ',' 'last_name' ',' 'salary' 'from' 'employees'
 'where' 'first_name' 'like' 'value']","['Display' 'the' 'first' 'and' 'last' 'name' ',' 'and' 'salary' 'for'
 'those' 'employees' 'whose' 'first' 'name' 'is' 'ending' 'with' 'the'
 'letter' 'm' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
6674,driving_school,SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;,Which customer status code has least number of customers?,"['SELECT' 'customer_status_code' 'FROM' 'Customers' 'GROUP' 'BY'
 'customer_status_code' 'ORDER' 'BY' 'count' '(' '*' ')' 'ASC' 'LIMIT' '1'
 ';']","['select' 'customer_status_code' 'from' 'customers' 'group' 'by'
 'customer_status_code' 'order' 'by' 'count' '(' '*' ')' 'asc' 'limit'
 'value']","['Which' 'customer' 'status' 'code' 'has' 'least' 'number' 'of'
 'customers' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
6809,flight_4,SELECT count(*) FROM airlines WHERE country  =  'Russia',How many airlines does Russia has?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'airlines' 'WHERE' 'country' '='
 ""'Russia"" ""'""]","['select' 'count' '(' '*' ')' 'from' 'airlines' 'where' 'country' '='
 'value']",['How' 'many' 'airlines' 'does' 'Russia' 'has' '?'],"['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
5435,shop_membership,SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100,What are the cities that do not have any branches with more than 100 members?,"['SELECT' 'city' 'FROM' 'branch' 'EXCEPT' 'SELECT' 'city' 'FROM' 'branch'
 'WHERE' 'membership_amount' '>' '100']","['select' 'city' 'from' 'branch' 'except' 'select' 'city' 'from' 'branch'
 'where' 'membership_amount' '>' 'value']","['What' 'are' 'the' 'cities' 'that' 'do' 'not' 'have' 'any' 'branches'
 'with' 'more' 'than' '100' 'members' '?']","['CREATE TABLE ""member"" ( ""Member_ID"" int, ""Card_Number"" text, ""Name"" text, ""Hometown"" text, ""Level"" int, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""branch"" ( ""Branch_ID"" int, ""Name"" text, ""Open_year"" text, ""Address_road"" text, ""City"" text, ""membership_amount"" text, PRIMARY KEY (""Branch_ID"") )', 'CREATE TABLE ""membership_register_branch"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Register_Year"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") )', 'CREATE TABLE ""purchase"" ( ""Member_ID"" int, ""Branch_ID"" text, ""Year"" text, ""Total_pounds"" real, PRIMARY KEY (""Member_ID"",""Branch_ID"",""Year""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID""), FOREIGN KEY (""Branch_ID"") REFERENCES ""branch""(""Branch_ID"") )']"
4312,club_1,SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121,"List the clubs that have at least a member with advisor ""1121"".","['SELECT' 'DISTINCT' 't1.clubname' 'FROM' 'club' 'AS' 't1' 'JOIN'
 'member_of_club' 'AS' 't2' 'ON' 't1.clubid' '=' 't2.clubid' 'JOIN'
 'student' 'AS' 't3' 'ON' 't2.stuid' '=' 't3.stuid' 'WHERE' 't3.advisor'
 '=' '1121']","['select' 'distinct' 't1' '.' 'clubname' 'from' 'club' 'as' 't1' 'join'
 'member_of_club' 'as' 't2' 'on' 't1' '.' 'clubid' '=' 't2' '.' 'clubid'
 'join' 'student' 'as' 't3' 'on' 't2' '.' 'stuid' '=' 't3' '.' 'stuid'
 'where' 't3' '.' 'advisor' '=' 'value']","['List' 'the' 'clubs' 'that' 'have' 'at' 'least' 'a' 'member' 'with'
 'advisor' '``' '1121' ""''"" '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Club ( ClubID INTEGER PRIMARY KEY, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) )', 'CREATE TABLE Member_of_club ( StuID INTEGER, ClubID INTEGER, Position VARCHAR(40), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ClubID) REFERENCES Club(ClubID) )']"
4207,cre_Doc_Tracking_DB,SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1,Find the code of the role that have the most employees.,"['SELECT' 'role_code' 'FROM' 'Employees' 'GROUP' 'BY' 'role_code' 'ORDER'
 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'role_code' 'from' 'employees' 'group' 'by' 'role_code' 'order'
 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Find' 'the' 'code' 'of' 'the' 'role' 'that' 'have' 'the' 'most'
 'employees' '.']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Calendar ( Calendar_Date DATETIME NOT NULL, Day_Number INTEGER, PRIMARY KEY (Calendar_Date) )', 'CREATE TABLE Ref_Locations ( Location_Code CHAR(15) NOT NULL, Location_Name VARCHAR(255) NOT NULL, Location_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Location_Code) )', 'CREATE TABLE Roles ( Role_Code CHAR(15) NOT NULL, Role_Name VARCHAR(255), Role_Description VARCHAR(255), PRIMARY KEY (Role_Code) )', 'CREATE TABLE All_Documents ( Document_ID INTEGER NOT NULL, Date_Stored DATETIME, Document_Type_Code CHAR(15) NOT NULL, Document_Name CHAR(255), Document_Description CHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar (Calendar_Date) )', 'CREATE TABLE Employees ( Employee_ID INTEGER NOT NULL, Role_Code CHAR(15) NOT NULL, Employee_Name VARCHAR(255), Gender_MFU CHAR(1) NOT NULL, Date_of_Birth DATETIME NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Employee_ID), FOREIGN KEY (Role_Code) REFERENCES Roles (Role_Code) )', 'CREATE TABLE Document_Locations ( Document_ID INTEGER NOT NULL, Location_Code CHAR(15) NOT NULL, Date_in_Location_From DATETIME NOT NULL, Date_in_Locaton_To DATETIME, PRIMARY KEY (Document_ID, Location_Code, Date_in_Location_From), FOREIGN KEY (Location_Code) REFERENCES Ref_Locations (Location_Code), FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )', 'CREATE TABLE Documents_to_be_Destroyed ( Document_ID INTEGER NOT NULL, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date DATETIME, Actual_Destruction_Date DATETIME, Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID), FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date), FOREIGN KEY (Document_ID) REFERENCES All_Documents (Document_ID) )']"
6081,customers_and_addresses,"SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  ""Colorado""",Find the name of customers who are living in Colorado?,"['SELECT' 't1.customer_name' 'FROM' 'customers' 'AS' 't1' 'JOIN'
 'customer_addresses' 'AS' 't2' 'ON' 't1.customer_id' '=' 't2.customer_id'
 'JOIN' 'addresses' 'AS' 't3' 'ON' 't2.address_id' '=' 't3.address_id'
 'WHERE' 't3.state_province_county' '=' '``' 'Colorado' ""''""]","['select' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1' 'join'
 'customer_addresses' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'join' 'addresses' 'as' 't3' 'on' 't2' '.' 'address_id' '='
 't3' '.' 'address_id' 'where' 't3' '.' 'state_province_county' '='
 'value']","['Find' 'the' 'name' 'of' 'customers' 'who' 'are' 'living' 'in' 'Colorado'
 '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_content` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(15) NOT NULL, `customer_name` VARCHAR(80), `date_became_customer` DATETIME, `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Contact_Channels` ( `customer_id` INTEGER NOT NULL, `channel_code` VARCHAR(15) NOT NULL, `active_from_date` DATETIME NOT NULL, `active_to_date` DATETIME, `contact_number` VARCHAR(50) NOT NULL, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Customer_Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(15) NOT NULL, `order_date` DATETIME, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Order_Items` ( `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `order_quantity` VARCHAR(15), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ) )']"
5831,workshop_paper,SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80,Which colleges have both authors with submission score above 90 and authors with submission score below 80?,"['SELECT' 'College' 'FROM' 'submission' 'WHERE' 'Scores' '>' '90'
 'INTERSECT' 'SELECT' 'College' 'FROM' 'submission' 'WHERE' 'Scores' '<'
 '80']","['select' 'college' 'from' 'submission' 'where' 'scores' '>' 'value'
 'intersect' 'select' 'college' 'from' 'submission' 'where' 'scores' '<'
 'value']","['Which' 'colleges' 'have' 'both' 'authors' 'with' 'submission' 'score'
 'above' '90' 'and' 'authors' 'with' 'submission' 'score' 'below' '80' '?']","['CREATE TABLE ""workshop"" ( ""Workshop_ID"" int, ""Date"" text, ""Venue"" text, ""Name"" text, PRIMARY KEY (""Workshop_ID"") )', 'CREATE TABLE ""submission"" ( ""Submission_ID"" int, ""Scores"" real, ""Author"" text, ""College"" text, PRIMARY KEY (""Submission_ID"") )', 'CREATE TABLE ""Acceptance"" ( ""Submission_ID"" int, ""Workshop_ID"" int, ""Result"" text, PRIMARY KEY (""Submission_ID"",""Workshop_ID""), FOREIGN KEY (""Submission_ID"") REFERENCES `submission`(""Submission_ID""), FOREIGN KEY (""Workshop_ID"") REFERENCES `workshop`(""Workshop_ID"") )']"
1717,epinions_1,SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review),Find the number of users who did not write any review.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'useracct' 'WHERE' 'u_id' 'NOT' 'IN'
 '(' 'SELECT' 'u_id' 'FROM' 'review' ')']","['select' 'count' '(' '*' ')' 'from' 'useracct' 'where' 'u_id' 'not' 'in'
 '(' 'select' 'u_id' 'from' 'review' ')']","['Find' 'the' 'number' 'of' 'users' 'who' 'did' 'not' 'write' 'any'
 'review' '.']","['CREATE TABLE `item` ( `i_id` integer NOT NULL , `title` varchar(20) DEFAULT NULL , PRIMARY KEY (`i_id`) )', 'CREATE TABLE `review` ( `a_id` integer NOT NULL PRIMARY KEY , `u_id` integer NOT NULL , `i_id` integer NOT NULL , `rating` integer DEFAULT NULL , `rank` integer DEFAULT NULL , FOREIGN KEY (`u_id`) REFERENCES `useracct`(`u_id`) , FOREIGN KEY (`i_id`) REFERENCES `item`(`i_id`) )', 'CREATE TABLE `useracct` ( `u_id` integer NOT NULL , `name` varchar(128) DEFAULT NULL , PRIMARY KEY (`u_id`) )', 'CREATE TABLE ""trust"" (`source_u_id` integer NOT NULL, `target_u_id` integer NOT NULL, `trust` integer NOT NULL, FOREIGN KEY (`source_u_id`) REFERENCES `useracct`(`u_id`), FOREIGN KEY (`target_u_id`) REFERENCES `useracct`(`u_id`))']"
938,medicine_enzyme_interaction,"SELECT name ,  LOCATION FROM enzyme",What are the names and locations of all enzymes listed?,"['SELECT' 'name' ',' 'LOCATION' 'FROM' 'enzyme']","['select' 'name' ',' 'location' 'from' 'enzyme']","['What' 'are' 'the' 'names' 'and' 'locations' 'of' 'all' 'enzymes'
 'listed' '?']","['CREATE TABLE ""medicine"" ( ""id"" int, ""name"" text, ""Trade_Name"" text, ""FDA_approved"" text, primary key (""id"") )', 'CREATE TABLE ""enzyme"" ( ""id"" int, ""name"" text, ""Location"" text, ""Product"" text, ""Chromosome"" text, ""OMIM"" int, ""Porphyria"" text, primary key (""id"") )', 'CREATE TABLE ""medicine_enzyme_interaction"" ( ""enzyme_id"" int, ""medicine_id"" int, ""interaction_type"" text, primary key (""enzyme_id"", ""medicine_id""), foreign key (""enzyme_id"") references `enzyme`(""id""), foreign key (""medicine_id"") references `medicine`(""id"") )']"
4289,club_1,"SELECT clublocation FROM club WHERE clubname  =  ""Hopkins Student Enterprises""","Tell me the location of the club ""Hopkins Student Enterprises"".","['SELECT' 'clublocation' 'FROM' 'club' 'WHERE' 'clubname' '=' '``'
 'Hopkins' 'Student' 'Enterprises' ""''""]",['select' 'clublocation' 'from' 'club' 'where' 'clubname' '=' 'value'],"['Tell' 'me' 'the' 'location' 'of' 'the' 'club' '``' 'Hopkins' 'Student'
 'Enterprises' ""''"" '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Club ( ClubID INTEGER PRIMARY KEY, ClubName VARCHAR(40), ClubDesc VARCHAR(1024), ClubLocation VARCHAR(40) )', 'CREATE TABLE Member_of_club ( StuID INTEGER, ClubID INTEGER, Position VARCHAR(40), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(ClubID) REFERENCES Club(ClubID) )']"
4430,network_2,SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age,Find the name of people whose age is greater than any engineer sorted by their age.,"['SELECT' 'name' 'FROM' 'Person' 'WHERE' 'age' '>' '(' 'SELECT' 'min' '('
 'age' ')' 'FROM' 'person' 'WHERE' 'job' '=' ""'engineer"" ""'"" ')' 'ORDER'
 'BY' 'age']","['select' 'name' 'from' 'person' 'where' 'age' '>' '(' 'select' 'min' '('
 'age' ')' 'from' 'person' 'where' 'job' '=' 'value' ')' 'order' 'by'
 'age']","['Find' 'the' 'name' 'of' 'people' 'whose' 'age' 'is' 'greater' 'than'
 'any' 'engineer' 'sorted' 'by' 'their' 'age' '.']","['CREATE TABLE Person ( name varchar(20) PRIMARY KEY, age INTEGER, city TEXT, gender TEXT, job TEXT )', 'CREATE TABLE PersonFriend ( name varchar(20), friend varchar(20), year INTEGER, FOREIGN KEY (name) REFERENCES Person(name), FOREIGN KEY (friend) REFERENCES Person(name) )']"
3744,program_share,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning',Find the names of the channels that are broadcast in the morning.,"['SELECT' 't1.name' 'FROM' 'channel' 'AS' 't1' 'JOIN' 'broadcast' 'AS'
 't2' 'ON' 't1.channel_id' '=' 't2.channel_id' 'WHERE' 't2.time_of_day'
 '=' ""'Morning"" ""'""]","['select' 't1' '.' 'name' 'from' 'channel' 'as' 't1' 'join' 'broadcast'
 'as' 't2' 'on' 't1' '.' 'channel_id' '=' 't2' '.' 'channel_id' 'where'
 't2' '.' 'time_of_day' '=' 'value']","['Find' 'the' 'names' 'of' 'the' 'channels' 'that' 'are' 'broadcast' 'in'
 'the' 'morning' '.']","['CREATE TABLE ""program"" ( ""Program_ID"" int, ""Name"" text, ""Origin"" text, ""Launch"" real, ""Owner"" text, PRIMARY KEY (""Program_ID"") )', 'CREATE TABLE ""channel"" ( ""Channel_ID"" int, ""Name"" text, ""Owner"" text, ""Share_in_percent"" real, ""Rating_in_percent"" real, PRIMARY KEY (""Channel_ID"") )', 'CREATE TABLE ""broadcast"" ( ""Channel_ID"" int, ""Program_ID"" int, ""Time_of_day"" text, PRIMARY KEY (""Channel_ID"",""Program_ID""), FOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`), FOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`) )', 'CREATE TABLE ""broadcast_share"" ( ""Channel_ID"" int, ""Program_ID"" int, ""Date"" text, ""Share_in_percent"" real, PRIMARY KEY (""Channel_ID"",""Program_ID""), FOREIGN KEY (`Channel_ID`) REFERENCES `channel`(`Channel_ID`), FOREIGN KEY (`Program_ID`) REFERENCES `program`(`Program_ID`) )']"
3324,college_1,"SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?,"['SELECT' 'DISTINCT' 'T2.emp_fname' ',' 'T3.prof_high_degree' 'FROM'
 'CLASS' 'AS' 'T1' 'JOIN' 'employee' 'AS' 'T2' 'ON' 'T1.prof_num' '='
 'T2.emp_num' 'JOIN' 'professor' 'AS' 'T3' 'ON' 'T2.emp_num' '='
 'T3.emp_num' 'JOIN' 'department' 'AS' 'T4' 'ON' 'T4.dept_code' '='
 'T3.dept_code' 'WHERE' 'T4.dept_name' '=' ""'Computer"" 'Info' '.'
 'Systems' ""'""]","['select' 'distinct' 't2' '.' 'emp_fname' ',' 't3' '.' 'prof_high_degree'
 'from' 'class' 'as' 't1' 'join' 'employee' 'as' 't2' 'on' 't1' '.'
 'prof_num' '=' 't2' '.' 'emp_num' 'join' 'professor' 'as' 't3' 'on' 't2'
 '.' 'emp_num' '=' 't3' '.' 'emp_num' 'join' 'department' 'as' 't4' 'on'
 't4' '.' 'dept_code' '=' 't3' '.' 'dept_code' 'where' 't4' '.'
 'dept_name' '=' 'value']","['What' 'are' 'the' 'different' 'first' 'names' 'and' 'highest' 'degree'
 'attained' 'for' 'professors' 'teaching' 'in' 'the' 'Computer'
 'Information' 'Systems' 'department' '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
5058,device,SELECT avg(Quantity) FROM stock,What is the average quantity of stocks?,['SELECT' 'avg' '(' 'Quantity' ')' 'FROM' 'stock'],['select' 'avg' '(' 'quantity' ')' 'from' 'stock'],['What' 'is' 'the' 'average' 'quantity' 'of' 'stocks' '?'],"['CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") )', 'CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) )']"
792,coffee_shop,"SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30",Find the ids and names of members who are under age 30 or with black membership card.,"['SELECT' 'name' ',' 'member_id' 'FROM' 'member' 'WHERE' 'Membership_card'
 '=' ""'Black"" ""'"" 'OR' 'age' '<' '30']","['select' 'name' ',' 'member_id' 'from' 'member' 'where' 'membership_card'
 '=' 'value' 'or' 'age' '<' 'value']","['Find' 'the' 'ids' 'and' 'names' 'of' 'members' 'who' 'are' 'under' 'age'
 '30' 'or' 'with' 'black' 'membership' 'card' '.']","['CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Address"" text, ""Num_of_staff"" text, ""Score"" real, ""Open_Year"" text, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Membership_card"" text, ""Age"" int, ""Time_of_purchase"" int, ""Level_of_membership"" int, ""Address"" text, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""happy_hour"" ( ""HH_ID"" int, ""Shop_ID"" int, ""Month"" text, ""Num_of_shaff_in_charge"" int, PRIMARY KEY (""HH_ID"",""Shop_ID"",""Month""), FOREIGN KEY (""Shop_ID"") REFERENCES `shop`(""Shop_ID"") )', 'CREATE TABLE ""happy_hour_member"" ( ""HH_ID"" int, ""Member_ID"" int, ""Total_amount"" real, PRIMARY KEY (""HH_ID"",""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID"") )']"
6737,activity_1,SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1,Which building has most faculty members?,"['SELECT' 'building' 'FROM' 'Faculty' 'GROUP' 'BY' 'building' 'ORDER' 'BY'
 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'building' 'from' 'faculty' 'group' 'by' 'building' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']",['Which' 'building' 'has' 'most' 'faculty' 'members' '?'],"['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
1857,wrestler,"SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",Give the names of wrestlers and their elimination moves.,"['SELECT' 'T2.Name' ',' 'T1.Elimination_Move' 'FROM' 'elimination' 'AS'
 'T1' 'JOIN' 'wrestler' 'AS' 'T2' 'ON' 'T1.Wrestler_ID' '='
 'T2.Wrestler_ID']","['select' 't2' '.' 'name' ',' 't1' '.' 'elimination_move' 'from'
 'elimination' 'as' 't1' 'join' 'wrestler' 'as' 't2' 'on' 't1' '.'
 'wrestler_id' '=' 't2' '.' 'wrestler_id']","['Give' 'the' 'names' 'of' 'wrestlers' 'and' 'their' 'elimination' 'moves'
 '.']","['CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") )', 'CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") )']"
2639,inn_1,"SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room","For each room, find its name and the number of times reservations were made for it.","['SELECT' 'T2.roomName' ',' 'count' '(' '*' ')' ',' 'T1.Room' 'FROM'
 'Reservations' 'AS' 'T1' 'JOIN' 'Rooms' 'AS' 'T2' 'ON' 'T1.Room' '='
 'T2.RoomId' 'GROUP' 'BY' 'T1.Room']","['select' 't2' '.' 'roomname' ',' 'count' '(' '*' ')' ',' 't1' '.' 'room'
 'from' 'reservations' 'as' 't1' 'join' 'rooms' 'as' 't2' 'on' 't1' '.'
 'room' '=' 't2' '.' 'roomid' 'group' 'by' 't1' '.' 'room']","['For' 'each' 'room' ',' 'find' 'its' 'name' 'and' 'the' 'number' 'of'
 'times' 'reservations' 'were' 'made' 'for' 'it' '.']","['CREATE TABLE ""Rooms"" ( \t""RoomId"" TEXT PRIMARY KEY,\t""roomName"" TEXT, \t""beds"" INTEGER, \t""bedType"" TEXT, \t""maxOccupancy"" INTEGER, \t""basePrice"" INTEGER, \t""decor"" TEXT);', 'CREATE TABLE ""Reservations"" ( \t""Code"" INTEGER PRIMARY KEY, \t""Room"" TEXT, \t""CheckIn"" TEXT, \t""CheckOut"" TEXT, \t""Rate"" REAL, \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Adults"" INTEGER, \t""Kids"" INTEGER,\tFOREIGN KEY (Room) REFERENCES Rooms(RoomId));']"
330,product_catalog,"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  ""8""",What are the names of catalog entries with level number 8?,"['SELECT' 't1.catalog_entry_name' 'FROM' 'Catalog_Contents' 'AS' 't1'
 'JOIN' 'Catalog_Contents_Additional_Attributes' 'AS' 't2' 'ON'
 't1.catalog_entry_id' '=' 't2.catalog_entry_id' 'WHERE'
 't2.catalog_level_number' '=' '``' '8' ""''""]","['select' 't1' '.' 'catalog_entry_name' 'from' 'catalog_contents' 'as'
 't1' 'join' 'catalog_contents_additional_attributes' 'as' 't2' 'on' 't1'
 '.' 'catalog_entry_id' '=' 't2' '.' 'catalog_entry_id' 'where' 't2' '.'
 'catalog_level_number' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'catalog' 'entries' 'with' 'level'
 'number' '8' '?']","['CREATE TABLE `Attribute_Definitions` ( `attribute_id` INTEGER PRIMARY KEY, `attribute_name` VARCHAR(30), `attribute_data_type` VARCHAR(10) )', 'CREATE TABLE `Catalogs` ( `catalog_id` INTEGER PRIMARY KEY, `catalog_name` VARCHAR(50), `catalog_publisher` VARCHAR(80), `date_of_publication` DATETIME, `date_of_latest_revision` DATETIME )', 'CREATE TABLE `Catalog_Structure` ( `catalog_level_number` INTEGER PRIMARY KEY, `catalog_id` INTEGER NOT NULL, `catalog_level_name` VARCHAR(50), FOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` ) )', 'CREATE TABLE `Catalog_Contents` ( `catalog_entry_id` INTEGER PRIMARY KEY, `catalog_level_number` INTEGER NOT NULL, `parent_entry_id` INTEGER, `previous_entry_id` INTEGER, `next_entry_id` INTEGER, `catalog_entry_name` VARCHAR(80), `product_stock_number` VARCHAR(50), `price_in_dollars` DOUBLE NULL, `price_in_euros` DOUBLE NULL, `price_in_pounds` DOUBLE NULL, `capacity` VARCHAR(20), `length` VARCHAR(20), `height` VARCHAR(20), `width` VARCHAR(20), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) )', 'CREATE TABLE `Catalog_Contents_Additional_Attributes` ( `catalog_entry_id` INTEGER NOT NULL, `catalog_level_number` INTEGER NOT NULL, `attribute_id` INTEGER NOT NULL, `attribute_value` VARCHAR(255) NOT NULL, FOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) )']"
2774,election,"SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",Show the name of each county along with the corresponding number of delegates from that county.,"['SELECT' 'T1.County_name' ',' 'COUNT' '(' '*' ')' 'FROM' 'county' 'AS'
 'T1' 'JOIN' 'election' 'AS' 'T2' 'ON' 'T1.County_id' '=' 'T2.District'
 'GROUP' 'BY' 'T1.County_id']","['select' 't1' '.' 'county_name' ',' 'count' '(' '*' ')' 'from' 'county'
 'as' 't1' 'join' 'election' 'as' 't2' 'on' 't1' '.' 'county_id' '=' 't2'
 '.' 'district' 'group' 'by' 't1' '.' 'county_id']","['Show' 'the' 'name' 'of' 'each' 'county' 'along' 'with' 'the'
 'corresponding' 'number' 'of' 'delegates' 'from' 'that' 'county' '.']","['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
4986,soccer_2,"SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",Find the number of students who participate in the tryout for each college ordered by descending count.,"['SELECT' 'count' '(' '*' ')' ',' 'cName' 'FROM' 'tryout' 'GROUP' 'BY'
 'cName' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC']","['select' 'count' '(' '*' ')' ',' 'cname' 'from' 'tryout' 'group' 'by'
 'cname' 'order' 'by' 'count' '(' '*' ')' 'desc']","['Find' 'the' 'number' 'of' 'students' 'who' 'participate' 'in' 'the'
 'tryout' 'for' 'each' 'college' 'ordered' 'by' 'descending' 'count' '.']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
6670,driving_school,SELECT count(*) FROM Customers;,How many customers in total?,['SELECT' 'count' '(' '*' ')' 'FROM' 'Customers' ';'],['select' 'count' '(' '*' ')' 'from' 'customers'],['How' 'many' 'customers' 'in' 'total' '?'],"['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
1607,customers_and_invoices,"SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",Show the order ids and the number of invoices for each order.,"['SELECT' 'order_id' ',' 'count' '(' '*' ')' 'FROM' 'Invoices' 'GROUP'
 'BY' 'order_id']","['select' 'order_id' ',' 'count' '(' '*' ')' 'from' 'invoices' 'group'
 'by' 'order_id']","['Show' 'the' 'order' 'ids' 'and' 'the' 'number' 'of' 'invoices' 'for'
 'each' 'order' '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
4056,student_1,"SELECT DISTINCT firstname ,  lastname FROM list",Report the first name and last name of all the students.,"['SELECT' 'DISTINCT' 'firstname' ',' 'lastname' 'FROM' 'list']","['select' 'distinct' 'firstname' ',' 'lastname' 'from' 'list']","['Report' 'the' 'first' 'name' 'and' 'last' 'name' 'of' 'all' 'the'
 'students' '.']","['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
6618,train_station,SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station),Show station names without any trains.,"['SELECT' 'name' 'FROM' 'station' 'WHERE' 'station_id' 'NOT' 'IN' '('
 'SELECT' 'station_id' 'FROM' 'train_station' ')']","['select' 'name' 'from' 'station' 'where' 'station_id' 'not' 'in' '('
 'select' 'station_id' 'from' 'train_station' ')']",['Show' 'station' 'names' 'without' 'any' 'trains' '.'],"['CREATE TABLE ""station"" ( ""Station_ID"" int, ""Name"" text, ""Annual_entry_exit"" real, ""Annual_interchanges"" real, ""Total_Passengers"" real, ""Location"" text, ""Main_Services"" text, ""Number_of_Platforms"" int, PRIMARY KEY (""Station_ID"") )', 'CREATE TABLE ""train"" ( ""Train_ID"" int, ""Name"" text, ""Time"" text, ""Service"" text, PRIMARY KEY (""Train_ID"") )', 'CREATE TABLE ""train_station"" ( ""Train_ID"" int, ""Station_ID"" int, PRIMARY KEY (""Train_ID"",""Station_ID""), FOREIGN KEY (""Train_ID"") REFERENCES ""train""(""Train_ID""), FOREIGN KEY (""Station_ID"") REFERENCES ""station""(""Station_ID"") )']"
5312,manufactory_1,"SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name","Find the average prices of all products from each manufacture, and list each company's name.","['SELECT' 'avg' '(' 'T1.price' ')' ',' 'T2.name' 'FROM' 'products' 'AS'
 'T1' 'JOIN' 'manufacturers' 'AS' 'T2' 'ON' 'T1.Manufacturer' '='
 'T2.code' 'GROUP' 'BY' 'T2.name']","['select' 'avg' '(' 't1' '.' 'price' ')' ',' 't2' '.' 'name' 'from'
 'products' 'as' 't1' 'join' 'manufacturers' 'as' 't2' 'on' 't1' '.'
 'manufacturer' '=' 't2' '.' 'code' 'group' 'by' 't2' '.' 'name']","['Find' 'the' 'average' 'prices' 'of' 'all' 'products' 'from' 'each'
 'manufacture' ',' 'and' 'list' 'each' 'company' ""'s"" 'name' '.']","['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
2400,candidate_poll,SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1,Find the id of the candidate who got the lowest oppose rate.,"['SELECT' 'Candidate_ID' 'FROM' 'candidate' 'ORDER' 'BY' 'oppose_rate'
 'LIMIT' '1']","['select' 'candidate_id' 'from' 'candidate' 'order' 'by' 'oppose_rate'
 'limit' 'value']","['Find' 'the' 'id' 'of' 'the' 'candidate' 'who' 'got' 'the' 'lowest'
 'oppose' 'rate' '.']","['CREATE TABLE ""candidate"" ( ""Candidate_ID"" int, ""People_ID"" int, ""Poll_Source"" text, ""Date"" text, ""Support_rate"" real, ""Consider_rate"" real, ""Oppose_rate"" real, ""Unsure_rate"" real, PRIMARY KEY (""Candidate_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Sex"" text, ""Name"" text, ""Date_of_Birth"" text, ""Height"" real, ""Weight"" real, PRIMARY KEY (""People_ID"") )']"
2902,icfp_1,SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1,Find the name of the organization that has published the largest number of papers.,"['SELECT' 't1.name' 'FROM' 'inst' 'AS' 't1' 'JOIN' 'authorship' 'AS' 't2'
 'ON' 't1.instid' '=' 't2.instid' 'JOIN' 'papers' 'AS' 't3' 'ON'
 't2.paperid' '=' 't3.paperid' 'GROUP' 'BY' 't1.name' 'ORDER' 'BY' 'count'
 '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'name' 'from' 'inst' 'as' 't1' 'join' 'authorship' 'as'
 't2' 'on' 't1' '.' 'instid' '=' 't2' '.' 'instid' 'join' 'papers' 'as'
 't3' 'on' 't2' '.' 'paperid' '=' 't3' '.' 'paperid' 'group' 'by' 't1' '.'
 'name' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Find' 'the' 'name' 'of' 'the' 'organization' 'that' 'has' 'published'
 'the' 'largest' 'number' 'of' 'papers' '.']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
1892,school_finance,"SELECT county ,  count(*) ,  sum(enrollment) FROM school GROUP BY county",Show each county along with the number of schools and total enrollment in each county.,"['SELECT' 'county' ',' 'count' '(' '*' ')' ',' 'sum' '(' 'enrollment' ')'
 'FROM' 'school' 'GROUP' 'BY' 'county']","['select' 'county' ',' 'count' '(' '*' ')' ',' 'sum' '(' 'enrollment' ')'
 'from' 'school' 'group' 'by' 'county']","['Show' 'each' 'county' 'along' 'with' 'the' 'number' 'of' 'schools' 'and'
 'total' 'enrollment' 'in' 'each' 'county' '.']","['CREATE TABLE ""School"" ( ""School_id"" text, ""School_name"" text, ""Location"" text, ""Mascot"" text, ""Enrollment"" int, ""IHSAA_Class"" text, ""IHSAA_Football_Class"" text, ""County"" text, PRIMARY KEY (""School_id"") )', 'CREATE TABLE ""budget"" ( ""School_id"" int, ""Year"" int, ""Budgeted"" int, ""total_budget_percent_budgeted"" real, ""Invested"" int, ""total_budget_percent_invested"" real, ""Budget_invested_percent"" text, PRIMARY KEY(""School_id"",""YEAR""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"") )', 'CREATE TABLE ""endowment"" ( ""endowment_id"" int, ""School_id"" int, ""donator_name"" text, ""amount"" real, PRIMARY KEY(""endowment_id""), FOREIGN KEY(""School_id"") REFERENCES ""School""(""School_id"") )']"
2815,news_report,SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1,Show the names of journalists that have reported more than one event.,"['SELECT' 'T3.Name' 'FROM' 'news_report' 'AS' 'T1' 'JOIN' 'event' 'AS'
 'T2' 'ON' 'T1.Event_ID' '=' 'T2.Event_ID' 'JOIN' 'journalist' 'AS' 'T3'
 'ON' 'T1.journalist_ID' '=' 'T3.journalist_ID' 'GROUP' 'BY' 'T3.Name'
 'HAVING' 'COUNT' '(' '*' ')' '>' '1']","['select' 't3' '.' 'name' 'from' 'news_report' 'as' 't1' 'join' 'event'
 'as' 't2' 'on' 't1' '.' 'event_id' '=' 't2' '.' 'event_id' 'join'
 'journalist' 'as' 't3' 'on' 't1' '.' 'journalist_id' '=' 't3' '.'
 'journalist_id' 'group' 'by' 't3' '.' 'name' 'having' 'count' '(' '*' ')'
 '>' 'value']","['Show' 'the' 'names' 'of' 'journalists' 'that' 'have' 'reported' 'more'
 'than' 'one' 'event' '.']","['CREATE TABLE ""event"" ( ""Event_ID"" int, ""Date"" text, ""Venue"" text, ""Name"" text, ""Event_Attendance"" int, PRIMARY KEY (""Event_ID"") )', 'CREATE TABLE ""journalist"" ( ""journalist_ID"" int, ""Name"" text, ""Nationality"" text, ""Age"" text, ""Years_working"" int, PRIMARY KEY (""journalist_ID"") )', 'CREATE TABLE ""news_report"" ( ""journalist_ID"" int, ""Event_ID"" int, ""Work_Type"" text, PRIMARY KEY (""journalist_ID"",""Event_ID""), FOREIGN KEY (""journalist_ID"") REFERENCES `journalist`(""journalist_ID""), FOREIGN KEY (""Event_ID"") REFERENCES `event`(""Event_ID"") )']"
5539,products_gen_characteristics,"SELECT product_category_code FROM products WHERE product_name  =  ""flax""",What is the code of the category that the product with the name 'flax' belongs to?,"['SELECT' 'product_category_code' 'FROM' 'products' 'WHERE' 'product_name'
 '=' '``' 'flax' ""''""]","['select' 'product_category_code' 'from' 'products' 'where' 'product_name'
 '=' 'value']","['What' 'is' 'the' 'code' 'of' 'the' 'category' 'that' 'the' 'product'
 'with' 'the' 'name' ""'flax"" ""'"" 'belongs' 'to' '?']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
6009,game_1,"SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  ""Football"" AND onscholarship  =  'Y'",How many games are played for all football games by students on scholarship?,"['SELECT' 'sum' '(' 'gamesplayed' ')' 'FROM' 'Sportsinfo' 'WHERE'
 'sportname' '=' '``' 'Football' ""''"" 'AND' 'onscholarship' '=' ""'Y"" ""'""]","['select' 'sum' '(' 'gamesplayed' ')' 'from' 'sportsinfo' 'where'
 'sportname' '=' 'value' 'and' 'onscholarship' '=' 'value']","['How' 'many' 'games' 'are' 'played' 'for' 'all' 'football' 'games' 'by'
 'students' 'on' 'scholarship' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
6708,driving_school,"SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = ""Ray""",How many lesson does customer with first name Ray took?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'Lessons' 'AS' 'T1' 'JOIN'
 'Customers' 'AS' 'T2' 'ON' 'T1.customer_id' '=' 'T2.customer_id' 'WHERE'
 'T2.first_name' '=' '``' 'Ray' ""''""]","['select' 'count' '(' '*' ')' 'from' 'lessons' 'as' 't1' 'join'
 'customers' 'as' 't2' 'on' 't1' '.' 'customer_id' '=' 't2' '.'
 'customer_id' 'where' 't2' '.' 'first_name' '=' 'value']","['How' 'many' 'lesson' 'does' 'customer' 'with' 'first' 'name' 'Ray'
 'took' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_address_id` INTEGER NOT NULL, `nickname` VARCHAR(80), `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `date_of_birth` DATETIME, `date_joined_staff` DATETIME, `date_left_staff` DATETIME, FOREIGN KEY (`staff_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Vehicles` ( `vehicle_id` INTEGER PRIMARY KEY, `vehicle_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_address_id` INTEGER NOT NULL, `customer_status_code` VARCHAR(15) NOT NULL, `date_became_customer` DATETIME, `date_of_birth` DATETIME, `first_name` VARCHAR(80), `last_name` VARCHAR(80), `amount_outstanding` DOUBLE NULL, `email_address` VARCHAR(250), `phone_number` VARCHAR(255), `cell_mobile_phone_number` VARCHAR(255), FOREIGN KEY (`customer_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Customer_Payments` ( `customer_id` INTEGER NOT NULL, `datetime_payment` DATETIME NOT NULL, `payment_method_code` VARCHAR(10) NOT NULL, `amount_payment` DOUBLE NULL, PRIMARY KEY (`customer_id`,`datetime_payment`), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Lessons` ( `lesson_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `lesson_status_code` VARCHAR(15) NOT NULL, `staff_id` INTEGER, `vehicle_id` INTEGER NOT NULL, `lesson_date` DATETIME, `lesson_time` VARCHAR(10), `price` DOUBLE NULL, FOREIGN KEY (`vehicle_id` ) REFERENCES `Vehicles`(`vehicle_id` ), FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )']"
2034,gas_company,SELECT LOCATION FROM gas_station ORDER BY open_year,What are the locations of all the gas stations ordered by opening year?,['SELECT' 'LOCATION' 'FROM' 'gas_station' 'ORDER' 'BY' 'open_year'],['select' 'location' 'from' 'gas_station' 'order' 'by' 'open_year'],"['What' 'are' 'the' 'locations' 'of' 'all' 'the' 'gas' 'stations'
 'ordered' 'by' 'opening' 'year' '?']","['CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") )', 'CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") )', 'CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) )']"
6516,scientist_1,"SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)","What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?","['SELECT' 'T2.name' ',' 'T3.name' 'FROM' 'assignedto' 'AS' 'T1' 'JOIN'
 'projects' 'AS' 'T2' 'ON' 'T1.project' '=' 'T2.code' 'JOIN' 'scientists'
 'AS' 'T3' 'ON' 'T1.scientist' '=' 'T3.SSN' 'WHERE' 'T2.hours' '=' '('
 'SELECT' 'min' '(' 'hours' ')' 'FROM' 'projects' ')']","['select' 't2' '.' 'name' ',' 't3' '.' 'name' 'from' 'assignedto' 'as'
 't1' 'join' 'projects' 'as' 't2' 'on' 't1' '.' 'project' '=' 't2' '.'
 'code' 'join' 'scientists' 'as' 't3' 'on' 't1' '.' 'scientist' '=' 't3'
 '.' 'ssn' 'where' 't2' '.' 'hours' '=' '(' 'select' 'min' '(' 'hours' ')'
 'from' 'projects' ')']","['What' 'is' 'the' 'name' 'of' 'the' 'project' 'that' 'requires' 'the'
 'fewest' 'number' 'of' 'hours' ',' 'and' 'the' 'names' 'of' 'the'
 'scientists' 'assigned' 'to' 'it' '?']","['CREATE TABLE Scientists ( SSN int, Name Char(30) not null, Primary Key (SSN) )', 'CREATE TABLE Projects ( Code Char(4), Name Char(50) not null, Hours int, Primary Key (Code) )', 'CREATE TABLE AssignedTo ( Scientist int not null, Project char(4) not null, Primary Key (Scientist, Project), Foreign Key (Scientist) references Scientists (SSN), Foreign Key (Project) references Projects (Code) )']"
3094,behavior_monitoring,"SELECT email_address FROM Students WHERE first_name  =  ""Emma"" AND last_name  =  ""Rohan""","What is the email of the student with first name ""Emma"" and last name ""Rohan""?","['SELECT' 'email_address' 'FROM' 'Students' 'WHERE' 'first_name' '=' '``'
 'Emma' ""''"" 'AND' 'last_name' '=' '``' 'Rohan' ""''""]","['select' 'email_address' 'from' 'students' 'where' 'first_name' '='
 'value' 'and' 'last_name' '=' 'value']","['What' 'is' 'the' 'email' 'of' 'the' 'student' 'with' 'first' 'name' '``'
 'Emma' ""''"" 'and' 'last' 'name' '``' 'Rohan' ""''"" '?']","['CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) )', 'CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) )', 'CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) )', 'CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )']"
2434,movie_1,SELECT title FROM Movie WHERE director = 'Steven Spielberg',Find the titles of all movies directed by steven spielberg.,"['SELECT' 'title' 'FROM' 'Movie' 'WHERE' 'director' '=' ""'Steven""
 'Spielberg' ""'""]",['select' 'title' 'from' 'movie' 'where' 'director' '=' 'value'],"['Find' 'the' 'titles' 'of' 'all' 'movies' 'directed' 'by' 'steven'
 'spielberg' '.']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
2740,election,"SELECT max(Population) ,  min(Population) FROM county",Return the maximum and minimum population among all counties.,"['SELECT' 'max' '(' 'Population' ')' ',' 'min' '(' 'Population' ')' 'FROM'
 'county']","['select' 'max' '(' 'population' ')' ',' 'min' '(' 'population' ')' 'from'
 'county']","['Return' 'the' 'maximum' 'and' 'minimum' 'population' 'among' 'all'
 'counties' '.']","['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
5100,cre_Drama_Workshop_Groups,SELECT Store_Name FROM Drama_Workshop_Groups,Show all the Store_Name of drama workshop groups.,['SELECT' 'Store_Name' 'FROM' 'Drama_Workshop_Groups'],['select' 'store_name' 'from' 'drama_workshop_groups'],['Show' 'all' 'the' 'Store_Name' 'of' 'drama' 'workshop' 'groups' '.'],"['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
2373,csu_1,SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002,"How many faculty, in total, are there in the year 2002?","['SELECT' 'sum' '(' 'faculty' ')' 'FROM' 'faculty' 'WHERE' 'YEAR' '='
 '2002']","['select' 'sum' '(' 'faculty' ')' 'from' 'faculty' 'where' 'year' '='
 'value']","['How' 'many' 'faculty' ',' 'in' 'total' ',' 'are' 'there' 'in' 'the'
 'year' '2002' '?']","['CREATE TABLE ""Campuses"" ( ""Id"" INTEGER PRIMARY KEY, ""Campus"" TEXT, ""Location"" TEXT, ""County"" TEXT, ""Year"" INTEGER )', 'CREATE TABLE ""csu_fees"" ( ""Campus"" INTEGER PRIMARY KEY, ""Year"" INTEGER, ""CampusFee"" INTEGER, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""degrees"" ( ""Year"" INTEGER, ""Campus"" INTEGER, ""Degrees"" INTEGER, PRIMARY KEY (Year, Campus), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""discipline_enrollments"" ( ""Campus"" INTEGER, ""Discipline"" INTEGER, ""Year"" INTEGER, ""Undergraduate"" INTEGER, ""Graduate"" INTEGER, PRIMARY KEY (Campus, Discipline), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""enrollments"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""TotalEnrollment_AY"" INTEGER, ""FTE_AY"" INTEGER, PRIMARY KEY(Campus, Year), FOREIGN KEY (Campus) REFERENCES Campuses(Id) )', 'CREATE TABLE ""faculty"" ( ""Campus"" INTEGER, ""Year"" INTEGER, ""Faculty"" REAL, FOREIGN KEY (Campus) REFERENCES Campuses(Id) )']"
106,student_assessment,"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.registration_date",What are the ids of the students who registered course statistics by order of registration date?,"['SELECT' 'T2.student_id' 'FROM' 'courses' 'AS' 'T1' 'JOIN'
 'student_course_registrations' 'AS' 'T2' 'ON' 'T1.course_id' '='
 'T2.course_id' 'WHERE' 'T1.course_name' '=' '``' 'statistics' ""''""
 'ORDER' 'BY' 'T2.registration_date']","['select' 't2' '.' 'student_id' 'from' 'courses' 'as' 't1' 'join'
 'student_course_registrations' 'as' 't2' 'on' 't1' '.' 'course_id' '='
 't2' '.' 'course_id' 'where' 't1' '.' 'course_name' '=' 'value' 'order'
 'by' 't2' '.' 'registration_date']","['What' 'are' 'the' 'ids' 'of' 'the' 'students' 'who' 'registered'
 'course' 'statistics' 'by' 'order' 'of' 'registration' 'date' '?']","['CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) )', 'CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) )', 'CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) )', 'CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) )', 'CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) )', 'CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) )', 'CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) )', 'CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) )', 'CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) )']"
847,chinook_1,"SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE ""%gmail.com%""","How many customers have email that contains ""gmail.com""?","['SELECT' 'COUNT' '(' '*' ')' 'FROM' 'CUSTOMER' 'WHERE' 'Email' 'LIKE'
 '``' '%' 'gmail.com' '%' ""''""]","['select' 'count' '(' '*' ')' 'from' 'customer' 'where' 'email' 'like'
 'value']","['How' 'many' 'customers' 'have' 'email' 'that' 'contains' '``'
 'gmail.com' ""''"" '?']","['CREATE TABLE `Album` ( `AlbumId` integer NOT NULL , `Title` varchar(160) NOT NULL , `ArtistId` integer NOT NULL , PRIMARY KEY (`AlbumId`) , CONSTRAINT `FK_AlbumArtistId` FOREIGN KEY (`ArtistId`) REFERENCES `Artist` (`ArtistId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Artist` ( `ArtistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`ArtistId`) )', 'CREATE TABLE `Customer` ( `CustomerId` integer NOT NULL , `FirstName` varchar(40) NOT NULL , `LastName` varchar(20) NOT NULL , `Company` varchar(80) DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) NOT NULL , `SupportRepId` integer DEFAULT NULL , PRIMARY KEY (`CustomerId`) , CONSTRAINT `FK_CustomerSupportRepId` FOREIGN KEY (`SupportRepId`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Employee` ( `EmployeeId` integer NOT NULL , `LastName` varchar(20) NOT NULL , `FirstName` varchar(20) NOT NULL , `Title` varchar(30) DEFAULT NULL , `ReportsTo` integer DEFAULT NULL , `BirthDate` datetime DEFAULT NULL , `HireDate` datetime DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) DEFAULT NULL , PRIMARY KEY (`EmployeeId`) , CONSTRAINT `FK_EmployeeReportsTo` FOREIGN KEY (`ReportsTo`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Genre` ( `GenreId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`GenreId`) )', 'CREATE TABLE `Invoice` ( `InvoiceId` integer NOT NULL , `CustomerId` integer NOT NULL , `InvoiceDate` datetime NOT NULL , `BillingAddress` varchar(70) DEFAULT NULL , `BillingCity` varchar(40) DEFAULT NULL , `BillingState` varchar(40) DEFAULT NULL , `BillingCountry` varchar(40) DEFAULT NULL , `BillingPostalCode` varchar(10) DEFAULT NULL , `Total` decimal(10,2) NOT NULL , PRIMARY KEY (`InvoiceId`) , CONSTRAINT `FK_InvoiceCustomerId` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `InvoiceLine` ( `InvoiceLineId` integer NOT NULL , `InvoiceId` integer NOT NULL , `TrackId` integer NOT NULL , `UnitPrice` decimal(10,2) NOT NULL , `Quantity` integer NOT NULL , PRIMARY KEY (`InvoiceLineId`) , CONSTRAINT `FK_InvoiceLineInvoiceId` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_InvoiceLineTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `MediaType` ( `MediaTypeId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`MediaTypeId`) )', 'CREATE TABLE `Playlist` ( `PlaylistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`PlaylistId`) )', 'CREATE TABLE `PlaylistTrack` ( `PlaylistId` integer NOT NULL , `TrackId` integer NOT NULL , PRIMARY KEY (`PlaylistId`,`TrackId`) , CONSTRAINT `FK_PlaylistTrackPlaylistId` FOREIGN KEY (`PlaylistId`) REFERENCES `Playlist` (`PlaylistId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_PlaylistTrackTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Track` ( `TrackId` integer NOT NULL , `Name` varchar(200) NOT NULL , `AlbumId` integer DEFAULT NULL , `MediaTypeId` integer NOT NULL , `GenreId` integer DEFAULT NULL , `Composer` varchar(220) DEFAULT NULL , `Milliseconds` integer NOT NULL , `Bytes` integer DEFAULT NULL , `UnitPrice` decimal(10,2) NOT NULL , PRIMARY KEY (`TrackId`) , CONSTRAINT `FK_TrackAlbumId` FOREIGN KEY (`AlbumId`) REFERENCES `Album` (`AlbumId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackGenreId` FOREIGN KEY (`GenreId`) REFERENCES `Genre` (`GenreId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackMediaTypeId` FOREIGN KEY (`MediaTypeId`) REFERENCES `MediaType` (`MediaTypeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
3214,college_1,SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1,Which school has the fewest professors?,"['SELECT' 'T1.school_code' 'FROM' 'department' 'AS' 'T1' 'JOIN'
 'professor' 'AS' 'T2' 'ON' 'T1.dept_code' '=' 'T2.dept_code' 'GROUP' 'BY'
 'T1.school_code' 'ORDER' 'BY' 'count' '(' '*' ')' 'LIMIT' '1']","['select' 't1' '.' 'school_code' 'from' 'department' 'as' 't1' 'join'
 'professor' 'as' 't2' 'on' 't1' '.' 'dept_code' '=' 't2' '.' 'dept_code'
 'group' 'by' 't1' '.' 'school_code' 'order' 'by' 'count' '(' '*' ')'
 'limit' 'value']",['Which' 'school' 'has' 'the' 'fewest' 'professors' '?'],"['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
500,allergy_1,"SELECT advisor ,  count(*) FROM Student GROUP BY advisor",How many students does each advisor have?,"['SELECT' 'advisor' ',' 'count' '(' '*' ')' 'FROM' 'Student' 'GROUP' 'BY'
 'advisor']","['select' 'advisor' ',' 'count' '(' '*' ')' 'from' 'student' 'group' 'by'
 'advisor']",['How' 'many' 'students' 'does' 'each' 'advisor' 'have' '?'],"['CREATE TABLE Allergy_Type ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) )', 'CREATE TABLE Has_Allergy ( StuID INTEGER, Allergy VARCHAR(20), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )']"
6005,game_1,SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y',Show last names for all student who are on scholarship.,"['SELECT' 'T2.Lname' 'FROM' 'Sportsinfo' 'AS' 'T1' 'JOIN' 'Student' 'AS'
 'T2' 'ON' 'T1.StuID' '=' 'T2.StuID' 'WHERE' 'T1.onscholarship' '=' ""'Y""
 ""'""]","['select' 't2' '.' 'lname' 'from' 'sportsinfo' 'as' 't1' 'join' 'student'
 'as' 't2' 'on' 't1' '.' 'stuid' '=' 't2' '.' 'stuid' 'where' 't1' '.'
 'onscholarship' '=' 'value']","['Show' 'last' 'names' 'for' 'all' 'student' 'who' 'are' 'on'
 'scholarship' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
502,allergy_1,SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1,Give the advisor with the most students.,"['SELECT' 'advisor' 'FROM' 'Student' 'GROUP' 'BY' 'advisor' 'ORDER' 'BY'
 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'advisor' 'from' 'student' 'group' 'by' 'advisor' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']",['Give' 'the' 'advisor' 'with' 'the' 'most' 'students' '.'],"['CREATE TABLE Allergy_Type ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) )', 'CREATE TABLE Has_Allergy ( StuID INTEGER, Allergy VARCHAR(20), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )']"
3034,loan_1,SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas',Find the total account balance of each customer from Utah or Texas.,"['SELECT' 'sum' '(' 'acc_bal' ')' 'FROM' 'customer' 'WHERE' 'state' '='
 ""'Utah"" ""'"" 'OR' 'state' '=' ""'Texas"" ""'""]","['select' 'sum' '(' 'acc_bal' ')' 'from' 'customer' 'where' 'state' '='
 'value' 'or' 'state' '=' 'value']","['Find' 'the' 'total' 'account' 'balance' 'of' 'each' 'customer' 'from'
 'Utah' 'or' 'Texas' '.']","['CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20))', 'CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID))', 'CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID))']"
5959,cre_Theme_park,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',What are the names of the tourist attractions that have parking or shopping as their feature details?,"['SELECT' 'T1.Name' 'FROM' 'Tourist_Attractions' 'AS' 'T1' 'JOIN'
 'Tourist_Attraction_Features' 'AS' 'T2' 'ON' 'T1.tourist_attraction_id'
 '=' 'T2.tourist_attraction_id' 'JOIN' 'Features' 'AS' 'T3' 'ON'
 'T2.Feature_ID' '=' 'T3.Feature_ID' 'WHERE' 'T3.feature_Details' '='
 ""'park"" ""'"" 'UNION' 'SELECT' 'T1.Name' 'FROM' 'Tourist_Attractions' 'AS'
 'T1' 'JOIN' 'Tourist_Attraction_Features' 'AS' 'T2' 'ON'
 'T1.tourist_attraction_id' '=' 'T2.tourist_attraction_id' 'JOIN'
 'Features' 'AS' 'T3' 'ON' 'T2.Feature_ID' '=' 'T3.Feature_ID' 'WHERE'
 'T3.feature_Details' '=' ""'shopping"" ""'""]","['select' 't1' '.' 'name' 'from' 'tourist_attractions' 'as' 't1' 'join'
 'tourist_attraction_features' 'as' 't2' 'on' 't1' '.'
 'tourist_attraction_id' '=' 't2' '.' 'tourist_attraction_id' 'join'
 'features' 'as' 't3' 'on' 't2' '.' 'feature_id' '=' 't3' '.' 'feature_id'
 'where' 't3' '.' 'feature_details' '=' 'value' 'union' 'select' 't1' '.'
 'name' 'from' 'tourist_attractions' 'as' 't1' 'join'
 'tourist_attraction_features' 'as' 't2' 'on' 't1' '.'
 'tourist_attraction_id' '=' 't2' '.' 'tourist_attraction_id' 'join'
 'features' 'as' 't3' 'on' 't2' '.' 'feature_id' '=' 't3' '.' 'feature_id'
 'where' 't3' '.' 'feature_details' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'tourist' 'attractions' 'that'
 'have' 'parking' 'or' 'shopping' 'as' 'their' 'feature' 'details' '?']","['CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) )', 'CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) )', 'CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) )', 'CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) )', 'CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) )', 'CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) )', 'CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) )']"
2071,party_people,"SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",Show party names and the number of events for each party.,"['SELECT' 'T2.party_name' ',' 'count' '(' '*' ')' 'FROM' 'party_events'
 'AS' 'T1' 'JOIN' 'party' 'AS' 'T2' 'ON' 'T1.party_id' '=' 'T2.party_id'
 'GROUP' 'BY' 'T1.party_id']","['select' 't2' '.' 'party_name' ',' 'count' '(' '*' ')' 'from'
 'party_events' 'as' 't1' 'join' 'party' 'as' 't2' 'on' 't1' '.'
 'party_id' '=' 't2' '.' 'party_id' 'group' 'by' 't1' '.' 'party_id']","['Show' 'party' 'names' 'and' 'the' 'number' 'of' 'events' 'for' 'each'
 'party' '.']","['CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) )', 'CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) )']"
783,race_track,"SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",Show the name and date for each race and its track name.,"['SELECT' 'T1.name' ',' 'T1.date' ',' 'T2.name' 'FROM' 'race' 'AS' 'T1'
 'JOIN' 'track' 'AS' 'T2' 'ON' 'T1.track_id' '=' 'T2.track_id']","['select' 't1' '.' 'name' ',' 't1' '.' 'date' ',' 't2' '.' 'name' 'from'
 'race' 'as' 't1' 'join' 'track' 'as' 't2' 'on' 't1' '.' 'track_id' '='
 't2' '.' 'track_id']","['Show' 'the' 'name' 'and' 'date' 'for' 'each' 'race' 'and' 'its' 'track'
 'name' '.']","['CREATE TABLE ""race"" ( ""Race_ID"" int, ""Name"" text, ""Class"" text, ""Date"" text, ""Track_ID"" text, PRIMARY KEY (""Race_ID""), FOREIGN KEY (""Track_ID"") REFERENCES ""track""(""Track_ID"") )', 'CREATE TABLE ""track"" ( ""Track_ID"" int, ""Name"" text, ""Location"" text, ""Seating"" real, ""Year_Opened"" real, PRIMARY KEY (""Track_ID"") )']"
350,flight_1,SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000,What is the count of aircrafts that have a distance between 1000 and 5000?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'Aircraft' 'WHERE' 'distance'
 'BETWEEN' '1000' 'AND' '5000']","['select' 'count' '(' '*' ')' 'from' 'aircraft' 'where' 'distance'
 'between' 'value' 'and' 'value']","['What' 'is' 'the' 'count' 'of' 'aircrafts' 'that' 'have' 'a' 'distance'
 'between' '1000' 'and' '5000' '?']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
1958,cinema,"SELECT count(*) FROM film WHERE title LIKE ""%Dummy%""",How many films have the word 'Dummy' in their titles?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'film' 'WHERE' 'title' 'LIKE' '``'
 '%' 'Dummy' '%' ""''""]",['select' 'count' '(' '*' ')' 'from' 'film' 'where' 'title' 'like' 'value'],"['How' 'many' 'films' 'have' 'the' 'word' ""'Dummy"" ""'"" 'in' 'their'
 'titles' '?']","['CREATE TABLE ""film"" ( ""Film_ID"" int, ""Rank_in_series"" int, ""Number_in_season"" int, ""Title"" text, ""Directed_by"" text, ""Original_air_date"" text, ""Production_code"" text, PRIMARY KEY (""Film_ID"") )', 'CREATE TABLE ""cinema"" ( ""Cinema_ID"" int, ""Name"" text, ""Openning_year"" int, ""Capacity"" int, ""Location"" text, PRIMARY KEY (""Cinema_ID""))', 'CREATE TABLE ""schedule"" ( ""Cinema_ID"" int, ""Film_ID"" int, ""Date"" text, ""Show_times_per_day"" int, ""Price"" float, PRIMARY KEY (""Cinema_ID"",""Film_ID""), FOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`), FOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`) )']"
2112,cre_Doc_Control_Systems,"SELECT count(*) FROM Documents WHERE document_status_code = ""done"";",How many documents have the status code done?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'Documents' 'WHERE'
 'document_status_code' '=' '``' 'done' ""''"" ';']","['select' 'count' '(' '*' ')' 'from' 'documents' 'where'
 'document_status_code' '=' 'value']",['How' 'many' 'documents' 'have' 'the' 'status' 'code' 'done' '?'],"['CREATE TABLE Ref_Document_Types ( document_type_code CHAR(15) NOT NULL, document_type_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_type_code) )', 'CREATE TABLE Roles ( role_code CHAR(15) NOT NULL, role_description VARCHAR(255), PRIMARY KEY (role_code) )', 'CREATE TABLE Addresses ( address_id INTEGER NOT NULL, address_details VARCHAR(255), PRIMARY KEY (address_id) )', 'CREATE TABLE Ref_Document_Status ( document_status_code CHAR(15) NOT NULL, document_status_description VARCHAR(255) NOT NULL, PRIMARY KEY (document_status_code) )', 'CREATE TABLE Ref_Shipping_Agents ( shipping_agent_code CHAR(15) NOT NULL, shipping_agent_name VARCHAR(255) NOT NULL, shipping_agent_description VARCHAR(255) NOT NULL, PRIMARY KEY (shipping_agent_code) )', 'CREATE TABLE Documents ( document_id INTEGER NOT NULL, document_status_code CHAR(15) NOT NULL, document_type_code CHAR(15) NOT NULL, shipping_agent_code CHAR(15), receipt_date DATETIME, receipt_number VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (document_id), FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types (document_type_code), FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status (document_status_code), FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code) )', 'CREATE TABLE Employees ( employee_id INTEGER NOT NULL, role_code CHAR(15) NOT NULL, employee_name VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (employee_id), FOREIGN KEY (role_code) REFERENCES Roles (role_code) )', 'CREATE TABLE Document_Drafts ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, draft_details VARCHAR(255), PRIMARY KEY (document_id, draft_number), FOREIGN KEY (document_id) REFERENCES Documents (document_id) )', 'CREATE TABLE Draft_Copies ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number), FOREIGN KEY (document_id, draft_number) REFERENCES Document_Drafts (document_id,draft_number) )', 'CREATE TABLE Circulation_History ( document_id INTEGER NOT NULL, draft_number INTEGER NOT NULL, copy_number INTEGER NOT NULL, employee_id INTEGER NOT NULL, PRIMARY KEY (document_id, draft_number, copy_number, employee_id), FOREIGN KEY (document_id, draft_number, copy_number) REFERENCES Draft_Copies (document_id,draft_number,copy_number), FOREIGN KEY (employee_id) REFERENCES Employees (employee_id) )', 'CREATE TABLE Documents_Mailed ( document_id INTEGER NOT NULL, mailed_to_address_id INTEGER NOT NULL, mailing_date DATETIME, PRIMARY KEY (document_id, mailed_to_address_id), FOREIGN KEY (document_id) REFERENCES Documents (document_id), FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses (address_id) )']"
1719,riding_club,SELECT count(*) FROM player,How many players are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'player'],['select' 'count' '(' '*' ')' 'from' 'player'],['How' 'many' 'players' 'are' 'there' '?'],"['CREATE TABLE ""player"" ( ""Player_ID"" int, ""Sponsor_name"" text, ""Player_name"" text, ""Gender"" text, ""Residence"" text, ""Occupation"" text, ""Votes"" int, ""Rank"" text, PRIMARY KEY (""Player_ID"") )', 'CREATE TABLE ""club"" ( ""Club_ID"" int, ""Club_name"" text, ""Region"" text, ""Start_year"" int, PRIMARY KEY (""Club_ID"") )', 'CREATE TABLE ""coach"" ( ""Coach_ID"" int, ""Coach_name"" text, ""Gender"" text, ""Club_ID"" int, ""Rank"" int, PRIMARY KEY (""Coach_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""player_coach"" ( ""Player_ID"" int, ""Coach_ID"" int, ""Starting_year"" int, PRIMARY KEY (""Player_ID"",""Coach_ID""), FOREIGN KEY (`Player_ID`) REFERENCES `player`(`Player_ID`), FOREIGN KEY (`Coach_ID`) REFERENCES `coach`(`Coach_ID`) )', 'CREATE TABLE ""match_result"" ( ""Rank"" int, ""Club_ID"" int, ""Gold"" int, ""Big_Silver"" int, ""Small_Silver"" int, ""Bronze"" int, ""Points"" int, PRIMARY KEY (""Rank"",""Club_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )']"
1099,match_season,SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3,What are the three colleges from which the most players are from?,"['SELECT' 'College' 'FROM' 'match_season' 'GROUP' 'BY' 'College' 'ORDER'
 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '3']","['select' 'college' 'from' 'match_season' 'group' 'by' 'college' 'order'
 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'are' 'the' 'three' 'colleges' 'from' 'which' 'the' 'most'
 'players' 'are' 'from' '?']","['CREATE TABLE ""country"" ( ""Country_id"" int, ""Country_name"" text, ""Capital"" text, ""Official_native_language"" text, PRIMARY KEY (""Country_id"") )', 'CREATE TABLE `team` ( `Team_id` int, `Name` text, PRIMARY KEY (`Team_id`) )', 'CREATE TABLE ""match_season"" ( ""Season"" real, ""Player"" text, ""Position"" text, ""Country"" int, ""Team"" int, ""Draft_Pick_Number"" int, ""Draft_Class"" text, ""College"" text, PRIMARY KEY (""Season""), FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Years_Played"" text, ""Total_WL"" text, ""Singles_WL"" text, ""Doubles_WL"" text, ""Team"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )']"
4811,aircraft,SELECT Name FROM pilot ORDER BY Name ASC,List all pilot names in ascending alphabetical order.,['SELECT' 'Name' 'FROM' 'pilot' 'ORDER' 'BY' 'Name' 'ASC'],['select' 'name' 'from' 'pilot' 'order' 'by' 'name' 'asc'],['List' 'all' 'pilot' 'names' 'in' 'ascending' 'alphabetical' 'order' '.'],"['CREATE TABLE `pilot` ( `Pilot_Id` int(11) NOT NULL, `Name` varchar(50) NOT NULL, `Age` int(11) NOT NULL, PRIMARY KEY (`Pilot_Id`) )', 'CREATE TABLE `aircraft` ( ""Aircraft_ID"" int(11) NOT NULL, ""Aircraft"" varchar(50) NOT NULL, ""Description"" varchar(50) NOT NULL, ""Max_Gross_Weight"" varchar(50) NOT NULL, ""Total_disk_area"" varchar(50) NOT NULL, ""Max_disk_Loading"" varchar(50) NOT NULL, PRIMARY KEY (`Aircraft_ID`) )', 'CREATE TABLE `match` ( ""Round"" real, ""Location"" text, ""Country"" text, ""Date"" text, ""Fastest_Qualifying"" text, ""Winning_Pilot"" text, ""Winning_Aircraft"" text, PRIMARY KEY (""Round""), FOREIGN KEY (`Winning_Aircraft`) REFERENCES `aircraft`(`Aircraft_ID`), FOREIGN KEY (`Winning_Pilot`) REFERENCES `pilot`(`Pilot_Id`) )', 'CREATE TABLE `airport` ( ""Airport_ID"" int, ""Airport_Name"" text, ""Total_Passengers"" real, ""%_Change_2007"" text, ""International_Passengers"" real, ""Domestic_Passengers"" real, ""Transit_Passengers"" real, ""Aircraft_Movements"" real, ""Freight_Metric_Tonnes"" real, PRIMARY KEY (""Airport_ID"") )', 'CREATE TABLE `airport_aircraft` ( ""ID"" int, ""Airport_ID"" int, ""Aircraft_ID"" int, PRIMARY KEY (""Airport_ID"",""Aircraft_ID""), FOREIGN KEY (""Airport_ID"") REFERENCES `airport`(`Airport_ID`), FOREIGN KEY (""Aircraft_ID"") REFERENCES `aircraft`(`Aircraft_ID`) )']"
6943,tracking_orders,"SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = ""Cancel"" AND T4.product_name = ""food"" GROUP BY T1.customer_id HAVING count(*)  >=  1","List the names of customers who have once canceled the purchase of the product ""food"" (the item status is ""Cancel"").","['SELECT' 'T1.customer_name' 'FROM' 'customers' 'AS' 'T1' 'JOIN' 'orders'
 'AS' 'T2' 'JOIN' 'order_items' 'AS' 'T3' 'JOIN' 'products' 'AS' 'T4' 'ON'
 'T1.customer_id' '=' 'T2.customer_id' 'AND' 'T2.order_id' '='
 'T3.order_id' 'AND' 'T3.product_id' '=' 'T4.product_id' 'WHERE'
 'T3.order_item_status' '=' '``' 'Cancel' ""''"" 'AND' 'T4.product_name' '='
 '``' 'food' ""''"" 'GROUP' 'BY' 'T1.customer_id' 'HAVING' 'count' '(' '*'
 ')' '>' '=' '1']","['select' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1' 'join'
 'orders' 'as' 't2' 'join' 'order_items' 'as' 't3' 'join' 'products' 'as'
 't4' 'on' 't1' '.' 'customer_id' '=' 't2' '.' 'customer_id' 'and' 't2'
 '.' 'order_id' '=' 't3' '.' 'order_id' 'and' 't3' '.' 'product_id' '='
 't4' '.' 'product_id' 'where' 't3' '.' 'order_item_status' '=' 'value'
 'and' 't4' '.' 'product_name' '=' 'value' 'group' 'by' 't1' '.'
 'customer_id' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['List' 'the' 'names' 'of' 'customers' 'who' 'have' 'once' 'canceled'
 'the' 'purchase' 'of' 'the' 'product' '``' 'food' ""''"" '(' 'the' 'item'
 'status' 'is' '``' 'Cancel' ""''"" ')' '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
4101,company_employee,SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1,What is the headquarter of the company with the largest sales?,"['SELECT' 'Headquarters' 'FROM' 'company' 'ORDER' 'BY' 'Sales_in_Billion'
 'DESC' 'LIMIT' '1']","['select' 'headquarters' 'from' 'company' 'order' 'by' 'sales_in_billion'
 'desc' 'limit' 'value']","['What' 'is' 'the' 'headquarter' 'of' 'the' 'company' 'with' 'the'
 'largest' 'sales' '?']","['CREATE TABLE ""people"" ( ""People_ID"" int, ""Age"" int, ""Name"" text, ""Nationality"" text, ""Graduation_College"" text, PRIMARY KEY (""People_ID"") )', 'CREATE TABLE ""company"" ( ""Company_ID"" real, ""Name"" text, ""Headquarters"" text, ""Industry"" text, ""Sales_in_Billion"" real, ""Profits_in_Billion"" real, ""Assets_in_Billion"" real, ""Market_Value_in_Billion"" real, PRIMARY KEY (""Company_ID"") )', 'CREATE TABLE ""employment"" ( ""Company_ID"" int, ""People_ID"" int, ""Year_working"" int, PRIMARY KEY (""Company_ID"",""People_ID""), FOREIGN KEY (""Company_ID"") REFERENCES `company`(""Company_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") )']"
6214,roller_coaster,"SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID",Show the names of roller coasters and names of country they are in.,"['SELECT' 'T2.Name' ',' 'T1.Name' 'FROM' 'country' 'AS' 'T1' 'JOIN'
 'roller_coaster' 'AS' 'T2' 'ON' 'T1.Country_ID' '=' 'T2.Country_ID']","['select' 't2' '.' 'name' ',' 't1' '.' 'name' 'from' 'country' 'as' 't1'
 'join' 'roller_coaster' 'as' 't2' 'on' 't1' '.' 'country_id' '=' 't2' '.'
 'country_id']","['Show' 'the' 'names' 'of' 'roller' 'coasters' 'and' 'names' 'of'
 'country' 'they' 'are' 'in' '.']","['CREATE TABLE ""roller_coaster"" ( ""Roller_Coaster_ID"" int, ""Name"" text, ""Park"" text, ""Country_ID"" int, ""Length"" real, ""Height"" real, ""Speed"" text, ""Opened"" text, ""Status"" text, PRIMARY KEY (""Roller_Coaster_ID""), FOREIGN KEY (""Country_ID"") REFERENCES `country`(""Country_ID"") )', 'CREATE TABLE ""country"" ( ""Country_ID"" int, ""Name"" text, ""Population"" int, ""Area"" int, ""Languages"" text, PRIMARY KEY (""Country_ID"") )']"
6175,music_4,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2,What are the famous title of the artists associated with volumes with more than 2 weeks on top?,"['SELECT' 'T1.Famous_Title' 'FROM' 'artist' 'AS' 'T1' 'JOIN' 'volume' 'AS'
 'T2' 'ON' 'T1.Artist_ID' '=' 'T2.Artist_ID' 'WHERE' 'T2.Weeks_on_Top' '>'
 '2']","['select' 't1' '.' 'famous_title' 'from' 'artist' 'as' 't1' 'join'
 'volume' 'as' 't2' 'on' 't1' '.' 'artist_id' '=' 't2' '.' 'artist_id'
 'where' 't2' '.' 'weeks_on_top' '>' 'value']","['What' 'are' 'the' 'famous' 'title' 'of' 'the' 'artists' 'associated'
 'with' 'volumes' 'with' 'more' 'than' '2' 'weeks' 'on' 'top' '?']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Artist"" text, ""Age"" int, ""Famous_Title"" text, ""Famous_Release_date"" text, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""volume"" ( ""Volume_ID"" int, ""Volume_Issue"" text, ""Issue_Date"" text, ""Weeks_on_Top"" real, ""Song"" text, ""Artist_ID"" int, PRIMARY KEY (""Volume_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""music_festival"" ( ""ID"" int, ""Music_Festival"" text, ""Date_of_ceremony"" text, ""Category"" text, ""Volume"" int, ""Result"" text, PRIMARY KEY (`ID`), FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`) )']"
1145,climbing,SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200,What are the countries that have both mountains that are higher than 5600 and lower than 5200?,"['SELECT' 'Country' 'FROM' 'mountain' 'WHERE' 'Height' '>' '5600'
 'INTERSECT' 'SELECT' 'Country' 'FROM' 'mountain' 'WHERE' 'Height' '<'
 '5200']","['select' 'country' 'from' 'mountain' 'where' 'height' '>' 'value'
 'intersect' 'select' 'country' 'from' 'mountain' 'where' 'height' '<'
 'value']","['What' 'are' 'the' 'countries' 'that' 'have' 'both' 'mountains' 'that'
 'are' 'higher' 'than' '5600' 'and' 'lower' 'than' '5200' '?']","['CREATE TABLE ""mountain"" ( ""Mountain_ID"" int, ""Name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, PRIMARY KEY (""Mountain_ID"") )', 'CREATE TABLE ""climber"" ( ""Climber_ID"" int, ""Name"" text, ""Country"" text, ""Time"" text, ""Points"" real, ""Mountain_ID"" int, PRIMARY KEY (""Climber_ID""), FOREIGN KEY (""Mountain_ID"") REFERENCES ""mountain""(""Mountain_ID"") )']"
5481,voter_2,SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote,What are the distinct majors that students with treasurer votes are studying?,"['SELECT' 'DISTINCT' 'T1.Major' 'FROM' 'STUDENT' 'AS' 'T1' 'JOIN'
 'VOTING_RECORD' 'AS' 'T2' 'ON' 'T1.StuID' '=' 'T2.Treasurer_Vote']","['select' 'distinct' 't1' '.' 'major' 'from' 'student' 'as' 't1' 'join'
 'voting_record' 'as' 't2' 'on' 't1' '.' 'stuid' '=' 't2' '.'
 'treasurer_vote']","['What' 'are' 'the' 'distinct' 'majors' 'that' 'students' 'with'
 'treasurer' 'votes' 'are' 'studying' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
5598,products_gen_characteristics,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2,What are characteristic names used at least twice across all products?,"['SELECT' 't3.characteristic_name' 'FROM' 'products' 'AS' 't1' 'JOIN'
 'product_characteristics' 'AS' 't2' 'ON' 't1.product_id' '='
 't2.product_id' 'JOIN' 'CHARACTERISTICS' 'AS' 't3' 'ON'
 't2.characteristic_id' '=' 't3.characteristic_id' 'GROUP' 'BY'
 't3.characteristic_name' 'HAVING' 'count' '(' '*' ')' '>' '=' '2']","['select' 't3' '.' 'characteristic_name' 'from' 'products' 'as' 't1'
 'join' 'product_characteristics' 'as' 't2' 'on' 't1' '.' 'product_id' '='
 't2' '.' 'product_id' 'join' 'characteristics' 'as' 't3' 'on' 't2' '.'
 'characteristic_id' '=' 't3' '.' 'characteristic_id' 'group' 'by' 't3'
 '.' 'characteristic_name' 'having' 'count' '(' '*' ')' '>' '=' 'value']","['What' 'are' 'characteristic' 'names' 'used' 'at' 'least' 'twice'
 'across' 'all' 'products' '?']","['CREATE TABLE `Ref_Characteristic_Types` ( `characteristic_type_code` VARCHAR(15) PRIMARY KEY, `characteristic_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Colors` ( `color_code` VARCHAR(15) PRIMARY KEY, `color_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Product_Categories` ( `product_category_code` VARCHAR(15) PRIMARY KEY, `product_category_description` VARCHAR(80), `unit_of_measure` VARCHAR(20) )', 'CREATE TABLE `Characteristics` ( `characteristic_id` INTEGER PRIMARY KEY, `characteristic_type_code` VARCHAR(15) NOT NULL, `characteristic_data_type` VARCHAR(10), `characteristic_name` VARCHAR(80), `other_characteristic_details` VARCHAR(255), FOREIGN KEY (`characteristic_type_code` ) REFERENCES `Ref_Characteristic_Types`(`characteristic_type_code` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `color_code` VARCHAR(15) NOT NULL, `product_category_code` VARCHAR(15) NOT NULL, `product_name` VARCHAR(80), `typical_buying_price` VARCHAR(20), `typical_selling_price` VARCHAR(20), `product_description` VARCHAR(255), `other_product_details` VARCHAR(255), FOREIGN KEY (`product_category_code` ) REFERENCES `Ref_Product_Categories`(`product_category_code` ),FOREIGN KEY (`color_code` ) REFERENCES `Ref_Colors`(`color_code` ) )', 'CREATE TABLE `Product_Characteristics` ( `product_id` INTEGER NOT NULL, `characteristic_id` INTEGER NOT NULL, `product_characteristic_value` VARCHAR(50), FOREIGN KEY (`characteristic_id` ) REFERENCES `Characteristics`(`characteristic_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
1375,college_2,"SELECT title FROM course ORDER BY title ,  credits","Given the titles of all courses, in order of titles and credits.","['SELECT' 'title' 'FROM' 'course' 'ORDER' 'BY' 'title' ',' 'credits']","['select' 'title' 'from' 'course' 'order' 'by' 'title' ',' 'credits']","['Given' 'the' 'titles' 'of' 'all' 'courses' ',' 'in' 'order' 'of'
 'titles' 'and' 'credits' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
2413,candidate_poll,"SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",What are the average and minimum weights for people of each sex?,"['SELECT' 'avg' '(' 'weight' ')' ',' 'min' '(' 'weight' ')' ',' 'sex'
 'FROM' 'people' 'GROUP' 'BY' 'sex']","['select' 'avg' '(' 'weight' ')' ',' 'min' '(' 'weight' ')' ',' 'sex'
 'from' 'people' 'group' 'by' 'sex']","['What' 'are' 'the' 'average' 'and' 'minimum' 'weights' 'for' 'people'
 'of' 'each' 'sex' '?']","['CREATE TABLE ""candidate"" ( ""Candidate_ID"" int, ""People_ID"" int, ""Poll_Source"" text, ""Date"" text, ""Support_rate"" real, ""Consider_rate"" real, ""Oppose_rate"" real, ""Unsure_rate"" real, PRIMARY KEY (""Candidate_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Sex"" text, ""Name"" text, ""Date_of_Birth"" text, ""Height"" real, ""Weight"" real, PRIMARY KEY (""People_ID"") )']"
696,customers_card_transactions,"SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  ""Aniyah"" AND customer_last_name  =  ""Feest""",Return the phone and email of the customer with the first name Aniyah and last name Feest.,"['SELECT' 'customer_phone' ',' 'customer_email' 'FROM' 'Customers' 'WHERE'
 'customer_first_name' '=' '``' 'Aniyah' ""''"" 'AND' 'customer_last_name'
 '=' '``' 'Feest' ""''""]","['select' 'customer_phone' ',' 'customer_email' 'from' 'customers' 'where'
 'customer_first_name' '=' 'value' 'and' 'customer_last_name' '=' 'value']","['Return' 'the' 'phone' 'and' 'email' 'of' 'the' 'customer' 'with' 'the'
 'first' 'name' 'Aniyah' 'and' 'last' 'name' 'Feest' '.']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
3922,hospital_1,SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111,Find the name of medication used on the patient who stays in room 111?,"['SELECT' 'T4.name' 'FROM' 'stay' 'AS' 'T1' 'JOIN' 'patient' 'AS' 'T2'
 'ON' 'T1.Patient' '=' 'T2.SSN' 'JOIN' 'Prescribes' 'AS' 'T3' 'ON'
 'T3.Patient' '=' 'T2.SSN' 'JOIN' 'Medication' 'AS' 'T4' 'ON'
 'T3.Medication' '=' 'T4.Code' 'WHERE' 'room' '=' '111']","['select' 't4' '.' 'name' 'from' 'stay' 'as' 't1' 'join' 'patient' 'as'
 't2' 'on' 't1' '.' 'patient' '=' 't2' '.' 'ssn' 'join' 'prescribes' 'as'
 't3' 'on' 't3' '.' 'patient' '=' 't2' '.' 'ssn' 'join' 'medication' 'as'
 't4' 'on' 't3' '.' 'medication' '=' 't4' '.' 'code' 'where' 'room' '='
 'value']","['Find' 'the' 'name' 'of' 'medication' 'used' 'on' 'the' 'patient' 'who'
 'stays' 'in' 'room' '111' '?']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
2221,formula_1,"SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = ""Monaco Grand Prix""",What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?,"['SELECT' 'max' '(' 'T2.fastestlapspeed' ')' 'FROM' 'races' 'AS' 'T1'
 'JOIN' 'results' 'AS' 'T2' 'ON' 'T1.raceid' '=' 'T2.raceid' 'WHERE'
 'T1.year' '=' '2008' 'AND' 'T1.name' '=' '``' 'Monaco' 'Grand' 'Prix'
 ""''""]","['select' 'max' '(' 't2' '.' 'fastestlapspeed' ')' 'from' 'races' 'as'
 't1' 'join' 'results' 'as' 't2' 'on' 't1' '.' 'raceid' '=' 't2' '.'
 'raceid' 'where' 't1' '.' 'year' '=' 'value' 'and' 't1' '.' 'name' '='
 'value']","['What' 'is' 'the' 'maximum' 'fastest' 'lap' 'speed' 'in' 'race' 'named'
 ""'Monaco"" 'Grand' 'Prix' ""'"" 'in' '2008' '?']","['CREATE TABLE IF NOT EXISTS ""circuits"" (""circuitId"" INTEGER PRIMARY KEY,  ""circuitRef"" TEXT,  ""name"" TEXT,  ""location"" TEXT,  ""country"" TEXT,  ""lat"" REAL,  ""lng"" REAL,  ""alt"" INTEGER,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""races"" (""raceId"" INTEGER PRIMARY KEY,  ""year"" INTEGER,  ""round"" INTEGER,  ""circuitId"" INTEGER,  ""name"" TEXT,  ""date"" TEXT,  ""time"" TEXT,  ""url"" TEXT,  FOREIGN KEY (""circuitId"") REFERENCES ""circuits""(""circuitId""));', 'CREATE TABLE IF NOT EXISTS ""drivers"" (""driverId"" INTEGER PRIMARY KEY,  ""driverRef"" TEXT,  ""number"" INTEGER,  ""code"" TEXT,  ""forename"" TEXT,  ""surname"" TEXT,  ""dob"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""status"" (""statusId"" INTEGER PRIMARY KEY,  ""status"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""seasons"" (""year"" INTEGER PRIMARY KEY,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructors"" (\t""constructorId"" INTEGER PRIMARY KEY,  ""constructorRef"" TEXT,  ""name"" TEXT,  ""nationality"" TEXT,  ""url"" TEXT);', 'CREATE TABLE IF NOT EXISTS ""constructorStandings"" (\t""constructorStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""results"" (""resultId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""grid"" INTEGER,  ""position"" INTEGER,  ""positionText"" TEXT,  ""positionOrder"" INTEGER,  ""points"" REAL,  ""laps"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  ""fastestLap"" INTEGER,  ""rank"" INTEGER,  ""fastestLapTime"" TEXT,  ""fastestLapSpeed"" TEXT,  ""statusId"" INTEGER,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""driverStandings"" (""driverStandingsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""points"" REAL,  ""position"" INTEGER,  ""positionText"" TEXT,  ""wins"" INTEGER,  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""constructorResults"" (""constructorResultsId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""constructorId"" INTEGER,  ""points"" REAL,  ""status"" REAL,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""));', 'CREATE TABLE IF NOT EXISTS ""qualifying"" (""qualifyId"" INTEGER PRIMARY KEY,  ""raceId"" INTEGER,  ""driverId"" INTEGER,  ""constructorId"" INTEGER,  ""number"" INTEGER,  ""position"" INTEGER,  ""q1"" TEXT,  ""q2"" TEXT,  ""q3"" TEXT,  FOREIGN KEY(""constructorId"") REFERENCES ""constructors""(""constructorId""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""pitStops"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""stop"" INTEGER,  ""lap"" INTEGER,  ""time"" TEXT,  ""duration"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY (""raceId"", ""driverId"", ""stop""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));', 'CREATE TABLE IF NOT EXISTS ""lapTimes"" (""raceId"" INTEGER,  ""driverId"" INTEGER,  ""lap"" INTEGER,  ""position"" INTEGER,  ""time"" TEXT,  ""milliseconds"" INTEGER,  PRIMARY KEY(""raceId"", ""driverId"", ""lap""),  FOREIGN KEY(""raceId"") REFERENCES ""races""(""raceId""),  FOREIGN KEY (""driverId"") REFERENCES ""drivers""(""driverId""));']"
1934,cinema,"SELECT name ,  openning_year ,  capacity FROM cinema","Show name, opening year, and capacity for each cinema.","['SELECT' 'name' ',' 'openning_year' ',' 'capacity' 'FROM' 'cinema']","['select' 'name' ',' 'openning_year' ',' 'capacity' 'from' 'cinema']","['Show' 'name' ',' 'opening' 'year' ',' 'and' 'capacity' 'for' 'each'
 'cinema' '.']","['CREATE TABLE ""film"" ( ""Film_ID"" int, ""Rank_in_series"" int, ""Number_in_season"" int, ""Title"" text, ""Directed_by"" text, ""Original_air_date"" text, ""Production_code"" text, PRIMARY KEY (""Film_ID"") )', 'CREATE TABLE ""cinema"" ( ""Cinema_ID"" int, ""Name"" text, ""Openning_year"" int, ""Capacity"" int, ""Location"" text, PRIMARY KEY (""Cinema_ID""))', 'CREATE TABLE ""schedule"" ( ""Cinema_ID"" int, ""Film_ID"" int, ""Date"" text, ""Show_times_per_day"" int, ""Price"" float, PRIMARY KEY (""Cinema_ID"",""Film_ID""), FOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`), FOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`) )']"
1168,body_builder,"SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",List the names and origins of people who are not body builders.,"['SELECT' 'Name' ',' 'birth_place' 'FROM' 'people' 'EXCEPT' 'SELECT'
 'T1.Name' ',' 'T1.birth_place' 'FROM' 'people' 'AS' 'T1' 'JOIN'
 'body_builder' 'AS' 'T2' 'ON' 'T1.people_id' '=' 'T2.people_id']","['select' 'name' ',' 'birth_place' 'from' 'people' 'except' 'select' 't1'
 '.' 'name' ',' 't1' '.' 'birth_place' 'from' 'people' 'as' 't1' 'join'
 'body_builder' 'as' 't2' 'on' 't1' '.' 'people_id' '=' 't2' '.'
 'people_id']","['List' 'the' 'names' 'and' 'origins' 'of' 'people' 'who' 'are' 'not'
 'body' 'builders' '.']","['CREATE TABLE ""body_builder"" ( ""Body_Builder_ID"" int, ""People_ID"" int, ""Snatch"" real, ""Clean_Jerk"" real, ""Total"" real, PRIMARY KEY (""Body_Builder_ID""), FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Birth_Date"" text, ""Birth_Place"" text, PRIMARY KEY (""People_ID"") )']"
2032,gas_company,SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1,What is the name of the manager with the most gas stations that opened after 2000?,"['SELECT' 'manager_name' 'FROM' 'gas_station' 'WHERE' 'open_year' '>'
 '2000' 'GROUP' 'BY' 'manager_name' 'ORDER' 'BY' 'count' '(' '*' ')'
 'DESC' 'LIMIT' '1']","['select' 'manager_name' 'from' 'gas_station' 'where' 'open_year' '>'
 'value' 'group' 'by' 'manager_name' 'order' 'by' 'count' '(' '*' ')'
 'desc' 'limit' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'manager' 'with' 'the' 'most' 'gas'
 'stations' 'that' 'opened' 'after' '2000' '?']","['CREATE TABLE ""company"" ( ""Company_ID"" int, ""Rank"" int, ""Company"" text, ""Headquarters"" text, ""Main_Industry"" text, ""Sales_billion"" real, ""Profits_billion"" real, ""Assets_billion"" real, ""Market_Value"" real, PRIMARY KEY (""Company_ID"") )', 'CREATE TABLE ""gas_station"" ( ""Station_ID"" int, ""Open_Year"" int, ""Location"" text, ""Manager_Name"" text, ""Vice_Manager_Name"" text, ""Representative_Name"" text, PRIMARY KEY (""Station_ID"") )', 'CREATE TABLE ""station_company"" ( ""Station_ID"" int, ""Company_ID"" int, ""Rank_of_the_Year"" int, PRIMARY KEY (""Station_ID"",""Company_ID""), FOREIGN KEY (`Station_ID`) REFERENCES `gas_station`(`Station_ID`), FOREIGN KEY (`Company_ID`) REFERENCES `company`(`Company_ID`) )']"
1867,wrestler,SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3,Which teams had more than 3 eliminations?,"['SELECT' 'Team' 'FROM' 'elimination' 'GROUP' 'BY' 'Team' 'HAVING' 'COUNT'
 '(' '*' ')' '>' '3']","['select' 'team' 'from' 'elimination' 'group' 'by' 'team' 'having' 'count'
 '(' '*' ')' '>' 'value']",['Which' 'teams' 'had' 'more' 'than' '3' 'eliminations' '?'],"['CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") )', 'CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") )']"
2733,storm_record,SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania',What are the names of the storms that affected both the regions of Afghanistan and Albania?,"['SELECT' 'T3.Name' 'FROM' 'affected_region' 'AS' 'T1' 'JOIN' 'region'
 'AS' 'T2' 'ON' 'T1.region_id' '=' 'T2.region_id' 'JOIN' 'storm' 'AS' 'T3'
 'ON' 'T1.storm_id' '=' 'T3.storm_id' 'WHERE' 'T2.Region_name' '='
 ""'Afghanistan"" ""'"" 'INTERSECT' 'SELECT' 'T3.Name' 'FROM'
 'affected_region' 'AS' 'T1' 'JOIN' 'region' 'AS' 'T2' 'ON' 'T1.region_id'
 '=' 'T2.region_id' 'JOIN' 'storm' 'AS' 'T3' 'ON' 'T1.storm_id' '='
 'T3.storm_id' 'WHERE' 'T2.Region_name' '=' ""'Albania"" ""'""]","['select' 't3' '.' 'name' 'from' 'affected_region' 'as' 't1' 'join'
 'region' 'as' 't2' 'on' 't1' '.' 'region_id' '=' 't2' '.' 'region_id'
 'join' 'storm' 'as' 't3' 'on' 't1' '.' 'storm_id' '=' 't3' '.' 'storm_id'
 'where' 't2' '.' 'region_name' '=' 'value' 'intersect' 'select' 't3' '.'
 'name' 'from' 'affected_region' 'as' 't1' 'join' 'region' 'as' 't2' 'on'
 't1' '.' 'region_id' '=' 't2' '.' 'region_id' 'join' 'storm' 'as' 't3'
 'on' 't1' '.' 'storm_id' '=' 't3' '.' 'storm_id' 'where' 't2' '.'
 'region_name' '=' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'storms' 'that' 'affected' 'both'
 'the' 'regions' 'of' 'Afghanistan' 'and' 'Albania' '?']","['CREATE TABLE ""storm"" ( ""Storm_ID"" int, ""Name"" text, ""Dates_active"" text, ""Max_speed"" int, ""Damage_millions_USD"" real, ""Number_Deaths"" int, PRIMARY KEY (""Storm_ID"") )', 'CREATE TABLE ""region"" ( `Region_id` int, `Region_code` text, `Region_name` text, PRIMARY KEY (""Region_id"") )', 'CREATE TABLE `affected_region` ( `Region_id` int, `Storm_ID` int, `Number_city_affected` real, PRIMARY KEY (`Region_id`,`Storm_ID`), FOREIGN KEY (`Region_id`) REFERENCES `region`(`Region_id`), FOREIGN KEY (`Storm_ID`) REFERENCES `storm`(`Storm_ID`) )']"
6329,e_government,SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id,What are the names of the services that have never been used?,"['SELECT' 'service_name' 'FROM' 'services' 'EXCEPT' 'SELECT'
 't1.service_name' 'FROM' 'services' 'AS' 't1' 'JOIN' 'party_services'
 'AS' 't2' 'ON' 't1.service_id' '=' 't2.service_id']","['select' 'service_name' 'from' 'services' 'except' 'select' 't1' '.'
 'service_name' 'from' 'services' 'as' 't1' 'join' 'party_services' 'as'
 't2' 'on' 't1' '.' 'service_id' '=' 't2' '.' 'service_id']","['What' 'are' 'the' 'names' 'of' 'the' 'services' 'that' 'have' 'never'
 'been' 'used' '?']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) )', 'CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) )', 'CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) )', 'CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) )', 'CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) )', 'CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) )', 'CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) )', 'CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) )', 'CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) )']"
3411,hr_1,"SELECT * FROM employees WHERE department_id  =  ""null""",Return all the information for all employees without any department number.,"['SELECT' '*' 'FROM' 'employees' 'WHERE' 'department_id' '=' '``' 'null'
 ""''""]",['select' '*' 'from' 'employees' 'where' 'department_id' '=' 'value'],"['Return' 'all' 'the' 'information' 'for' 'all' 'employees' 'without'
 'any' 'department' 'number' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
3544,music_1,"SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?,"['SELECT' 'T1.artist_name' ',' 'T1.country' 'FROM' 'artist' 'AS' 'T1'
 'JOIN' 'song' 'AS' 'T2' 'ON' 'T1.artist_name' '=' 'T2.artist_name'
 'ORDER' 'BY' 'T2.rating' 'DESC' 'LIMIT' '3']","['select' 't1' '.' 'artist_name' ',' 't1' '.' 'country' 'from' 'artist'
 'as' 't1' 'join' 'song' 'as' 't2' 'on' 't1' '.' 'artist_name' '=' 't2'
 '.' 'artist_name' 'order' 'by' 't2' '.' 'rating' 'desc' 'limit' 'value']","['What' 'are' 'the' 'names' 'of' 'the' 'singers' 'who' 'sang' 'the' 'top'
 '3' 'most' 'highly' 'rated' 'songs' 'and' 'what' 'countries' 'do' 'they'
 'hail' 'from' '?']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
4352,tracking_grants_for_research,SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher',What is the complete description of the researcher role.,"['SELECT' 'role_description' 'FROM' 'Staff_Roles' 'WHERE' 'role_code' '='
 ""'researcher"" ""'""]","['select' 'role_description' 'from' 'staff_roles' 'where' 'role_code' '='
 'value']","['What' 'is' 'the' 'complete' 'description' 'of' 'the' 'researcher' 'role'
 '.']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
904,insurance_fnol,SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2,Which services have been used more than twice in first notification of loss? Return the service name.,"['SELECT' 't2.service_name' 'FROM' 'first_notification_of_loss' 'AS' 't1'
 'JOIN' 'services' 'AS' 't2' 'ON' 't1.service_id' '=' 't2.service_id'
 'GROUP' 'BY' 't1.service_id' 'HAVING' 'count' '(' '*' ')' '>' '2']","['select' 't2' '.' 'service_name' 'from' 'first_notification_of_loss' 'as'
 't1' 'join' 'services' 'as' 't2' 'on' 't1' '.' 'service_id' '=' 't2' '.'
 'service_id' 'group' 'by' 't1' '.' 'service_id' 'having' 'count' '(' '*'
 ')' '>' 'value']","['Which' 'services' 'have' 'been' 'used' 'more' 'than' 'twice' 'in'
 'first' 'notification' 'of' 'loss' '?' 'Return' 'the' 'service' 'name'
 '.']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) )', 'CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) )', 'CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) )', 'CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )']"
592,store_1,"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";",What is Nancy Edwards's address?,"['SELECT' 'address' 'FROM' 'employees' 'WHERE' 'first_name' '=' '``'
 'Nancy' ""''"" 'AND' 'last_name' '=' '``' 'Edwards' ""''"" ';']","['select' 'address' 'from' 'employees' 'where' 'first_name' '=' 'value'
 'and' 'last_name' '=' 'value']","['What' 'is' 'Nancy' 'Edwards' ""'s"" 'address' '?']","['CREATE TABLE artists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE sqlite_sequence(name,seq)', 'CREATE TABLE albums ( id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(160) NOT NULL, artist_id INTEGER NOT NULL, FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE employees ( id INTEGER PRIMARY KEY AUTOINCREMENT, last_name VARCHAR(20) NOT NULL, first_name VARCHAR(20) NOT NULL, title VARCHAR(30), reports_to INTEGER, birth_date TIMESTAMP, hire_date TIMESTAMP, address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60), FOREIGN KEY (reports_to) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE customers ( id INTEGER PRIMARY KEY AUTOINCREMENT, first_name VARCHAR(40) NOT NULL, last_name VARCHAR(20) NOT NULL, company VARCHAR(80), address VARCHAR(70), city VARCHAR(40), state VARCHAR(40), country VARCHAR(40), postal_code VARCHAR(10), phone VARCHAR(24), fax VARCHAR(24), email VARCHAR(60) NOT NULL, support_rep_id INTEGER, FOREIGN KEY (support_rep_id) REFERENCES employees (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE genres ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE invoices ( id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, invoice_date TIMESTAMP NOT NULL, billing_address VARCHAR(70), billing_city VARCHAR(40), billing_state VARCHAR(40), billing_country VARCHAR(40), billing_postal_code VARCHAR(10), total NUMERIC(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE media_types ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE tracks ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(200) NOT NULL, album_id INTEGER, media_type_id INTEGER NOT NULL, genre_id INTEGER, composer VARCHAR(220), milliseconds INTEGER NOT NULL, bytes INTEGER, unit_price NUMERIC(10,2) NOT NULL, FOREIGN KEY (album_id) REFERENCES albums (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (genre_id) REFERENCES genres (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (media_type_id) REFERENCES media_types (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE invoice_lines ( id INTEGER PRIMARY KEY AUTOINCREMENT, invoice_id INTEGER NOT NULL, track_id INTEGER NOT NULL, unit_price NUMERIC(10,2) NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE playlists ( id INTEGER PRIMARY KEY AUTOINCREMENT, name VARCHAR(120) )', 'CREATE TABLE playlist_tracks ( playlist_id INTEGER NOT NULL, track_id INTEGER NOT NULL, CONSTRAINT PK_PlaylistTrack PRIMARY KEY (playlist_id, track_id), FOREIGN KEY (playlist_id) REFERENCES playlists (id) ON DELETE NO ACTION ON UPDATE NO ACTION, FOREIGN KEY (track_id) REFERENCES tracks (id) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
898,insurance_fnol,SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1),Find the phone numbers of customers using the most common policy type among the available policies.,"['SELECT' 'customer_phone' 'FROM' 'available_policies' 'WHERE'
 'policy_type_code' '=' '(' 'SELECT' 'policy_type_code' 'FROM'
 'available_policies' 'GROUP' 'BY' 'policy_type_code' 'ORDER' 'BY' 'count'
 '(' '*' ')' 'DESC' 'LIMIT' '1' ')']","['select' 'customer_phone' 'from' 'available_policies' 'where'
 'policy_type_code' '=' '(' 'select' 'policy_type_code' 'from'
 'available_policies' 'group' 'by' 'policy_type_code' 'order' 'by' 'count'
 '(' '*' ')' 'desc' 'limit' 'value' ')']","['Find' 'the' 'phone' 'numbers' 'of' 'customers' 'using' 'the' 'most'
 'common' 'policy' 'type' 'among' 'the' 'available' 'policies' '.']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) )', 'CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) )', 'CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) )', 'CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )']"
6606,train_station,SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25,Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.,"['SELECT' 'DISTINCT' 'LOCATION' 'FROM' 'station' 'WHERE'
 'number_of_platforms' '>' '=' '15' 'AND' 'total_passengers' '>' '25']","['select' 'distinct' 'location' 'from' 'station' 'where'
 'number_of_platforms' '>' '=' 'value' 'and' 'total_passengers' '>'
 'value']","['Show' 'all' 'locations' 'that' 'have' 'train' 'stations' 'with' 'at'
 'least' '15' 'platforms' 'and' 'train' 'stations' 'with' 'more' 'than'
 '25' 'total' 'passengers' '.']","['CREATE TABLE ""station"" ( ""Station_ID"" int, ""Name"" text, ""Annual_entry_exit"" real, ""Annual_interchanges"" real, ""Total_Passengers"" real, ""Location"" text, ""Main_Services"" text, ""Number_of_Platforms"" int, PRIMARY KEY (""Station_ID"") )', 'CREATE TABLE ""train"" ( ""Train_ID"" int, ""Name"" text, ""Time"" text, ""Service"" text, PRIMARY KEY (""Train_ID"") )', 'CREATE TABLE ""train_station"" ( ""Train_ID"" int, ""Station_ID"" int, PRIMARY KEY (""Train_ID"",""Station_ID""), FOREIGN KEY (""Train_ID"") REFERENCES ""train""(""Train_ID""), FOREIGN KEY (""Station_ID"") REFERENCES ""station""(""Station_ID"") )']"
4525,document_management,SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id,Find names of the document without any images.,"['SELECT' 'document_name' 'FROM' 'documents' 'EXCEPT' 'SELECT'
 't1.document_name' 'FROM' 'documents' 'AS' 't1' 'JOIN'
 'document_sections' 'AS' 't2' 'ON' 't1.document_code' '='
 't2.document_code' 'JOIN' 'document_sections_images' 'AS' 't3' 'ON'
 't2.section_id' '=' 't3.section_id']","['select' 'document_name' 'from' 'documents' 'except' 'select' 't1' '.'
 'document_name' 'from' 'documents' 'as' 't1' 'join' 'document_sections'
 'as' 't2' 'on' 't1' '.' 'document_code' '=' 't2' '.' 'document_code'
 'join' 'document_sections_images' 'as' 't3' 'on' 't2' '.' 'section_id'
 '=' 't3' '.' 'section_id']",['Find' 'names' 'of' 'the' 'document' 'without' 'any' 'images' '.'],"['CREATE TABLE `Roles` ( `role_code` VARCHAR(15) PRIMARY KEY, `role_description` VARCHAR(80) )', 'CREATE TABLE `Users` ( `user_id` INTEGER PRIMARY KEY, `role_code` VARCHAR(15) NOT NULL, `user_name` VARCHAR(40), `user_login` VARCHAR(40), `password` VARCHAR(40), FOREIGN KEY (`role_code` ) REFERENCES `Roles`(`role_code` ) )', 'CREATE TABLE `Document_Structures` ( `document_structure_code` VARCHAR(15) PRIMARY KEY, `parent_document_structure_code` VARCHAR(15), `document_structure_description` VARCHAR(80) )', 'CREATE TABLE `Functional_Areas` ( `functional_area_code` VARCHAR(15) PRIMARY KEY, `parent_functional_area_code` VARCHAR(15), `functional_area_description` VARCHAR(80) NOT NULL )', 'CREATE TABLE `Images` ( `image_id` INTEGER PRIMARY KEY, `image_alt_text` VARCHAR(80), `image_name` VARCHAR(40), `image_url` VARCHAR(255) )', 'CREATE TABLE `Documents` ( `document_code` VARCHAR(15) PRIMARY KEY, `document_structure_code` VARCHAR(15) NOT NULL, `document_type_code` VARCHAR(15) NOT NULL, `access_count` INTEGER, `document_name` VARCHAR(80), FOREIGN KEY (`document_structure_code` ) REFERENCES `Document_Structures`(`document_structure_code` ) )', 'CREATE TABLE `Document_Functional_Areas` ( `document_code` VARCHAR(15) NOT NULL, `functional_area_code` VARCHAR(15) NOT NULL, FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ), FOREIGN KEY (`functional_area_code` ) REFERENCES `Functional_Areas`(`functional_area_code` ) )', 'CREATE TABLE `Document_Sections` ( `section_id` INTEGER PRIMARY KEY, `document_code` VARCHAR(15) NOT NULL, `section_sequence` INTEGER, `section_code` VARCHAR(20), `section_title` VARCHAR(80), FOREIGN KEY (`document_code` ) REFERENCES `Documents`(`document_code` ) )', 'CREATE TABLE `Document_Sections_Images` ( `section_id` INTEGER NOT NULL, `image_id` INTEGER NOT NULL, PRIMARY KEY (`section_id`,`image_id`), FOREIGN KEY (`section_id` ) REFERENCES `Document_Sections`(`section_id` ), FOREIGN KEY (`image_id` ) REFERENCES `Images`(`image_id` ) )']"
6960,architecture,SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );,How many architects haven't built a mill before year 1850?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'architect' 'WHERE' 'id' 'NOT' 'IN'
 '(' 'SELECT' 'architect_id' 'FROM' 'mill' 'WHERE' 'built_year' '<' '1850'
 ')' ';']","['select' 'count' '(' '*' ')' 'from' 'architect' 'where' 'id' 'not' 'in'
 '(' 'select' 'architect_id' 'from' 'mill' 'where' 'built_year' '<'
 'value' ')']","['How' 'many' 'architects' 'have' ""n't"" 'built' 'a' 'mill' 'before' 'year'
 '1850' '?']","['CREATE TABLE ""architect"" ( ""id"" text, ""name"" text, ""nationality"" text, ""gender"" text, primary key(""id"") )', 'CREATE TABLE ""bridge"" ( ""architect_id"" int, ""id"" int, ""name"" text, ""location"" text, ""length_meters"" real, ""length_feet"" real, primary key(""id""), foreign key (""architect_id"" ) references `architect`(""id"") )', 'CREATE TABLE ""mill"" ( ""architect_id"" int, ""id"" int, ""location"" text, ""name"" text, ""type"" text, ""built_year"" int, ""notes"" text, primary key (""id""), foreign key (""architect_id"" ) references `architect`(""id"") )']"
3192,college_1,"SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",Count different addresses of each school.,"['SELECT' 'count' '(' 'DISTINCT' 'dept_address' ')' ',' 'school_code'
 'FROM' 'department' 'GROUP' 'BY' 'school_code']","['select' 'count' '(' 'distinct' 'dept_address' ')' ',' 'school_code'
 'from' 'department' 'group' 'by' 'school_code']",['Count' 'different' 'addresses' 'of' 'each' 'school' '.'],"['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
2514,movie_1,"SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  ""Brittany Harris"") GROUP BY mID",Find the average rating star for each movie that are not reviewed by Brittany Harris.,"['SELECT' 'mID' ',' 'avg' '(' 'stars' ')' 'FROM' 'Rating' 'WHERE' 'mID'
 'NOT' 'IN' '(' 'SELECT' 'T1.mID' 'FROM' 'Rating' 'AS' 'T1' 'JOIN'
 'Reviewer' 'AS' 'T2' 'ON' 'T1.rID' '=' 'T2.rID' 'WHERE' 'T2.name' '='
 '``' 'Brittany' 'Harris' ""''"" ')' 'GROUP' 'BY' 'mID']","['select' 'mid' ',' 'avg' '(' 'stars' ')' 'from' 'rating' 'where' 'mid'
 'not' 'in' '(' 'select' 't1' '.' 'mid' 'from' 'rating' 'as' 't1' 'join'
 'reviewer' 'as' 't2' 'on' 't1' '.' 'rid' '=' 't2' '.' 'rid' 'where' 't2'
 '.' 'name' '=' 'value' ')' 'group' 'by' 'mid']","['Find' 'the' 'average' 'rating' 'star' 'for' 'each' 'movie' 'that' 'are'
 'not' 'reviewed' 'by' 'Brittany' 'Harris' '.']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
5173,music_2,SELECT count(*) FROM Band,Find the number of bands.,['SELECT' 'count' '(' '*' ')' 'FROM' 'Band'],['select' 'count' '(' '*' ')' 'from' 'band'],['Find' 'the' 'number' 'of' 'bands' '.'],"['CREATE TABLE ""Songs"" ( ""SongId"" INTEGER PRIMARY KEY, ""Title"" TEXT )', 'CREATE TABLE ""Albums"" ( ""AId"" INTEGER PRIMARY KEY, ""Title"" TEXT, ""Year"" INTEGER, ""Label"" TEXT, ""Type"" TEXT )', 'CREATE TABLE ""Band"" ( ""Id"" INTEGER PRIMARY KEY, ""Firstname"" TEXT, ""Lastname"" TEXT )', 'CREATE TABLE ""Instruments"" ( ""SongId"" INTEGER, ""BandmateId"" INTEGER, ""Instrument"" TEXT , PRIMARY KEY(SongId, BandmateId, Instrument), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (BandmateId) REFERENCES Band(Id) )', 'CREATE TABLE ""Performance"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""StagePosition"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )', 'CREATE TABLE ""Tracklists"" ( ""AlbumId"" INTEGER, ""Position"" INTEGER, ""SongId"" INTEGER , PRIMARY KEY(AlbumId, Position), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (AlbumId) REFERENCES Albums(AId) )', 'CREATE TABLE ""Vocals"" ( ""SongId"" INTEGER, ""Bandmate"" INTEGER, ""Type"" TEXT, PRIMARY KEY(SongId, Bandmate), FOREIGN KEY (SongId) REFERENCES Songs(SongId), FOREIGN KEY (Bandmate) REFERENCES Band(Id) )']"
2795,election,"SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.,"['SELECT' 'Comptroller' ',' 'COUNT' '(' '*' ')' 'FROM' 'party' 'GROUP'
 'BY' 'Comptroller' 'ORDER' 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'comptroller' ',' 'count' '(' '*' ')' 'from' 'party' 'group'
 'by' 'comptroller' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit'
 'value']","['Which' 'people' 'severed' 'as' 'comptroller' 'most' 'frequently' '?'
 'Give' 'me' 'the' 'name' 'of' 'the' 'person' 'and' 'the' 'frequency'
 'count' '.']","['CREATE TABLE ""county"" ( ""County_Id"" int, ""County_name"" text, ""Population"" real, ""Zip_code"" text, PRIMARY KEY (""County_Id"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Year"" real, ""Party"" text, ""Governor"" text, ""Lieutenant_Governor"" text, ""Comptroller"" text, ""Attorney_General"" text, ""US_Senate"" text, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""election"" ( ""Election_ID"" int, ""Counties_Represented"" text, ""District"" int, ""Delegate"" text, ""Party"" int, ""First_Elected"" real, ""Committee"" text, PRIMARY KEY (""Election_ID""), FOREIGN KEY (`Party`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`District`) REFERENCES `county`(`County_Id`) )']"
4094,student_1,"SELECT count(*) ,  classroom FROM list GROUP BY classroom",Find the number of students in one classroom.,"['SELECT' 'count' '(' '*' ')' ',' 'classroom' 'FROM' 'list' 'GROUP' 'BY'
 'classroom']","['select' 'count' '(' '*' ')' ',' 'classroom' 'from' 'list' 'group' 'by'
 'classroom']",['Find' 'the' 'number' 'of' 'students' 'in' 'one' 'classroom' '.'],"['CREATE TABLE ""list"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Grade"" INTEGER, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));', 'CREATE TABLE ""teachers"" ( \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Classroom"" INTEGER,\tPRIMARY KEY(LastName, FirstName));']"
366,flight_1,SELECT eid FROM Employee WHERE salary  >  100000,What is the id of every employee who has at least a salary of  100000?,['SELECT' 'eid' 'FROM' 'Employee' 'WHERE' 'salary' '>' '100000'],['select' 'eid' 'from' 'employee' 'where' 'salary' '>' 'value'],"['What' 'is' 'the' 'id' 'of' 'every' 'employee' 'who' 'has' 'at' 'least'
 'a' 'salary' 'of' '100000' '?']","['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
1243,apartment_rentals,"SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  ""Columbus Square""","How many rooms in total are there in the apartments in the building with short name ""Columbus Square""?","['SELECT' 'sum' '(' 'T2.room_count' ')' 'FROM' 'Apartment_Buildings' 'AS'
 'T1' 'JOIN' 'Apartments' 'AS' 'T2' 'ON' 'T1.building_id' '='
 'T2.building_id' 'WHERE' 'T1.building_short_name' '=' '``' 'Columbus'
 'Square' ""''""]","['select' 'sum' '(' 't2' '.' 'room_count' ')' 'from' 'apartment_buildings'
 'as' 't1' 'join' 'apartments' 'as' 't2' 'on' 't1' '.' 'building_id' '='
 't2' '.' 'building_id' 'where' 't1' '.' 'building_short_name' '=' 'value']","['How' 'many' 'rooms' 'in' 'total' 'are' 'there' 'in' 'the' 'apartments'
 'in' 'the' 'building' 'with' 'short' 'name' '``' 'Columbus' 'Square' ""''""
 '?']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
2460,movie_1,"SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  ""null""",Find the names of all reviewers who have ratings with a NULL value for the date.,"['SELECT' 'DISTINCT' 'name' 'FROM' 'Reviewer' 'AS' 'T1' 'JOIN' 'Rating'
 'AS' 'T2' 'ON' 'T1.rID' '=' 'T2.rID' 'WHERE' 'ratingDate' '=' '``' 'null'
 ""''""]","['select' 'distinct' 'name' 'from' 'reviewer' 'as' 't1' 'join' 'rating'
 'as' 't2' 'on' 't1' '.' 'rid' '=' 't2' '.' 'rid' 'where' 'ratingdate' '='
 'value']","['Find' 'the' 'names' 'of' 'all' 'reviewers' 'who' 'have' 'ratings' 'with'
 'a' 'NULL' 'value' 'for' 'the' 'date' '.']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
1072,match_season,"SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country","Show the season, the player, and the name of the country that player belongs to.","['SELECT' 'T2.Season' ',' 'T2.Player' ',' 'T1.Country_name' 'FROM'
 'country' 'AS' 'T1' 'JOIN' 'match_season' 'AS' 'T2' 'ON' 'T1.Country_id'
 '=' 'T2.Country']","['select' 't2' '.' 'season' ',' 't2' '.' 'player' ',' 't1' '.'
 'country_name' 'from' 'country' 'as' 't1' 'join' 'match_season' 'as' 't2'
 'on' 't1' '.' 'country_id' '=' 't2' '.' 'country']","['Show' 'the' 'season' ',' 'the' 'player' ',' 'and' 'the' 'name' 'of'
 'the' 'country' 'that' 'player' 'belongs' 'to' '.']","['CREATE TABLE ""country"" ( ""Country_id"" int, ""Country_name"" text, ""Capital"" text, ""Official_native_language"" text, PRIMARY KEY (""Country_id"") )', 'CREATE TABLE `team` ( `Team_id` int, `Name` text, PRIMARY KEY (`Team_id`) )', 'CREATE TABLE ""match_season"" ( ""Season"" real, ""Player"" text, ""Position"" text, ""Country"" int, ""Team"" int, ""Draft_Pick_Number"" int, ""Draft_Class"" text, ""College"" text, PRIMARY KEY (""Season""), FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Years_Played"" text, ""Total_WL"" text, ""Singles_WL"" text, ""Doubles_WL"" text, ""Team"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )']"
5069,device,"SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID","What are the names of device shops, and what are the carriers that they carry devices in stock for?","['SELECT' 'T3.Shop_Name' ',' 'T2.Carrier' 'FROM' 'stock' 'AS' 'T1' 'JOIN'
 'device' 'AS' 'T2' 'ON' 'T1.Device_ID' '=' 'T2.Device_ID' 'JOIN' 'shop'
 'AS' 'T3' 'ON' 'T1.Shop_ID' '=' 'T3.Shop_ID']","['select' 't3' '.' 'shop_name' ',' 't2' '.' 'carrier' 'from' 'stock' 'as'
 't1' 'join' 'device' 'as' 't2' 'on' 't1' '.' 'device_id' '=' 't2' '.'
 'device_id' 'join' 'shop' 'as' 't3' 'on' 't1' '.' 'shop_id' '=' 't3' '.'
 'shop_id']","['What' 'are' 'the' 'names' 'of' 'device' 'shops' ',' 'and' 'what' 'are'
 'the' 'carriers' 'that' 'they' 'carry' 'devices' 'in' 'stock' 'for' '?']","['CREATE TABLE ""device"" ( ""Device_ID"" int, ""Device"" text, ""Carrier"" text, ""Package_Version"" text, ""Applications"" text, ""Software_Platform"" text, PRIMARY KEY (""Device_ID"") )', 'CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Shop_Name"" text, ""Location"" text, ""Open_Date"" text, ""Open_Year"" int, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""stock"" ( ""Shop_ID"" int, ""Device_ID"" int, ""Quantity"" int, PRIMARY KEY (""Shop_ID"",""Device_ID""), FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`), FOREIGN KEY (`Device_ID`) REFERENCES `device`(`Device_ID`) )']"
819,chinook_1,"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  ""AC/DC""","Find the title of all the albums of the artist ""AC/DC"".","['SELECT' 'Title' 'FROM' 'ALBUM' 'AS' 'T1' 'JOIN' 'ARTIST' 'AS' 'T2' 'ON'
 'T1.ArtistId' '=' 'T2.ArtistId' 'WHERE' 'T2.Name' '=' '``' 'AC/DC' ""''""]","['select' 'title' 'from' 'album' 'as' 't1' 'join' 'artist' 'as' 't2' 'on'
 't1' '.' 'artistid' '=' 't2' '.' 'artistid' 'where' 't2' '.' 'name' '='
 'value']","['Find' 'the' 'title' 'of' 'all' 'the' 'albums' 'of' 'the' 'artist' '``'
 'AC/DC' ""''"" '.']","['CREATE TABLE `Album` ( `AlbumId` integer NOT NULL , `Title` varchar(160) NOT NULL , `ArtistId` integer NOT NULL , PRIMARY KEY (`AlbumId`) , CONSTRAINT `FK_AlbumArtistId` FOREIGN KEY (`ArtistId`) REFERENCES `Artist` (`ArtistId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Artist` ( `ArtistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`ArtistId`) )', 'CREATE TABLE `Customer` ( `CustomerId` integer NOT NULL , `FirstName` varchar(40) NOT NULL , `LastName` varchar(20) NOT NULL , `Company` varchar(80) DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) NOT NULL , `SupportRepId` integer DEFAULT NULL , PRIMARY KEY (`CustomerId`) , CONSTRAINT `FK_CustomerSupportRepId` FOREIGN KEY (`SupportRepId`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Employee` ( `EmployeeId` integer NOT NULL , `LastName` varchar(20) NOT NULL , `FirstName` varchar(20) NOT NULL , `Title` varchar(30) DEFAULT NULL , `ReportsTo` integer DEFAULT NULL , `BirthDate` datetime DEFAULT NULL , `HireDate` datetime DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) DEFAULT NULL , PRIMARY KEY (`EmployeeId`) , CONSTRAINT `FK_EmployeeReportsTo` FOREIGN KEY (`ReportsTo`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Genre` ( `GenreId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`GenreId`) )', 'CREATE TABLE `Invoice` ( `InvoiceId` integer NOT NULL , `CustomerId` integer NOT NULL , `InvoiceDate` datetime NOT NULL , `BillingAddress` varchar(70) DEFAULT NULL , `BillingCity` varchar(40) DEFAULT NULL , `BillingState` varchar(40) DEFAULT NULL , `BillingCountry` varchar(40) DEFAULT NULL , `BillingPostalCode` varchar(10) DEFAULT NULL , `Total` decimal(10,2) NOT NULL , PRIMARY KEY (`InvoiceId`) , CONSTRAINT `FK_InvoiceCustomerId` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `InvoiceLine` ( `InvoiceLineId` integer NOT NULL , `InvoiceId` integer NOT NULL , `TrackId` integer NOT NULL , `UnitPrice` decimal(10,2) NOT NULL , `Quantity` integer NOT NULL , PRIMARY KEY (`InvoiceLineId`) , CONSTRAINT `FK_InvoiceLineInvoiceId` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_InvoiceLineTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `MediaType` ( `MediaTypeId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`MediaTypeId`) )', 'CREATE TABLE `Playlist` ( `PlaylistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`PlaylistId`) )', 'CREATE TABLE `PlaylistTrack` ( `PlaylistId` integer NOT NULL , `TrackId` integer NOT NULL , PRIMARY KEY (`PlaylistId`,`TrackId`) , CONSTRAINT `FK_PlaylistTrackPlaylistId` FOREIGN KEY (`PlaylistId`) REFERENCES `Playlist` (`PlaylistId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_PlaylistTrackTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Track` ( `TrackId` integer NOT NULL , `Name` varchar(200) NOT NULL , `AlbumId` integer DEFAULT NULL , `MediaTypeId` integer NOT NULL , `GenreId` integer DEFAULT NULL , `Composer` varchar(220) DEFAULT NULL , `Milliseconds` integer NOT NULL , `Bytes` integer DEFAULT NULL , `UnitPrice` decimal(10,2) NOT NULL , PRIMARY KEY (`TrackId`) , CONSTRAINT `FK_TrackAlbumId` FOREIGN KEY (`AlbumId`) REFERENCES `Album` (`AlbumId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackGenreId` FOREIGN KEY (`GenreId`) REFERENCES `Genre` (`GenreId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackMediaTypeId` FOREIGN KEY (`MediaTypeId`) REFERENCES `MediaType` (`MediaTypeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
1332,college_2,SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1,What is the name of the student who has the highest total credits in the History department.,"['SELECT' 'name' 'FROM' 'student' 'WHERE' 'dept_name' '=' ""'History"" ""'""
 'ORDER' 'BY' 'tot_cred' 'DESC' 'LIMIT' '1']","['select' 'name' 'from' 'student' 'where' 'dept_name' '=' 'value' 'order'
 'by' 'tot_cred' 'desc' 'limit' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'student' 'who' 'has' 'the' 'highest'
 'total' 'credits' 'in' 'the' 'History' 'department' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
39,farm,SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1,What is the status of the city that has hosted the most competitions?,"['SELECT' 'T1.Status' 'FROM' 'city' 'AS' 'T1' 'JOIN' 'farm_competition'
 'AS' 'T2' 'ON' 'T1.City_ID' '=' 'T2.Host_city_ID' 'GROUP' 'BY'
 'T2.Host_city_ID' 'ORDER' 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'status' 'from' 'city' 'as' 't1' 'join'
 'farm_competition' 'as' 't2' 'on' 't1' '.' 'city_id' '=' 't2' '.'
 'host_city_id' 'group' 'by' 't2' '.' 'host_city_id' 'order' 'by' 'count'
 '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'status' 'of' 'the' 'city' 'that' 'has' 'hosted' 'the'
 'most' 'competitions' '?']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""Official_Name"" text, ""Status"" text, ""Area_km_2"" real, ""Population"" real, ""Census_Ranking"" text, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""farm"" ( ""Farm_ID"" int, ""Year"" int, ""Total_Horses"" real, ""Working_Horses"" real, ""Total_Cattle"" real, ""Oxen"" real, ""Bulls"" real, ""Cows"" real, ""Pigs"" real, ""Sheep_and_Goats"" real, PRIMARY KEY (""Farm_ID"") )', 'CREATE TABLE ""farm_competition"" ( ""Competition_ID"" int, ""Year"" int, ""Theme"" text, ""Host_city_ID"" int, ""Hosts"" text, PRIMARY KEY (""Competition_ID""), FOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""competition_record"" ( ""Competition_ID"" int, ""Farm_ID"" int, ""Rank"" int, PRIMARY KEY (""Competition_ID"",""Farm_ID""), FOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`), FOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`) )']"
3342,sports_competition,SELECT avg(Gold) FROM club_rank,What is the average number of gold medals for a club?,['SELECT' 'avg' '(' 'Gold' ')' 'FROM' 'club_rank'],['select' 'avg' '(' 'gold' ')' 'from' 'club_rank'],"['What' 'is' 'the' 'average' 'number' 'of' 'gold' 'medals' 'for' 'a'
 'club' '?']","['CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") )', 'CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") )', 'CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) )']"
3602,music_1,"SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages","What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?","['SELECT' 'max' '(' 'T1.duration' ')' ',' 'max' '(' 'T2.resolution' ')'
 ',' 'T2.languages' 'FROM' 'files' 'AS' 'T1' 'JOIN' 'song' 'AS' 'T2' 'ON'
 'T1.f_id' '=' 'T2.f_id' 'GROUP' 'BY' 'T2.languages' 'ORDER' 'BY'
 'T2.languages']","['select' 'max' '(' 't1' '.' 'duration' ')' ',' 'max' '(' 't2' '.'
 'resolution' ')' ',' 't2' '.' 'languages' 'from' 'files' 'as' 't1' 'join'
 'song' 'as' 't2' 'on' 't1' '.' 'f_id' '=' 't2' '.' 'f_id' 'group' 'by'
 't2' '.' 'languages' 'order' 'by' 't2' '.' 'languages']","['What' 'are' 'the' 'maximum' 'duration' 'and' 'resolution' 'of' 'all'
 'songs' ',' 'for' 'each' 'language' ',' 'ordered' 'alphabetically' 'by'
 'language' '?']","['CREATE TABLE genre( g_name varchar2(20) not null, rating varchar2(10), most_popular_in varchar2(50), primary key(g_name) )', 'CREATE TABLE artist( artist_name varchar2(50) not null, country varchar2(20), gender varchar2(20), preferred_genre varchar2(50), constraint a_name primary key(artist_name), foreign key(preferred_genre) references genre(g_name) ON DELETE CASCADE )', 'CREATE TABLE files( f_id number(10) not null, artist_name varchar2(50), file_size varchar2(20), duration varchar2(20), formats varchar2(20), primary key(f_id), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE )', 'CREATE TABLE song( song_name varchar2(50), artist_name varchar2(50), country varchar2(20), f_id number(10), genre_is varchar2(20), rating number(10) check(rating>0 and rating<11), languages varchar2(20), releasedate Date, resolution number(10) not null, constraint s_name primary key(song_name), foreign key(artist_name) references artist(artist_name) ON DELETE CASCADE, foreign key(f_id) references files(f_id) ON DELETE CASCADE, foreign key(genre_is) references genre(g_name) ON DELETE CASCADE )']"
80,student_assessment,"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id","For every student who is registered for some course, how many courses are they registered for?","['SELECT' 'T1.student_id' ',' 'count' '(' '*' ')' 'FROM' 'students' 'AS'
 'T1' 'JOIN' 'student_course_registrations' 'AS' 'T2' 'ON' 'T1.student_id'
 '=' 'T2.student_id' 'GROUP' 'BY' 'T1.student_id']","['select' 't1' '.' 'student_id' ',' 'count' '(' '*' ')' 'from' 'students'
 'as' 't1' 'join' 'student_course_registrations' 'as' 't2' 'on' 't1' '.'
 'student_id' '=' 't2' '.' 'student_id' 'group' 'by' 't1' '.' 'student_id']","['For' 'every' 'student' 'who' 'is' 'registered' 'for' 'some' 'course' ','
 'how' 'many' 'courses' 'are' 'they' 'registered' 'for' '?']","['CREATE TABLE Addresses ( address_id INTEGER NOT NULL, line_1 VARCHAR(80), line_2 VARCHAR(80), city VARCHAR(50), zip_postcode CHAR(20), state_province_county VARCHAR(50), country VARCHAR(50), PRIMARY KEY (address_id) )', 'CREATE TABLE People ( person_id INTEGER NOT NULL, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), cell_mobile_number VARCHAR(40), email_address VARCHAR(40), login_name VARCHAR(40), password VARCHAR(40), PRIMARY KEY (person_id) )', 'CREATE TABLE Students ( student_id INTEGER NOT NULL, student_details VARCHAR(255), PRIMARY KEY (student_id), FOREIGN KEY (student_id) REFERENCES People (person_id) )', 'CREATE TABLE Courses ( course_id VARCHAR(100) NOT NULL, course_name VARCHAR(120), course_description VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (course_id) )', 'CREATE TABLE People_Addresses ( person_address_id INTEGER NOT NULL, person_id INTEGER NOT NULL, address_id INTEGER NOT NULL, date_from DATETIME, date_to DATETIME, PRIMARY KEY (person_address_id), FOREIGN KEY (person_id) REFERENCES People (person_id), FOREIGN KEY (address_id) REFERENCES Addresses (address_id) )', 'CREATE TABLE Student_Course_Registrations ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, registration_date DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id) )', 'CREATE TABLE Student_Course_Attendance ( student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, date_of_attendance DATETIME NOT NULL, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id, course_id) REFERENCES Student_Course_Registrations (student_id,course_id) )', 'CREATE TABLE Candidates ( candidate_id INTEGER NOT NULL , candidate_details VARCHAR(255), PRIMARY KEY (candidate_id), FOREIGN KEY (candidate_id) REFERENCES People (person_id) )', 'CREATE TABLE Candidate_Assessments ( candidate_id INTEGER NOT NULL, qualification CHAR(15) NOT NULL, assessment_date DATETIME NOT NULL, asessment_outcome_code CHAR(15) NOT NULL, PRIMARY KEY (candidate_id, qualification), FOREIGN KEY (candidate_id) REFERENCES Candidates (candidate_id) )']"
324,product_catalog,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,Which catalog content has the highest height? Give me the catalog entry name.,"['SELECT' 'catalog_entry_name' 'FROM' 'catalog_contents' 'ORDER' 'BY'
 'height' 'DESC' 'LIMIT' '1']","['select' 'catalog_entry_name' 'from' 'catalog_contents' 'order' 'by'
 'height' 'desc' 'limit' 'value']","['Which' 'catalog' 'content' 'has' 'the' 'highest' 'height' '?' 'Give'
 'me' 'the' 'catalog' 'entry' 'name' '.']","['CREATE TABLE `Attribute_Definitions` ( `attribute_id` INTEGER PRIMARY KEY, `attribute_name` VARCHAR(30), `attribute_data_type` VARCHAR(10) )', 'CREATE TABLE `Catalogs` ( `catalog_id` INTEGER PRIMARY KEY, `catalog_name` VARCHAR(50), `catalog_publisher` VARCHAR(80), `date_of_publication` DATETIME, `date_of_latest_revision` DATETIME )', 'CREATE TABLE `Catalog_Structure` ( `catalog_level_number` INTEGER PRIMARY KEY, `catalog_id` INTEGER NOT NULL, `catalog_level_name` VARCHAR(50), FOREIGN KEY (`catalog_id` ) REFERENCES `Catalogs`(`catalog_id` ) )', 'CREATE TABLE `Catalog_Contents` ( `catalog_entry_id` INTEGER PRIMARY KEY, `catalog_level_number` INTEGER NOT NULL, `parent_entry_id` INTEGER, `previous_entry_id` INTEGER, `next_entry_id` INTEGER, `catalog_entry_name` VARCHAR(80), `product_stock_number` VARCHAR(50), `price_in_dollars` DOUBLE NULL, `price_in_euros` DOUBLE NULL, `price_in_pounds` DOUBLE NULL, `capacity` VARCHAR(20), `length` VARCHAR(20), `height` VARCHAR(20), `width` VARCHAR(20), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) )', 'CREATE TABLE `Catalog_Contents_Additional_Attributes` ( `catalog_entry_id` INTEGER NOT NULL, `catalog_level_number` INTEGER NOT NULL, `attribute_id` INTEGER NOT NULL, `attribute_value` VARCHAR(255) NOT NULL, FOREIGN KEY (`catalog_entry_id` ) REFERENCES `Catalog_Contents`(`catalog_entry_id` ), FOREIGN KEY (`catalog_level_number` ) REFERENCES `Catalog_Structure`(`catalog_level_number` ) )']"
3896,insurance_policies,SELECT sum(Amount_Claimed) FROM Claims,Find the total claimed amount of all the claims.,['SELECT' 'sum' '(' 'Amount_Claimed' ')' 'FROM' 'Claims'],['select' 'sum' '(' 'amount_claimed' ')' 'from' 'claims'],['Find' 'the' 'total' 'claimed' 'amount' 'of' 'all' 'the' 'claims' '.'],"['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Customer_Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATE, End_Date DATE, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID), FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies (Policy_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Date_Claim_Made DATE, Date_Claim_Settled DATE, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER NOT NULL, PRIMARY KEY (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )', 'CREATE TABLE Payments ( Payment_ID INTEGER NOT NULL, Settlement_ID INTEGER NOT NULL, Payment_Method_Code VARCHAR(255), Date_Payment_Made DATE, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID), FOREIGN KEY (Settlement_ID) REFERENCES Settlements (Settlement_ID) )']"
48,farm,SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition),List the official names of cities that have not held any competition.,"['SELECT' 'Official_Name' 'FROM' 'city' 'WHERE' 'City_ID' 'NOT' 'IN' '('
 'SELECT' 'Host_city_ID' 'FROM' 'farm_competition' ')']","['select' 'official_name' 'from' 'city' 'where' 'city_id' 'not' 'in' '('
 'select' 'host_city_id' 'from' 'farm_competition' ')']","['List' 'the' 'official' 'names' 'of' 'cities' 'that' 'have' 'not' 'held'
 'any' 'competition' '.']","['CREATE TABLE ""city"" ( ""City_ID"" int, ""Official_Name"" text, ""Status"" text, ""Area_km_2"" real, ""Population"" real, ""Census_Ranking"" text, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""farm"" ( ""Farm_ID"" int, ""Year"" int, ""Total_Horses"" real, ""Working_Horses"" real, ""Total_Cattle"" real, ""Oxen"" real, ""Bulls"" real, ""Cows"" real, ""Pigs"" real, ""Sheep_and_Goats"" real, PRIMARY KEY (""Farm_ID"") )', 'CREATE TABLE ""farm_competition"" ( ""Competition_ID"" int, ""Year"" int, ""Theme"" text, ""Host_city_ID"" int, ""Hosts"" text, PRIMARY KEY (""Competition_ID""), FOREIGN KEY (`Host_city_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""competition_record"" ( ""Competition_ID"" int, ""Farm_ID"" int, ""Rank"" int, PRIMARY KEY (""Competition_ID"",""Farm_ID""), FOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`), FOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`) )']"
3163,station_weather,SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1,Find the name of the train whose route runs through greatest number of stations.,"['SELECT' 't1.name' 'FROM' 'train' 'AS' 't1' 'JOIN' 'route' 'AS' 't2' 'ON'
 't1.id' '=' 't2.train_id' 'GROUP' 'BY' 't2.train_id' 'ORDER' 'BY' 'count'
 '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'name' 'from' 'train' 'as' 't1' 'join' 'route' 'as'
 't2' 'on' 't1' '.' 'id' '=' 't2' '.' 'train_id' 'group' 'by' 't2' '.'
 'train_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Find' 'the' 'name' 'of' 'the' 'train' 'whose' 'route' 'runs' 'through'
 'greatest' 'number' 'of' 'stations' '.']","['CREATE TABLE ""train"" ( ""id"" int, ""train_number"" int, ""name"" text, ""origin"" text, ""destination"" text, ""time"" text, ""interval"" text, primary key (""id"") )', 'CREATE TABLE ""station"" ( ""id"" int, ""network_name"" text, ""services"" text, ""local_authority"" text, primary key (""id"") )', 'CREATE TABLE ""route"" ( ""train_id"" int, ""station_id"" int, primary key (""train_id"", ""station_id""), foreign key (""train_id"") references `train`(""id""), foreign key (""station_id"") references `station`(""id"") )', 'CREATE TABLE ""weekly_weather"" ( ""station_id"" int, ""day_of_week"" text, ""high_temperature"" int, ""low_temperature"" int, ""precipitation"" real, ""wind_speed_mph"" int, primary key (""station_id"", ""day_of_week""), foreign key (""station_id"") references ""station""(""id"") )']"
6426,cre_Docs_and_Epenses,"SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types","What are the codes, names, and descriptions of the different document types?","['SELECT' 'document_type_code' ',' 'document_type_name' ','
 'document_type_description' 'FROM' 'Ref_document_types']","['select' 'document_type_code' ',' 'document_type_name' ','
 'document_type_description' 'from' 'ref_document_types']","['What' 'are' 'the' 'codes' ',' 'names' ',' 'and' 'descriptions' 'of'
 'the' 'different' 'document' 'types' '?']","['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
3306,college_1,"SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3","What is the name, address, and number of students in the departments that have the 3 most students?","['SELECT' 'T2.dept_name' ',' 'T2.dept_address' ',' 'count' '(' '*' ')'
 'FROM' 'student' 'AS' 'T1' 'JOIN' 'department' 'AS' 'T2' 'ON'
 'T1.dept_code' '=' 'T2.dept_code' 'GROUP' 'BY' 'T1.dept_code' 'ORDER'
 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '3']","['select' 't2' '.' 'dept_name' ',' 't2' '.' 'dept_address' ',' 'count' '('
 '*' ')' 'from' 'student' 'as' 't1' 'join' 'department' 'as' 't2' 'on'
 't1' '.' 'dept_code' '=' 't2' '.' 'dept_code' 'group' 'by' 't1' '.'
 'dept_code' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'name' ',' 'address' ',' 'and' 'number' 'of' 'students'
 'in' 'the' 'departments' 'that' 'have' 'the' '3' 'most' 'students' '?']","['CREATE TABLE CLASS ( CLASS_CODE varchar(5) PRIMARY KEY, CRS_CODE varchar(10), CLASS_SECTION varchar(2), CLASS_TIME varchar(20), CLASS_ROOM varchar(8), PROF_NUM int, FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE) FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE COURSE ( CRS_CODE varchar(10) PRIMARY KEY, DEPT_CODE varchar(10), CRS_DESCRIPTION varchar(35), CRS_CREDIT float(8), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE DEPARTMENT ( DEPT_CODE varchar(10) PRIMARY KEY, DEPT_NAME varchar(30), SCHOOL_CODE varchar(8), EMP_NUM int, DEPT_ADDRESS varchar(20), DEPT_EXTENSION varchar(4), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM) )', 'CREATE TABLE EMPLOYEE ( EMP_NUM int PRIMARY KEY, EMP_LNAME varchar(15), EMP_FNAME varchar(12), EMP_INITIAL varchar(1), EMP_JOBCODE varchar(5), EMP_HIREDATE datetime, EMP_DOB datetime )', 'CREATE TABLE ENROLL ( CLASS_CODE varchar(5), STU_NUM int, ENROLL_GRADE varchar(50), FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE) FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM) )', 'CREATE TABLE PROFESSOR ( EMP_NUM int, DEPT_CODE varchar(10), PROF_OFFICE varchar(50), PROF_EXTENSION varchar(4), PROF_HIGH_DEGREE varchar(5), FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM), FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )', 'CREATE TABLE STUDENT ( STU_NUM int PRIMARY KEY, STU_LNAME varchar(15), STU_FNAME varchar(15), STU_INIT varchar(1), STU_DOB datetime, STU_HRS int, STU_CLASS varchar(2), STU_GPA float(8), STU_TRANSFER numeric, DEPT_CODE varchar(18), STU_PHONE varchar(4), PROF_NUM int, FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE) )']"
5671,dorm_1,SELECT dorm_name FROM dorm WHERE student_capacity  >  300,What are the names of all the dorms that can accomdate more than 300 students?,['SELECT' 'dorm_name' 'FROM' 'dorm' 'WHERE' 'student_capacity' '>' '300'],['select' 'dorm_name' 'from' 'dorm' 'where' 'student_capacity' '>' 'value'],"['What' 'are' 'the' 'names' 'of' 'all' 'the' 'dorms' 'that' 'can'
 'accomdate' 'more' 'than' '300' 'students' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Dorm ( dormid INTEGER, dorm_name VARCHAR(20), student_capacity INTEGER, gender VARCHAR(1) )', 'CREATE TABLE Dorm_amenity ( amenid INTEGER, amenity_name VARCHAR(25) )', 'CREATE TABLE Has_amenity ( dormid INTEGER, amenid INTEGER, FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid), FOREIGN KEY (amenid) REFERENCES `Dorm_amenity`(amenid) )', 'CREATE TABLE Lives_in ( stuid INTEGER, dormid INTEGER, room_number INTEGER, FOREIGN KEY (stuid) REFERENCES `Student`(StuID), FOREIGN KEY (dormid) REFERENCES `Dorm`(dormid) )']"
2978,sakila_1,SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK',Which language does the film AIRPORT POLLOCK use? List the language name.,"['SELECT' 'T2.name' 'FROM' 'film' 'AS' 'T1' 'JOIN' 'LANGUAGE' 'AS' 'T2'
 'ON' 'T1.language_id' '=' 'T2.language_id' 'WHERE' 'T1.title' '='
 ""'AIRPORT"" 'POLLOCK' ""'""]","['select' 't2' '.' 'name' 'from' 'film' 'as' 't1' 'join' 'language' 'as'
 't2' 'on' 't1' '.' 'language_id' '=' 't2' '.' 'language_id' 'where' 't1'
 '.' 'title' '=' 'value']","['Which' 'language' 'does' 'the' 'film' 'AIRPORT' 'POLLOCK' 'use' '?'
 'List' 'the' 'language' 'name' '.']","['CREATE TABLE actor ( actor_id SMALLINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id) )', 'CREATE TABLE address ( address_id SMALLINT UNSIGNED NOT NULL, address VARCHAR(50) NOT NULL, address2 VARCHAR(50) DEFAULT NULL, district VARCHAR(20) NOT NULL, city_id SMALLINT UNSIGNED NOT NULL, postal_code VARCHAR(10) DEFAULT NULL, phone VARCHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (address_id), FOREIGN KEY (city_id) REFERENCES city (city_id) )', 'CREATE TABLE category ( category_id TINYINT UNSIGNED NOT NULL, name VARCHAR(25) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (category_id) )', 'CREATE TABLE city ( city_id SMALLINT UNSIGNED NOT NULL, city VARCHAR(50) NOT NULL, country_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (city_id), FOREIGN KEY (country_id) REFERENCES country (country_id) )', 'CREATE TABLE country ( country_id SMALLINT UNSIGNED NOT NULL, country VARCHAR(50) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (country_id) )', 'CREATE TABLE customer ( customer_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, email VARCHAR(50) DEFAULT NULL, address_id SMALLINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, create_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (customer_id), FOREIGN KEY (address_id) REFERENCES address (address_id), FOREIGN KEY (store_id) REFERENCES store (store_id) )', ""CREATE TABLE film ( film_id SMALLINT UNSIGNED NOT NULL, title VARCHAR(255) NOT NULL, description TEXT DEFAULT NULL, release_year YEAR DEFAULT NULL, language_id TINYINT UNSIGNED NOT NULL, original_language_id TINYINT UNSIGNED DEFAULT NULL, rental_duration TINYINT UNSIGNED NOT NULL DEFAULT 3, rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99, length SMALLINT UNSIGNED DEFAULT NULL, replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99, rating DEFAULT 'G', special_features DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id), FOREIGN KEY (language_id) REFERENCES language (language_id), FOREIGN KEY (original_language_id) REFERENCES language (language_id) )"", 'CREATE TABLE film_actor ( actor_id SMALLINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (actor_id,film_id), FOREIGN KEY (actor_id) REFERENCES actor (actor_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE film_category ( film_id SMALLINT UNSIGNED NOT NULL, category_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (film_id, category_id), FOREIGN KEY (film_id) REFERENCES film (film_id), FOREIGN KEY (category_id) REFERENCES category (category_id) )', 'CREATE TABLE film_text ( film_id SMALLINT NOT NULL, title VARCHAR(255) NOT NULL, description TEXT, PRIMARY KEY (film_id) )', 'CREATE TABLE inventory ( inventory_id MEDIUMINT UNSIGNED NOT NULL, film_id SMALLINT UNSIGNED NOT NULL, store_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (inventory_id), FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (film_id) REFERENCES film (film_id) )', 'CREATE TABLE language ( language_id TINYINT UNSIGNED NOT NULL, name CHAR(20) NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (language_id) )', 'CREATE TABLE payment ( payment_id SMALLINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, staff_id TINYINT UNSIGNED NOT NULL, rental_id INT DEFAULT NULL, amount DECIMAL(5,2) NOT NULL, payment_date DATETIME NOT NULL, last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (payment_id), FOREIGN KEY (rental_id) REFERENCES rental (rental_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id) )', 'CREATE TABLE rental ( rental_id INT NOT NULL, rental_date DATETIME NOT NULL, inventory_id MEDIUMINT UNSIGNED NOT NULL, customer_id SMALLINT UNSIGNED NOT NULL, return_date DATETIME DEFAULT NULL, staff_id TINYINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (rental_id), FOREIGN KEY (staff_id) REFERENCES staff (staff_id), FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id), FOREIGN KEY (customer_id) REFERENCES customer (customer_id) )', 'CREATE TABLE staff ( staff_id TINYINT UNSIGNED NOT NULL, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45) NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, picture BLOB DEFAULT NULL, email VARCHAR(50) DEFAULT NULL, store_id TINYINT UNSIGNED NOT NULL, active BOOLEAN NOT NULL DEFAULT TRUE, username VARCHAR(16) NOT NULL, password VARCHAR(40) DEFAULT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (staff_id), --FOREIGN KEY (store_id) REFERENCES store (store_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )', 'CREATE TABLE store ( store_id TINYINT UNSIGNED NOT NULL, manager_staff_id TINYINT UNSIGNED NOT NULL, address_id SMALLINT UNSIGNED NOT NULL, last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (store_id), FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id), FOREIGN KEY (address_id) REFERENCES address (address_id) )']"
6311,e_government,SELECT DISTINCT form_type_code FROM forms,What are the different types of forms?,['SELECT' 'DISTINCT' 'form_type_code' 'FROM' 'forms'],['select' 'distinct' 'form_type_code' 'from' 'forms'],['What' 'are' 'the' 'different' 'types' 'of' 'forms' '?'],"['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) )', 'CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) )', 'CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) )', 'CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) )', 'CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) )', 'CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) )', 'CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) )', 'CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) )', 'CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) )']"
1127,climbing,SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3,What are the different ranges of the 3 mountains with the highest prominence?,"['SELECT' 'DISTINCT' 'Range' 'FROM' 'mountain' 'ORDER' 'BY' 'Prominence'
 'DESC' 'LIMIT' '3']","['select' 'distinct' 'range' 'from' 'mountain' 'order' 'by' 'prominence'
 'desc' 'limit' 'value']","['What' 'are' 'the' 'different' 'ranges' 'of' 'the' '3' 'mountains' 'with'
 'the' 'highest' 'prominence' '?']","['CREATE TABLE ""mountain"" ( ""Mountain_ID"" int, ""Name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, PRIMARY KEY (""Mountain_ID"") )', 'CREATE TABLE ""climber"" ( ""Climber_ID"" int, ""Name"" text, ""Country"" text, ""Time"" text, ""Points"" real, ""Mountain_ID"" int, PRIMARY KEY (""Climber_ID""), FOREIGN KEY (""Mountain_ID"") REFERENCES ""mountain""(""Mountain_ID"") )']"
6328,e_government,SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id,Find name of the services that has never been used.,"['SELECT' 'service_name' 'FROM' 'services' 'EXCEPT' 'SELECT'
 't1.service_name' 'FROM' 'services' 'AS' 't1' 'JOIN' 'party_services'
 'AS' 't2' 'ON' 't1.service_id' '=' 't2.service_id']","['select' 'service_name' 'from' 'services' 'except' 'select' 't1' '.'
 'service_name' 'from' 'services' 'as' 't1' 'join' 'party_services' 'as'
 't2' 'on' 't1' '.' 'service_id' '=' 't2' '.' 'service_id']","['Find' 'name' 'of' 'the' 'services' 'that' 'has' 'never' 'been' 'used'
 '.']","['CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1_number_building` VARCHAR(80), `town_city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Services` ( `service_id` INTEGER PRIMARY KEY, `service_type_code` VARCHAR(15) NOT NULL, `service_name` VARCHAR(80), `service_descriptio` VARCHAR(255) )', 'CREATE TABLE `Forms` ( `form_id` INTEGER PRIMARY KEY, `form_type_code` VARCHAR(15) NOT NULL, `service_id` INTEGER, `form_number` VARCHAR(50), `form_name` VARCHAR(80), `form_description` VARCHAR(255), FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ) )', 'CREATE TABLE `Individuals` ( `individual_id` INTEGER PRIMARY KEY, `individual_first_name` VARCHAR(80), `individual_middle_name` VARCHAR(80), `inidividual_phone` VARCHAR(80), `individual_email` VARCHAR(80), `individual_address` VARCHAR(255), `individual_last_name` VARCHAR(80) )', 'CREATE TABLE `Organizations` ( `organization_id` INTEGER PRIMARY KEY, `date_formed` DATETIME, `organization_name` VARCHAR(255), `uk_vat_number` VARCHAR(20) )', 'CREATE TABLE `Parties` ( `party_id` INTEGER PRIMARY KEY, `payment_method_code` VARCHAR(15) NOT NULL, `party_phone` VARCHAR(80), `party_email` VARCHAR(80) )', 'CREATE TABLE `Organization_Contact_Individuals` ( `individual_id` INTEGER NOT NULL, `organization_id` INTEGER NOT NULL, `date_contact_from` DATETIME NOT NULL, `date_contact_to` DATETIME, PRIMARY KEY (`individual_id`,`organization_id` ), FOREIGN KEY (`organization_id` ) REFERENCES `Organizations`(`organization_id` ), FOREIGN KEY (`individual_id` ) REFERENCES `Individuals`(`individual_id` ) )', 'CREATE TABLE `Party_Addresses` ( `party_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `address_type_code` VARCHAR(15) NOT NULL, `date_address_to` DATETIME, PRIMARY KEY (`party_id`, `address_id`), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ) )', 'CREATE TABLE `Party_Forms` ( `party_id` INTEGER NOT NULL, `form_id` INTEGER NOT NULL, `date_completion_started` DATETIME NOT NULL, `form_status_code` VARCHAR(15) NOT NULL, `date_fully_completed` DATETIME, PRIMARY KEY (`party_id`, `form_id`), FOREIGN KEY (`party_id` ) REFERENCES `Parties`(`party_id` ), FOREIGN KEY (`form_id` ) REFERENCES `Forms`(`form_id` ) )', 'CREATE TABLE `Party_Services` ( `booking_id` INTEGER NOT NULL , `customer_id` INTEGER NOT NULL, `service_id` INTEGER NOT NULL, `service_datetime` DATETIME NOT NULL, `booking_made_date` DATETIME, FOREIGN KEY (`service_id` ) REFERENCES `Services`(`service_id` ), FOREIGN KEY (`customer_id` ) REFERENCES `Parties`(`party_id` ) )']"
3382,sports_competition,"SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",What is the number of players who have points less than 30 for each position?,"['SELECT' 'count' '(' '*' ')' ',' 'POSITION' 'FROM' 'player' 'WHERE'
 'points' '<' '30' 'GROUP' 'BY' 'POSITION']","['select' 'count' '(' '*' ')' ',' 'position' 'from' 'player' 'where'
 'points' '<' 'value' 'group' 'by' 'position']","['What' 'is' 'the' 'number' 'of' 'players' 'who' 'have' 'points' 'less'
 'than' '30' 'for' 'each' 'position' '?']","['CREATE TABLE ""club"" ( ""Club_ID"" int, ""name"" text, ""Region"" text, ""Start_year"" text, PRIMARY KEY (""Club_ID"") )', 'CREATE TABLE ""club_rank"" ( ""Rank"" real, ""Club_ID"" int, ""Gold"" real, ""Silver"" real, ""Bronze"" real, ""Total"" real, PRIMARY KEY (""Rank"",""Club_ID"") FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""name"" text, ""Position"" text, ""Club_ID"" int, ""Apps"" real, ""Tries"" real, ""Goals"" text, ""Points"" real, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Club_ID`) REFERENCES `club`(`Club_ID`) )', 'CREATE TABLE ""competition"" ( ""Competition_ID"" int, ""Year"" real, ""Competition_type"" text, ""Country"" text, PRIMARY KEY (""Competition_ID"") )', 'CREATE TABLE ""competition_result"" ( ""Competition_ID"" int, ""Club_ID_1"" int, ""Club_ID_2"" int, ""Score"" text, PRIMARY KEY (""Competition_ID"",""Club_ID_1"",""Club_ID_2""), FOREIGN KEY (`Club_ID_1`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Club_ID_2`) REFERENCES `club`(`Club_ID`), FOREIGN KEY (`Competition_ID`) REFERENCES `competition`(`Competition_ID`) )']"
1206,apartment_rentals,"SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",What is the minimum and maximum number of bathrooms of all the apartments?,"['SELECT' 'min' '(' 'bathroom_count' ')' ',' 'max' '(' 'bathroom_count'
 ')' 'FROM' 'Apartments']","['select' 'min' '(' 'bathroom_count' ')' ',' 'max' '(' 'bathroom_count'
 ')' 'from' 'apartments']","['What' 'is' 'the' 'minimum' 'and' 'maximum' 'number' 'of' 'bathrooms'
 'of' 'all' 'the' 'apartments' '?']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
1062,match_season,"SELECT DISTINCT POSITION FROM match_season WHERE College  =  ""UCLA"" OR College  =  ""Duke""",Show the distinct position of players from college UCLA or Duke.,"['SELECT' 'DISTINCT' 'POSITION' 'FROM' 'match_season' 'WHERE' 'College'
 '=' '``' 'UCLA' ""''"" 'OR' 'College' '=' '``' 'Duke' ""''""]","['select' 'distinct' 'position' 'from' 'match_season' 'where' 'college'
 '=' 'value' 'or' 'college' '=' 'value']","['Show' 'the' 'distinct' 'position' 'of' 'players' 'from' 'college' 'UCLA'
 'or' 'Duke' '.']","['CREATE TABLE ""country"" ( ""Country_id"" int, ""Country_name"" text, ""Capital"" text, ""Official_native_language"" text, PRIMARY KEY (""Country_id"") )', 'CREATE TABLE `team` ( `Team_id` int, `Name` text, PRIMARY KEY (`Team_id`) )', 'CREATE TABLE ""match_season"" ( ""Season"" real, ""Player"" text, ""Position"" text, ""Country"" int, ""Team"" int, ""Draft_Pick_Number"" int, ""Draft_Class"" text, ""College"" text, PRIMARY KEY (""Season""), FOREIGN KEY (`Country`) REFERENCES `country`(`Country_id`), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Years_Played"" text, ""Total_WL"" text, ""Singles_WL"" text, ""Doubles_WL"" text, ""Team"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`Team`) REFERENCES `team`(`Team_id`) )']"
115,bike_1,"SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",Give me the start station and end station for the trips with the three oldest id.,"['SELECT' 'start_station_name' ',' 'end_station_name' 'FROM' 'trip'
 'ORDER' 'BY' 'id' 'LIMIT' '3']","['select' 'start_station_name' ',' 'end_station_name' 'from' 'trip'
 'order' 'by' 'id' 'limit' 'value']","['Give' 'me' 'the' 'start' 'station' 'and' 'end' 'station' 'for' 'the'
 'trips' 'with' 'the' 'three' 'oldest' 'id' '.']","['CREATE TABLE station ( id INTEGER PRIMARY KEY, name TEXT, lat NUMERIC, long NUMERIC, dock_count INTEGER, city TEXT, installation_date TEXT)', 'CREATE TABLE status ( station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT, FOREIGN KEY (station_id) REFERENCES station(id) )', 'CREATE TABLE trip ( id INTEGER PRIMARY KEY, duration INTEGER, start_date TEXT, start_station_name TEXT, -- this should be removed start_station_id INTEGER, end_date TEXT, end_station_name TEXT, -- this should be removed end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER)', 'CREATE TABLE weather ( date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches NUMERIC, mean_sea_level_pressure_inches NUMERIC, min_sea_level_pressure_inches NUMERIC, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER)']"
6759,activity_1,"SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",What are the first and last name of the faculty who has the most students?,"['SELECT' 'T1.fname' ',' 'T1.lname' 'FROM' 'Faculty' 'AS' 'T1' 'JOIN'
 'Student' 'AS' 'T2' 'ON' 'T1.FacID' '=' 'T2.advisor' 'GROUP' 'BY'
 'T1.FacID' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'fname' ',' 't1' '.' 'lname' 'from' 'faculty' 'as' 't1'
 'join' 'student' 'as' 't2' 'on' 't1' '.' 'facid' '=' 't2' '.' 'advisor'
 'group' 'by' 't1' '.' 'facid' 'order' 'by' 'count' '(' '*' ')' 'desc'
 'limit' 'value']","['What' 'are' 'the' 'first' 'and' 'last' 'name' 'of' 'the' 'faculty' 'who'
 'has' 'the' 'most' 'students' '?']","['CREATE TABLE Activity ( actid INTEGER PRIMARY KEY, activity_name varchar(25) )', 'CREATE TABLE Participates_in ( stuid INTEGER, actid INTEGER, FOREIGN KEY(stuid) REFERENCES Student(StuID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Faculty_Participates_in ( FacID INTEGER, actid INTEGER, FOREIGN KEY(FacID) REFERENCES Faculty(FacID), FOREIGN KEY(actid) REFERENCES Activity(actid) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Faculty ( FacID INTEGER PRIMARY KEY, Lname VARCHAR(15), Fname VARCHAR(15), Rank VARCHAR(15), Sex VARCHAR(1), Phone INTEGER, Room VARCHAR(5), Building VARCHAR(13) )']"
1183,election_representative,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC,What are the names of representatives in descending order of votes?,"['SELECT' 'T2.Name' 'FROM' 'election' 'AS' 'T1' 'JOIN' 'representative'
 'AS' 'T2' 'ON' 'T1.Representative_ID' '=' 'T2.Representative_ID' 'ORDER'
 'BY' 'votes' 'DESC']","['select' 't2' '.' 'name' 'from' 'election' 'as' 't1' 'join'
 'representative' 'as' 't2' 'on' 't1' '.' 'representative_id' '=' 't2' '.'
 'representative_id' 'order' 'by' 'votes' 'desc']","['What' 'are' 'the' 'names' 'of' 'representatives' 'in' 'descending'
 'order' 'of' 'votes' '?']","['CREATE TABLE ""election"" ( ""Election_ID"" int, ""Representative_ID"" int, ""Date"" text, ""Votes"" real, ""Vote_Percent"" real, ""Seats"" real, ""Place"" real, PRIMARY KEY (""Election_ID""), FOREIGN KEY (""Representative_ID"") REFERENCES `representative`(""Representative_ID"") )', 'CREATE TABLE ""representative"" ( ""Representative_ID"" int, ""Name"" text, ""State"" text, ""Party"" text, ""Lifespan"" text, PRIMARY KEY (""Representative_ID"") )']"
6891,tracking_orders,SELECT order_item_id FROM order_items WHERE product_id = 11,Find the ids of all the order items whose product id is 11.,"['SELECT' 'order_item_id' 'FROM' 'order_items' 'WHERE' 'product_id' '='
 '11']","['select' 'order_item_id' 'from' 'order_items' 'where' 'product_id' '='
 'value']","['Find' 'the' 'ids' 'of' 'all' 'the' 'order' 'items' 'whose' 'product'
 'id' 'is' '11' '.']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_name` VARCHAR(80), `customer_details` VARCHAR(255) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `invoice_date` DATETIME, `invoice_details` VARCHAR(255) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `order_status` VARCHAR(10) NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `order_id` INTEGER NOT NULL, `order_item_status` VARCHAR(10) NOT NULL, `order_item_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )', 'CREATE TABLE `Shipments` ( `shipment_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `shipment_tracking_number` VARCHAR(80), `shipment_date` DATETIME, `other_shipment_details` VARCHAR(255), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ) )', 'CREATE TABLE `Shipment_Items` ( `shipment_id` INTEGER NOT NULL, `order_item_id` INTEGER NOT NULL, FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ) )']"
3118,behavior_monitoring,"SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  ""Texas""",What are the monthly rentals of student addresses in Texas state?,"['SELECT' 'T2.monthly_rental' 'FROM' 'Addresses' 'AS' 'T1' 'JOIN'
 'Student_Addresses' 'AS' 'T2' 'ON' 'T1.address_id' '=' 'T2.address_id'
 'WHERE' 'T1.state_province_county' '=' '``' 'Texas' ""''""]","['select' 't2' '.' 'monthly_rental' 'from' 'addresses' 'as' 't1' 'join'
 'student_addresses' 'as' 't2' 'on' 't1' '.' 'address_id' '=' 't2' '.'
 'address_id' 'where' 't1' '.' 'state_province_county' '=' 'value']","['What' 'are' 'the' 'monthly' 'rentals' 'of' 'student' 'addresses' 'in'
 'Texas' 'state' '?']","['CREATE TABLE `Ref_Address_Types` ( `address_type_code` VARCHAR(15) PRIMARY KEY, `address_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Detention_Type` ( `detention_type_code` VARCHAR(10) PRIMARY KEY, `detention_type_description` VARCHAR(80) )', 'CREATE TABLE `Ref_Incident_Type` ( `incident_type_code` VARCHAR(10) PRIMARY KEY, `incident_type_description` VARCHAR(80) )', 'CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `line_1` VARCHAR(120), `line_2` VARCHAR(120), `line_3` VARCHAR(120), `city` VARCHAR(80), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50), `other_address_details` VARCHAR(255) )', 'CREATE TABLE `Students` ( `student_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(40), `last_name` VARCHAR(40), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `date_first_rental` DATETIME, `date_left_university` DATETIME, `other_student_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Teachers` ( `teacher_id` INTEGER PRIMARY KEY, `address_id` INTEGER NOT NULL, `first_name` VARCHAR(80), `middle_name` VARCHAR(80), `last_name` VARCHAR(80), `gender` VARCHAR(1), `cell_mobile_number` VARCHAR(40), `email_address` VARCHAR(40), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Assessment_Notes` ( `notes_id` INTEGER NOT NULL , `student_id` INTEGER, `teacher_id` INTEGER NOT NULL, `date_of_notes` DATETIME, `text_of_notes` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) )', 'CREATE TABLE `Behavior_Incident` ( `incident_id` INTEGER PRIMARY KEY, `incident_type_code` VARCHAR(10) NOT NULL, `student_id` INTEGER NOT NULL, `date_incident_start` DATETIME, `date_incident_end` DATETIME, `incident_summary` VARCHAR(255), `recommendations` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`incident_type_code` ) REFERENCES `Ref_Incident_Type`(`incident_type_code` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Detention` ( `detention_id` INTEGER PRIMARY KEY, `detention_type_code` VARCHAR(10) NOT NULL, `teacher_id` INTEGER, `datetime_detention_start` DATETIME, `datetime_detention_end` DATETIME, `detention_summary` VARCHAR(255), `other_details` VARCHAR(255), FOREIGN KEY (`detention_type_code` ) REFERENCES `Ref_Detention_Type`(`detention_type_code` ), FOREIGN KEY (`teacher_id` ) REFERENCES `Teachers`(`teacher_id` ) )', 'CREATE TABLE `Student_Addresses` ( `student_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_address_from` DATETIME NOT NULL, `date_address_to` DATETIME, `monthly_rental` DECIMAL(19,4), `other_details` VARCHAR(255), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )', 'CREATE TABLE `Students_in_Detention` ( `student_id` INTEGER NOT NULL, `detention_id` INTEGER NOT NULL, `incident_id` INTEGER NOT NULL, FOREIGN KEY (`incident_id` ) REFERENCES `Behavior_Incident`(`incident_id` ), FOREIGN KEY (`detention_id` ) REFERENCES `Detention`(`detention_id` ), FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` ) )']"
361,flight_1,SELECT count(*) FROM Employee,How many employees do we have?,['SELECT' 'count' '(' '*' ')' 'FROM' 'Employee'],['select' 'count' '(' '*' ')' 'from' 'employee'],['How' 'many' 'employees' 'do' 'we' 'have' '?'],"['CREATE TABLE flight( flno number(4,0) primary key, origin varchar2(20), destination varchar2(20), distance number(6,0), departure_date date, arrival_date date, price number(7,2), aid number(9,0), foreign key(""aid"") references `aircraft`(""aid""))', 'CREATE TABLE aircraft( aid number(9,0) primary key, name varchar2(30), distance number(6,0))', 'CREATE TABLE employee( eid number(9,0) primary key, name varchar2(30), salary number(10,2))', 'CREATE TABLE certificate( eid number(9,0), aid number(9,0), primary key(eid,aid), foreign key(""eid"") references `employee`(""eid""), foreign key(""aid"") references `aircraft`(""aid""))']"
6278,city_record,"SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = ""Shanghai""",Give me the temperature of Shanghai in January.,"['SELECT' 'T2.Jan' 'FROM' 'city' 'AS' 'T1' 'JOIN' 'temperature' 'AS' 'T2'
 'ON' 'T1.city_id' '=' 'T2.city_id' 'WHERE' 'T1.city' '=' '``' 'Shanghai'
 ""''""]","['select' 't2' '.' 'jan' 'from' 'city' 'as' 't1' 'join' 'temperature' 'as'
 't2' 'on' 't1' '.' 'city_id' '=' 't2' '.' 'city_id' 'where' 't1' '.'
 'city' '=' 'value']",['Give' 'me' 'the' 'temperature' 'of' 'Shanghai' 'in' 'January' '.'],"['CREATE TABLE ""city"" ( ""City_ID"" int, ""City"" text, ""Hanzi"" text, ""Hanyu_Pinyin"" text, ""Regional_Population"" int, ""GDP"" real, PRIMARY KEY (""City_ID"") )', 'CREATE TABLE ""match"" ( ""Match_ID"" int, ""Date"" text, ""Venue"" text, ""Score"" text, ""Result"" text, ""Competition"" text, PRIMARY KEY (""Match_ID"") )', 'CREATE TABLE ""temperature"" ( ""City_ID"" int, ""Jan"" real, ""Feb"" real, ""Mar"" real, ""Apr"" real, ""Jun"" real, ""Jul"" real, ""Aug"" real, ""Sep"" real, ""Oct"" real, ""Nov"" real, ""Dec"" real, PRIMARY KEY (""City_ID""), FOREIGN KEY (`City_ID`) REFERENCES `city`(`City_ID`) )', 'CREATE TABLE ""hosting_city"" ( ""Year"" int, ""Match_ID"" int, ""Host_City"" text, PRIMARY KEY (""Year""), FOREIGN KEY (`Host_City`) REFERENCES `city`(`City_ID`), FOREIGN KEY (`Match_ID`) REFERENCES `match`(`Match_ID`) )']"
2146,local_govt_in_alabama,SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1,What is the most common participant type?,"['SELECT' 'participant_type_code' 'FROM' 'participants' 'GROUP' 'BY'
 'participant_type_code' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC' 'LIMIT'
 '1']","['select' 'participant_type_code' 'from' 'participants' 'group' 'by'
 'participant_type_code' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit'
 'value']",['What' 'is' 'the' 'most' 'common' 'participant' 'type' '?'],"['CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15) NOT NULL, PRIMARY KEY (Service_ID) )', 'CREATE TABLE Participants ( Participant_ID INTEGER NOT NULL, Participant_Type_Code CHAR(15) NOT NULL, Participant_Details VARCHAR(255), PRIMARY KEY (Participant_ID) )', 'CREATE TABLE Events ( Event_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, Event_Details VARCHAR(255), PRIMARY KEY (Event_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Participants_in_Events ( Event_ID INTEGER NOT NULL, Participant_ID INTEGER NOT NULL, PRIMARY KEY (Event_ID, Participant_ID), FOREIGN KEY (Participant_ID) REFERENCES Participants (Participant_ID), FOREIGN KEY (Event_ID) REFERENCES Events (Event_ID) )']"
3479,hr_1,SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id,find the name of all departments that do actually have one or more employees assigned to them.,"['SELECT' 'DISTINCT' 'T2.department_name' 'FROM' 'employees' 'AS' 'T1'
 'JOIN' 'departments' 'AS' 'T2' 'ON' 'T1.department_id' '='
 'T2.department_id']","['select' 'distinct' 't2' '.' 'department_name' 'from' 'employees' 'as'
 't1' 'join' 'departments' 'as' 't2' 'on' 't1' '.' 'department_id' '='
 't2' '.' 'department_id']","['find' 'the' 'name' 'of' 'all' 'departments' 'that' 'do' 'actually'
 'have' 'one' 'or' 'more' 'employees' 'assigned' 'to' 'them' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
4987,soccer_2,"SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",How many students participated in tryouts for each college by descennding count?,"['SELECT' 'count' '(' '*' ')' ',' 'cName' 'FROM' 'tryout' 'GROUP' 'BY'
 'cName' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC']","['select' 'count' '(' '*' ')' ',' 'cname' 'from' 'tryout' 'group' 'by'
 'cname' 'order' 'by' 'count' '(' '*' ')' 'desc']","['How' 'many' 'students' 'participated' 'in' 'tryouts' 'for' 'each'
 'college' 'by' 'descennding' 'count' '?']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
2668,party_host,SELECT avg(Number_of_hosts) FROM party,What is the average number of hosts for parties?,['SELECT' 'avg' '(' 'Number_of_hosts' ')' 'FROM' 'party'],['select' 'avg' '(' 'number_of_hosts' ')' 'from' 'party'],['What' 'is' 'the' 'average' 'number' 'of' 'hosts' 'for' 'parties' '?'],"['CREATE TABLE ""party"" ( ""Party_ID"" int, ""Party_Theme"" text, ""Location"" text, ""First_year"" text, ""Last_year"" text, ""Number_of_hosts"" int, PRIMARY KEY (""Party_ID"") )', 'CREATE TABLE ""host"" ( ""Host_ID"" int, ""Name"" text, ""Nationality"" text, ""Age"" text, PRIMARY KEY (""Host_ID"") )', 'CREATE TABLE ""party_host"" ( ""Party_ID"" int, ""Host_ID"" int, ""Is_Main_in_Charge"" bool, PRIMARY KEY (""Party_ID"",""Host_ID""), FOREIGN KEY (""Host_ID"") REFERENCES `host`(""Host_ID""), FOREIGN KEY (""Party_ID"") REFERENCES `party`(""Party_ID"") )']"
5047,soccer_2,SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college),How many states have a college with more students than average?,"['SELECT' 'count' '(' 'DISTINCT' 'state' ')' 'FROM' 'college' 'WHERE'
 'enr' '>' '(' 'SELECT' 'avg' '(' 'enr' ')' 'FROM' 'college' ')']","['select' 'count' '(' 'distinct' 'state' ')' 'from' 'college' 'where'
 'enr' '>' '(' 'select' 'avg' '(' 'enr' ')' 'from' 'college' ')']","['How' 'many' 'states' 'have' 'a' 'college' 'with' 'more' 'students'
 'than' 'average' '?']","['CREATE TABLE College ( cName varchar(20) NOT NULL, state varchar(2), enr numeric(5,0), PRIMARY KEY (cName) )', 'CREATE TABLE Player ( pID numeric(5,0) NOT NULL, pName varchar(20), yCard varchar(3), HS numeric(5,0), PRIMARY KEY (pID) )', 'CREATE TABLE Tryout ( pID numeric(5,0), cName varchar(20), pPos varchar(8), decision varchar(3), PRIMARY KEY (pID, cName), FOREIGN KEY (pID) REFERENCES Player(pID), FOREIGN KEY (cName) REFERENCES College(cName) )']"
3498,hr_1,SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200),What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?,"['SELECT' '*' 'FROM' 'employees' 'WHERE' 'department_id' 'NOT' 'IN' '('
 'SELECT' 'department_id' 'FROM' 'departments' 'WHERE' 'manager_id'
 'BETWEEN' '100' 'AND' '200' ')']","['select' '*' 'from' 'employees' 'where' 'department_id' 'not' 'in' '('
 'select' 'department_id' 'from' 'departments' 'where' 'manager_id'
 'between' 'value' 'and' 'value' ')']","['What' 'are' 'the' 'ids' 'for' 'employees' 'who' 'do' 'not' 'work' 'in'
 'departments' 'with' 'managers' 'that' 'have' 'ids' 'between' '100' 'and'
 '200' '?']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
1225,apartment_rentals,"SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",Find the booking start date and end date for the apartments that have more than two bedrooms.,"['SELECT' 'T1.booking_start_date' ',' 'T1.booking_start_date' 'FROM'
 'Apartment_Bookings' 'AS' 'T1' 'JOIN' 'Apartments' 'AS' 'T2' 'ON'
 'T1.apt_id' '=' 'T2.apt_id' 'WHERE' 'T2.bedroom_count' '>' '2']","['select' 't1' '.' 'booking_start_date' ',' 't1' '.' 'booking_start_date'
 'from' 'apartment_bookings' 'as' 't1' 'join' 'apartments' 'as' 't2' 'on'
 't1' '.' 'apt_id' '=' 't2' '.' 'apt_id' 'where' 't2' '.' 'bedroom_count'
 '>' 'value']","['Find' 'the' 'booking' 'start' 'date' 'and' 'end' 'date' 'for' 'the'
 'apartments' 'that' 'have' 'more' 'than' 'two' 'bedrooms' '.']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
5896,cre_Theme_park,"SELECT price_range FROM HOTELS WHERE star_rating_code  =  ""5""",What are the price ranges of five star hotels?,"['SELECT' 'price_range' 'FROM' 'HOTELS' 'WHERE' 'star_rating_code' '='
 '``' '5' ""''""]","['select' 'price_range' 'from' 'hotels' 'where' 'star_rating_code' '='
 'value']",['What' 'are' 'the' 'price' 'ranges' 'of' 'five' 'star' 'hotels' '?'],"['CREATE TABLE Ref_Hotel_Star_Ratings ( star_rating_code CHAR(15) NOT NULL, star_rating_description VARCHAR(80), PRIMARY KEY (star_rating_code), UNIQUE (star_rating_code) )', 'CREATE TABLE Locations ( Location_ID INTEGER NOT NULL, Location_Name VARCHAR(255), Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Location_ID) )', 'CREATE TABLE Ref_Attraction_Types ( Attraction_Type_Code CHAR(15) NOT NULL, Attraction_Type_Description VARCHAR(255), PRIMARY KEY (Attraction_Type_Code), UNIQUE (Attraction_Type_Code) )', 'CREATE TABLE Visitors ( Tourist_ID INTEGER NOT NULL, Tourist_Details VARCHAR(255), PRIMARY KEY (Tourist_ID), UNIQUE (Tourist_ID) )', 'CREATE TABLE Features ( Feature_ID INTEGER NOT NULL, Feature_Details VARCHAR(255), PRIMARY KEY (Feature_ID) )', 'CREATE TABLE Hotels ( hotel_id INTEGER NOT NULL, star_rating_code CHAR(15) NOT NULL, pets_allowed_yn CHAR(1), price_range real, other_hotel_details VARCHAR(255), PRIMARY KEY (hotel_id), FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code) )', 'CREATE TABLE Tourist_Attractions ( Tourist_Attraction_ID INTEGER NOT NULL, Attraction_Type_Code CHAR(15) NOT NULL, Location_ID INTEGER NOT NULL, How_to_Get_There VARCHAR(255), Name VARCHAR(255), Description VARCHAR(255), Opening_Hours VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Tourist_Attraction_ID), FOREIGN KEY (Location_ID) REFERENCES Locations (Location_ID), FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code) )', 'CREATE TABLE Street_Markets ( Market_ID INTEGER NOT NULL, Market_Details VARCHAR(255), PRIMARY KEY (Market_ID), FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Shops ( Shop_ID INTEGER NOT NULL, Shop_Details VARCHAR(255), PRIMARY KEY (Shop_ID), FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Museums ( Museum_ID INTEGER NOT NULL, Museum_Details VARCHAR(255), PRIMARY KEY (Museum_ID), FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Royal_Family ( Royal_Family_ID INTEGER NOT NULL, Royal_Family_Details VARCHAR(255), PRIMARY KEY (Royal_Family_ID), FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Theme_Parks ( Theme_Park_ID INTEGER NOT NULL, Theme_Park_Details VARCHAR(255), PRIMARY KEY (Theme_Park_ID), FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Visits ( Visit_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Tourist_ID INTEGER NOT NULL, Visit_Date DATETIME NOT NULL, Visit_Details VARCHAR(40) NOT NULL, PRIMARY KEY (Visit_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Tourist_ID) REFERENCES Visitors (Tourist_ID) )', 'CREATE TABLE Photos ( Photo_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(255), Description VARCHAR(255), Filename VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Photo_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Tourist_Attraction_ID INTEGER NOT NULL, Name VARCHAR(40), Other_Details VARCHAR(255), PRIMARY KEY (Staff_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID) )', 'CREATE TABLE Tourist_Attraction_Features ( Tourist_Attraction_ID INTEGER NOT NULL, Feature_ID INTEGER NOT NULL, PRIMARY KEY (Tourist_Attraction_ID, Feature_ID), FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID), FOREIGN KEY (Feature_ID) REFERENCES Features (Feature_ID) )']"
4847,local_govt_and_lot,"SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id","List the id and type of each thing, and the details of the organization that owns it.","['SELECT' 'T1.thing_id' ',' 'T1.type_of_Thing_Code' ','
 'T2.organization_details' 'FROM' 'Things' 'AS' 'T1' 'JOIN'
 'Organizations' 'AS' 'T2' 'ON' 'T1.organization_id' '='
 'T2.organization_id']","['select' 't1' '.' 'thing_id' ',' 't1' '.' 'type_of_thing_code' ',' 't2'
 '.' 'organization_details' 'from' 'things' 'as' 't1' 'join'
 'organizations' 'as' 't2' 'on' 't1' '.' 'organization_id' '=' 't2' '.'
 'organization_id']","['List' 'the' 'id' 'and' 'type' 'of' 'each' 'thing' ',' 'and' 'the'
 'details' 'of' 'the' 'organization' 'that' 'owns' 'it' '.']","['CREATE TABLE Customers ( customer_id INTEGER NOT NULL, customer_details VARCHAR(255), PRIMARY KEY (customer_id) )', 'CREATE TABLE Properties ( property_id INTEGER NOT NULL, property_type_code CHAR(15) NOT NULL, property_address VARCHAR(255), other_details VARCHAR(255), PRIMARY KEY (property_id) )', 'CREATE TABLE Residents ( resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, date_moved_out DATETIME NOT NULL, other_details VARCHAR(255), PRIMARY KEY (resident_id, property_id, date_moved_in), FOREIGN KEY (property_id) REFERENCES Properties (property_id) )', 'CREATE TABLE Organizations ( organization_id INTEGER NOT NULL, parent_organization_id INTEGER, organization_details VARCHAR(255), PRIMARY KEY (organization_id) )', 'CREATE TABLE Services ( service_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (service_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) )', 'CREATE TABLE Residents_Services ( resident_id INTEGER NOT NULL, service_id INTEGER NOT NULL, date_moved_in DATETIME, property_id INTEGER, date_requested DATETIME, date_provided DATETIME, other_details VARCHAR(255), PRIMARY KEY (resident_id, service_id), FOREIGN KEY (service_id) REFERENCES Services (service_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) )', 'CREATE TABLE Things ( thing_id INTEGER NOT NULL, organization_id INTEGER NOT NULL, Type_of_Thing_Code CHAR(15) NOT NULL, service_type_code CHAR(10) NOT NULL, service_details VARCHAR(255), PRIMARY KEY (thing_id), FOREIGN KEY (organization_id) REFERENCES Organizations (organization_id) )', 'CREATE TABLE Customer_Events ( Customer_Event_ID INTEGER NOT NULL, customer_id INTEGER, date_moved_in DATETIME, property_id INTEGER, resident_id INTEGER, thing_id INTEGER NOT NULL, PRIMARY KEY (Customer_Event_ID), FOREIGN KEY (thing_id) REFERENCES Things (thing_id), FOREIGN KEY (customer_id) REFERENCES Customers (customer_id), FOREIGN KEY (resident_id, property_id, date_moved_in) REFERENCES Residents (resident_id,property_id,date_moved_in) )', 'CREATE TABLE Customer_Event_Notes ( Customer_Event_Note_ID INTEGER NOT NULL, Customer_Event_ID INTEGER NOT NULL, service_type_code CHAR(15) NOT NULL, resident_id INTEGER NOT NULL, property_id INTEGER NOT NULL, date_moved_in DATETIME NOT NULL, PRIMARY KEY (Customer_Event_Note_ID), FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID) )', 'CREATE TABLE Timed_Status_of_Things ( thing_id INTEGER NOT NULL, Date_and_Date DATETIME NOT NULL, Status_of_Thing_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Date, Status_of_Thing_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id) )', 'CREATE TABLE Timed_Locations_of_Things ( thing_id INTEGER NOT NULL, Date_and_Time DATETIME NOT NULL, Location_Code CHAR(15) NOT NULL, PRIMARY KEY (thing_id, Date_and_Time, Location_Code), FOREIGN KEY (thing_id) REFERENCES Things (thing_id))']"
2270,entrepreneur,SELECT avg(Money_Requested) FROM entrepreneur,Return the average money requested across all entrepreneurs.,['SELECT' 'avg' '(' 'Money_Requested' ')' 'FROM' 'entrepreneur'],['select' 'avg' '(' 'money_requested' ')' 'from' 'entrepreneur'],"['Return' 'the' 'average' 'money' 'requested' 'across' 'all'
 'entrepreneurs' '.']","['CREATE TABLE ""entrepreneur"" ( ""Entrepreneur_ID"" int, ""People_ID"" int, ""Company"" text, ""Money_Requested"" real, ""Investor"" text, PRIMARY KEY (""Entrepreneur_ID""), FOREIGN KEY (""People_ID"") REFERENCES ""people""(""People_ID"") )', 'CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Height"" real, ""Weight"" real, ""Date_of_Birth"" text, PRIMARY KEY (""People_ID"") )']"
922,insurance_fnol,"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  ""Close a policy"" OR t3.service_name  =  ""Upgrade a policy""","Which customers have used the service named ""Close a policy"" or ""Upgrade a policy""? Give me the customer names.","['SELECT' 't1.customer_name' 'FROM' 'customers' 'AS' 't1' 'JOIN'
 'first_notification_of_loss' 'AS' 't2' 'ON' 't1.customer_id' '='
 't2.customer_id' 'JOIN' 'services' 'AS' 't3' 'ON' 't2.service_id' '='
 't3.service_id' 'WHERE' 't3.service_name' '=' '``' 'Close' 'a' 'policy'
 ""''"" 'OR' 't3.service_name' '=' '``' 'Upgrade' 'a' 'policy' ""''""]","['select' 't1' '.' 'customer_name' 'from' 'customers' 'as' 't1' 'join'
 'first_notification_of_loss' 'as' 't2' 'on' 't1' '.' 'customer_id' '='
 't2' '.' 'customer_id' 'join' 'services' 'as' 't3' 'on' 't2' '.'
 'service_id' '=' 't3' '.' 'service_id' 'where' 't3' '.' 'service_name'
 '=' 'value' 'or' 't3' '.' 'service_name' '=' 'value']","['Which' 'customers' 'have' 'used' 'the' 'service' 'named' '``' 'Close'
 'a' 'policy' ""''"" 'or' '``' 'Upgrade' 'a' 'policy' ""''"" '?' 'Give' 'me'
 'the' 'customer' 'names' '.']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) )', 'CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) )', 'CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) )', 'CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )']"
6871,flight_4,SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines',Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.,"['SELECT' 'count' '(' '*' ')' 'FROM' 'routes' 'AS' 'T1' 'JOIN' 'airports'
 'AS' 'T2' 'ON' 'T1.dst_apid' '=' 'T2.apid' 'JOIN' 'airlines' 'AS' 'T3'
 'ON' 'T1.alid' '=' 'T3.alid' 'WHERE' 'T2.country' '=' ""'Italy"" ""'"" 'AND'
 'T3.name' '=' ""'American"" 'Airlines' ""'""]","['select' 'count' '(' '*' ')' 'from' 'routes' 'as' 't1' 'join' 'airports'
 'as' 't2' 'on' 't1' '.' 'dst_apid' '=' 't2' '.' 'apid' 'join' 'airlines'
 'as' 't3' 'on' 't1' '.' 'alid' '=' 't3' '.' 'alid' 'where' 't2' '.'
 'country' '=' 'value' 'and' 't3' '.' 'name' '=' 'value']","['Return' 'the' 'number' 'of' 'routes' 'with' 'destination' 'airport' 'in'
 'Italy' 'operated' 'by' 'the' 'airline' 'with' 'name' ""'American""
 'Airlines' ""'"" '.']","['CREATE TABLE routes ( rid integer PRIMARY KEY, dst_apid integer, -- Id of destination airport dst_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the destination airport src_apid bigint, -- Id of source airport src_ap varchar(4), -- 3-letter (IATA) or 4-letter (ICAO) code of the source airport alid bigint, -- Id of airline airline varchar(4), -- 2-letter (IATA) or 3-letter (ICAO) code of the airline codeshare text, -- ""Y"" if this flight is a codeshare (that is, not operated by -- Airline, but another carrier), empty otherwise FOREIGN KEY(dst_apid) REFERENCES airports(apid), FOREIGN KEY(src_apid) REFERENCES airports(apid), FOREIGN KEY(alid) REFERENCES airlines(alid) )', 'CREATE TABLE airports ( apid integer PRIMARY KEY, -- Id of the airport name text NOT NULL, -- Name of airport city text, -- Main city served by airport country text, -- Country or territory where airport is located x real, -- Latitude of airport: Decimal degrees, usually to six -- significant digits. Negative is South, positive is North y real, -- Longitude of airport: Decimal degrees, usually to six -- significant digits. Negative is West, positive is East elevation bigint, -- Altitude of airport measured in feets iata character varchar(3), -- 3-letter IATA code. empty or null if not assigned/unknown icao character varchar(4) -- 4-letter ICAO code. empty or null if not assigned )', 'CREATE TABLE airlines ( alid integer PRIMARY KEY, -- Id of the airline name text, -- Name of the airline iata varchar(2), -- 2-letter IATA code. empty or null if not assigned/unknown icao varchar(3), -- 3-letter ICAO code. empty or null if not assigned callsign text, -- Airline callsign country text, -- Country or territory where airline is incorporated active varchar(2) -- ""Y"" if the airline is or has until recently been operational, )']"
1859,wrestler,"SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC","What are the names of wrestlers and their teams in elimination, ordered descending by days held?","['SELECT' 'T2.Name' ',' 'T1.Team' 'FROM' 'elimination' 'AS' 'T1' 'JOIN'
 'wrestler' 'AS' 'T2' 'ON' 'T1.Wrestler_ID' '=' 'T2.Wrestler_ID' 'ORDER'
 'BY' 'T2.Days_held' 'DESC']","['select' 't2' '.' 'name' ',' 't1' '.' 'team' 'from' 'elimination' 'as'
 't1' 'join' 'wrestler' 'as' 't2' 'on' 't1' '.' 'wrestler_id' '=' 't2' '.'
 'wrestler_id' 'order' 'by' 't2' '.' 'days_held' 'desc']","['What' 'are' 'the' 'names' 'of' 'wrestlers' 'and' 'their' 'teams' 'in'
 'elimination' ',' 'ordered' 'descending' 'by' 'days' 'held' '?']","['CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") )', 'CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") )']"
1217,apartment_rentals,"SELECT guest_first_name ,  guest_last_name FROM Guests",What are the first names and last names of all the guests?,"['SELECT' 'guest_first_name' ',' 'guest_last_name' 'FROM' 'Guests']","['select' 'guest_first_name' ',' 'guest_last_name' 'from' 'guests']","['What' 'are' 'the' 'first' 'names' 'and' 'last' 'names' 'of' 'all' 'the'
 'guests' '?']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
812,chinook_1,"SELECT * FROM CUSTOMER WHERE State  =  ""NY""",What is all the customer information for customers in NY state?,"['SELECT' '*' 'FROM' 'CUSTOMER' 'WHERE' 'State' '=' '``' 'NY' ""''""]",['select' '*' 'from' 'customer' 'where' 'state' '=' 'value'],"['What' 'is' 'all' 'the' 'customer' 'information' 'for' 'customers' 'in'
 'NY' 'state' '?']","['CREATE TABLE `Album` ( `AlbumId` integer NOT NULL , `Title` varchar(160) NOT NULL , `ArtistId` integer NOT NULL , PRIMARY KEY (`AlbumId`) , CONSTRAINT `FK_AlbumArtistId` FOREIGN KEY (`ArtistId`) REFERENCES `Artist` (`ArtistId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Artist` ( `ArtistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`ArtistId`) )', 'CREATE TABLE `Customer` ( `CustomerId` integer NOT NULL , `FirstName` varchar(40) NOT NULL , `LastName` varchar(20) NOT NULL , `Company` varchar(80) DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) NOT NULL , `SupportRepId` integer DEFAULT NULL , PRIMARY KEY (`CustomerId`) , CONSTRAINT `FK_CustomerSupportRepId` FOREIGN KEY (`SupportRepId`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Employee` ( `EmployeeId` integer NOT NULL , `LastName` varchar(20) NOT NULL , `FirstName` varchar(20) NOT NULL , `Title` varchar(30) DEFAULT NULL , `ReportsTo` integer DEFAULT NULL , `BirthDate` datetime DEFAULT NULL , `HireDate` datetime DEFAULT NULL , `Address` varchar(70) DEFAULT NULL , `City` varchar(40) DEFAULT NULL , `State` varchar(40) DEFAULT NULL , `Country` varchar(40) DEFAULT NULL , `PostalCode` varchar(10) DEFAULT NULL , `Phone` varchar(24) DEFAULT NULL , `Fax` varchar(24) DEFAULT NULL , `Email` varchar(60) DEFAULT NULL , PRIMARY KEY (`EmployeeId`) , CONSTRAINT `FK_EmployeeReportsTo` FOREIGN KEY (`ReportsTo`) REFERENCES `Employee` (`EmployeeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Genre` ( `GenreId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`GenreId`) )', 'CREATE TABLE `Invoice` ( `InvoiceId` integer NOT NULL , `CustomerId` integer NOT NULL , `InvoiceDate` datetime NOT NULL , `BillingAddress` varchar(70) DEFAULT NULL , `BillingCity` varchar(40) DEFAULT NULL , `BillingState` varchar(40) DEFAULT NULL , `BillingCountry` varchar(40) DEFAULT NULL , `BillingPostalCode` varchar(10) DEFAULT NULL , `Total` decimal(10,2) NOT NULL , PRIMARY KEY (`InvoiceId`) , CONSTRAINT `FK_InvoiceCustomerId` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `InvoiceLine` ( `InvoiceLineId` integer NOT NULL , `InvoiceId` integer NOT NULL , `TrackId` integer NOT NULL , `UnitPrice` decimal(10,2) NOT NULL , `Quantity` integer NOT NULL , PRIMARY KEY (`InvoiceLineId`) , CONSTRAINT `FK_InvoiceLineInvoiceId` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_InvoiceLineTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `MediaType` ( `MediaTypeId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`MediaTypeId`) )', 'CREATE TABLE `Playlist` ( `PlaylistId` integer NOT NULL , `Name` varchar(120) DEFAULT NULL , PRIMARY KEY (`PlaylistId`) )', 'CREATE TABLE `PlaylistTrack` ( `PlaylistId` integer NOT NULL , `TrackId` integer NOT NULL , PRIMARY KEY (`PlaylistId`,`TrackId`) , CONSTRAINT `FK_PlaylistTrackPlaylistId` FOREIGN KEY (`PlaylistId`) REFERENCES `Playlist` (`PlaylistId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_PlaylistTrackTrackId` FOREIGN KEY (`TrackId`) REFERENCES `Track` (`TrackId`) ON DELETE NO ACTION ON UPDATE NO ACTION )', 'CREATE TABLE `Track` ( `TrackId` integer NOT NULL , `Name` varchar(200) NOT NULL , `AlbumId` integer DEFAULT NULL , `MediaTypeId` integer NOT NULL , `GenreId` integer DEFAULT NULL , `Composer` varchar(220) DEFAULT NULL , `Milliseconds` integer NOT NULL , `Bytes` integer DEFAULT NULL , `UnitPrice` decimal(10,2) NOT NULL , PRIMARY KEY (`TrackId`) , CONSTRAINT `FK_TrackAlbumId` FOREIGN KEY (`AlbumId`) REFERENCES `Album` (`AlbumId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackGenreId` FOREIGN KEY (`GenreId`) REFERENCES `Genre` (`GenreId`) ON DELETE NO ACTION ON UPDATE NO ACTION , CONSTRAINT `FK_TrackMediaTypeId` FOREIGN KEY (`MediaTypeId`) REFERENCES `MediaType` (`MediaTypeId`) ON DELETE NO ACTION ON UPDATE NO ACTION )']"
4897,school_player,"SELECT Nickname FROM school_details WHERE Division != ""Division 1""",What are the nicknames of schools whose division is not 1?,"['SELECT' 'Nickname' 'FROM' 'school_details' 'WHERE' 'Division' '!' '='
 '``' 'Division' '1' ""''""]","['select' 'nickname' 'from' 'school_details' 'where' 'division' '!' '='
 'value']","['What' 'are' 'the' 'nicknames' 'of' 'schools' 'whose' 'division' 'is'
 'not' '1' '?']","['CREATE TABLE ""school"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Enrollment"" real, ""Founded"" real, ""Denomination"" text, ""Boys_or_Girls"" text, ""Day_or_Boarding"" text, ""Year_Entered_Competition"" real, ""School_Colors"" text, PRIMARY KEY (""School_Id"") )', 'CREATE TABLE ""school_details"" ( ""School_ID"" int, ""Nickname"" text, ""Colors"" text, ""League"" text, ""Class"" text, ""Division"" text, PRIMARY KEY (""School_Id""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""school_performance"" ( ""School_Id"" int, ""School_Year"" text, ""Class_A"" text, ""Class_AA"" text, PRIMARY KEY (""School_Id"",""School_Year""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )', 'CREATE TABLE ""player"" ( ""Player_ID"" int, ""Player"" text, ""Team"" text, ""Age"" int, ""Position"" text, ""School_ID"" int, PRIMARY KEY (""Player_ID""), FOREIGN KEY (`School_ID`) REFERENCES `school`(`School_ID`) )']"
797,coffee_shop,SELECT count(*) FROM member WHERE address != 'Hartford',How many members are not living in Hartford?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'member' 'WHERE' 'address' '!' '='
 ""'Hartford"" ""'""]","['select' 'count' '(' '*' ')' 'from' 'member' 'where' 'address' '!' '='
 'value']",['How' 'many' 'members' 'are' 'not' 'living' 'in' 'Hartford' '?'],"['CREATE TABLE ""shop"" ( ""Shop_ID"" int, ""Address"" text, ""Num_of_staff"" text, ""Score"" real, ""Open_Year"" text, PRIMARY KEY (""Shop_ID"") )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Membership_card"" text, ""Age"" int, ""Time_of_purchase"" int, ""Level_of_membership"" int, ""Address"" text, PRIMARY KEY (""Member_ID"") )', 'CREATE TABLE ""happy_hour"" ( ""HH_ID"" int, ""Shop_ID"" int, ""Month"" text, ""Num_of_shaff_in_charge"" int, PRIMARY KEY (""HH_ID"",""Shop_ID"",""Month""), FOREIGN KEY (""Shop_ID"") REFERENCES `shop`(""Shop_ID"") )', 'CREATE TABLE ""happy_hour_member"" ( ""HH_ID"" int, ""Member_ID"" int, ""Total_amount"" real, PRIMARY KEY (""HH_ID"",""Member_ID""), FOREIGN KEY (""Member_ID"") REFERENCES `member`(""Member_ID"") )']"
917,insurance_fnol,SELECT count(*) FROM services,How many services are there?,['SELECT' 'count' '(' '*' ')' 'FROM' 'services'],['select' 'count' '(' '*' ')' 'from' 'services'],['How' 'many' 'services' 'are' 'there' '?'],"['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_name VARCHAR(40), PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_name VARCHAR(40), PRIMARY KEY (Service_ID) )', 'CREATE TABLE Available_Policies ( Policy_ID INTEGER NOT NULL, policy_type_code CHAR(15), Customer_Phone VARCHAR(255), PRIMARY KEY (Policy_ID), UNIQUE (Policy_ID) )', 'CREATE TABLE Customers_Policies ( Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Date_Opened DATE, Date_Closed DATE, PRIMARY KEY (Customer_ID, Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Policy_ID) REFERENCES Available_Policies (Policy_ID) )', 'CREATE TABLE First_Notification_of_Loss ( FNOL_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_ID INTEGER NOT NULL, Service_ID INTEGER NOT NULL, PRIMARY KEY (FNOL_ID), UNIQUE (FNOL_ID), FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID), FOREIGN KEY (Customer_ID, Policy_ID) REFERENCES Customers_Policies (Customer_ID,Policy_ID) )', 'CREATE TABLE Claims ( Claim_ID INTEGER NOT NULL, FNOL_ID INTEGER NOT NULL, Effective_Date DATE, PRIMARY KEY (Claim_ID), UNIQUE (Claim_ID), FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID) )', 'CREATE TABLE Settlements ( Settlement_ID INTEGER NOT NULL, Claim_ID INTEGER, Effective_Date DATE, Settlement_Amount REAL, PRIMARY KEY (Settlement_ID), UNIQUE (Settlement_ID), FOREIGN KEY (Claim_ID) REFERENCES Claims (Claim_ID) )']"
5478,voter_2,"SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  ""Spring""",Find the distinct Advisor of students who have treasurer votes in the spring election cycle.,"['SELECT' 'DISTINCT' 'T1.Advisor' 'FROM' 'STUDENT' 'AS' 'T1' 'JOIN'
 'VOTING_RECORD' 'AS' 'T2' 'ON' 'T1.StuID' '=' 'T2.Treasurer_Vote' 'WHERE'
 'T2.Election_Cycle' '=' '``' 'Spring' ""''""]","['select' 'distinct' 't1' '.' 'advisor' 'from' 'student' 'as' 't1' 'join'
 'voting_record' 'as' 't2' 'on' 't1' '.' 'stuid' '=' 't2' '.'
 'treasurer_vote' 'where' 't2' '.' 'election_cycle' '=' 'value']","['Find' 'the' 'distinct' 'Advisor' 'of' 'students' 'who' 'have'
 'treasurer' 'votes' 'in' 'the' 'spring' 'election' 'cycle' '.']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
986,university_basketball,SELECT count(DISTINCT school_id) FROM basketball_match,Count the number of schools that have had basketball matches.,['SELECT' 'count' '(' 'DISTINCT' 'school_id' ')' 'FROM' 'basketball_match'],['select' 'count' '(' 'distinct' 'school_id' ')' 'from' 'basketball_match'],"['Count' 'the' 'number' 'of' 'schools' 'that' 'have' 'had' 'basketball'
 'matches' '.']","['CREATE TABLE ""basketball_match"" ( ""Team_ID"" int, ""School_ID"" int, ""Team_Name"" text, ""ACC_Regular_Season"" text, ""ACC_Percent"" text, ""ACC_Home"" text, ""ACC_Road"" text, ""All_Games"" text, ""All_Games_Percent"" int, ""All_Home"" text, ""All_Road"" text, ""All_Neutral"" text, PRIMARY KEY (""Team_ID""), FOREIGN KEY (`School_ID`) REFERENCES `university`(`School_ID`) )', 'CREATE TABLE ""university"" ( ""School_ID"" int, ""School"" text, ""Location"" text, ""Founded"" real, ""Affiliation"" text, ""Enrollment"" real, ""Nickname"" text, ""Primary_conference"" text, PRIMARY KEY (""School_ID"") )']"
1429,college_2,SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010,Give the title of the course offered in Chandler during the Fall of 2010.,"['SELECT' 'T1.title' 'FROM' 'course' 'AS' 'T1' 'JOIN' 'SECTION' 'AS' 'T2'
 'ON' 'T1.course_id' '=' 'T2.course_id' 'WHERE' 'building' '=' ""'Chandler""
 ""'"" 'AND' 'semester' '=' ""'Fall"" ""'"" 'AND' 'YEAR' '=' '2010']","['select' 't1' '.' 'title' 'from' 'course' 'as' 't1' 'join' 'section' 'as'
 't2' 'on' 't1' '.' 'course_id' '=' 't2' '.' 'course_id' 'where'
 'building' '=' 'value' 'and' 'semester' '=' 'value' 'and' 'year' '='
 'value']","['Give' 'the' 'title' 'of' 'the' 'course' 'offered' 'in' 'Chandler'
 'during' 'the' 'Fall' 'of' '2010' '.']","['CREATE TABLE classroom (building varchar(15), room_number varchar(7), capacity numeric(4,0), primary key (building, room_number) )', 'CREATE TABLE department (dept_name varchar(20), building varchar(15), budget numeric(12,2) check (budget > 0), primary key (dept_name) )', 'CREATE TABLE course (course_id varchar(8), title varchar(50), dept_name varchar(20) NULL, credits numeric(2,0) check (credits > 0), primary key (course_id), FOREIGN KEY (dept_name) REFERENCES `department` (dept_name) ON DELETE SET NULL -- ON UPDATE NO ACTION -- foreign key (dept_name) references department -- on delete set null )', 'CREATE TABLE instructor (ID varchar(5), name varchar(20) not null, dept_name varchar(20), salary numeric(8,2) check (salary > 29000), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', ""CREATE TABLE section (course_id varchar(8), sec_id varchar(8), semester varchar(6) check (semester in ('Fall', 'Winter', 'Spring', 'Summer')), year numeric(4,0) check (year > 1701 and year < 2100), building varchar(15), room_number varchar(7), time_slot_id varchar(4), primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete cascade, foreign key (building, room_number) references classroom (building, room_number) on delete set null )"", 'CREATE TABLE teaches (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references instructor (ID) on delete cascade )', 'CREATE TABLE student (ID varchar(5), name varchar(20) not null, dept_name varchar(20), tot_cred numeric(3,0) check (tot_cred >= 0), primary key (ID), foreign key (dept_name) references department (dept_name) on delete set null )', 'CREATE TABLE takes (ID varchar(5), course_id varchar(8), sec_id varchar(8), semester varchar(6), year numeric(4,0), grade varchar(2), primary key (ID, course_id, sec_id, semester, year), foreign key (course_id,sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete cascade, foreign key (ID) references student (ID) on delete cascade )', 'CREATE TABLE advisor (s_ID varchar(5), i_ID varchar(5), primary key (s_ID), foreign key (i_ID) references instructor (ID) on delete set null, foreign key (s_ID) references student (ID) on delete cascade )', 'CREATE TABLE time_slot (time_slot_id varchar(4), day varchar(1), start_hr numeric(2) check (start_hr >= 0 and start_hr < 24), start_min numeric(2) check (start_min >= 0 and start_min < 60), end_hr numeric(2) check (end_hr >= 0 and end_hr < 24), end_min numeric(2) check (end_min >= 0 and end_min < 60), primary key (time_slot_id, day, start_hr, start_min) )', 'CREATE TABLE prereq (course_id varchar(8), prereq_id varchar(8), primary key (course_id, prereq_id), foreign key (course_id) references course (course_id) on delete cascade, foreign key (prereq_id) references course (course_id) )']"
4485,decoration_competition,SELECT Name FROM member ORDER BY Name ASC,List the names of members in ascending alphabetical order.,['SELECT' 'Name' 'FROM' 'member' 'ORDER' 'BY' 'Name' 'ASC'],['select' 'name' 'from' 'member' 'order' 'by' 'name' 'asc'],"['List' 'the' 'names' 'of' 'members' 'in' 'ascending' 'alphabetical'
 'order' '.']","['CREATE TABLE ""college"" ( ""College_ID"" int, ""Name"" text, ""Leader_Name"" text, ""College_Location"" text, PRIMARY KEY (""College_ID"") )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Name"" text, ""Country"" text, ""College_ID"" int, PRIMARY KEY (""Member_ID""), FOREIGN KEY (""College_ID"") REFERENCES `college`(""College_ID"") )', 'CREATE TABLE ""round"" ( ""Round_ID"" int, ""Member_ID"" int, ""Decoration_Theme"" text, ""Rank_in_Round"" int, PRIMARY KEY (""Member_ID"",""Round_ID""), FOREIGN KEY (""Member_ID"") REFERENCES ""member""(""Member_ID"") )']"
2578,inn_1,"SELECT kids FROM Reservations WHERE FirstName = ""ROY"" AND LastName  =  ""SWEAZY"";",How many kids stay in the rooms reserved by ROY SWEAZY?,"['SELECT' 'kids' 'FROM' 'Reservations' 'WHERE' 'FirstName' '=' '``' 'ROY'
 ""''"" 'AND' 'LastName' '=' '``' 'SWEAZY' ""''"" ';']","['select' 'kids' 'from' 'reservations' 'where' 'firstname' '=' 'value'
 'and' 'lastname' '=' 'value']","['How' 'many' 'kids' 'stay' 'in' 'the' 'rooms' 'reserved' 'by' 'ROY'
 'SWEAZY' '?']","['CREATE TABLE ""Rooms"" ( \t""RoomId"" TEXT PRIMARY KEY,\t""roomName"" TEXT, \t""beds"" INTEGER, \t""bedType"" TEXT, \t""maxOccupancy"" INTEGER, \t""basePrice"" INTEGER, \t""decor"" TEXT);', 'CREATE TABLE ""Reservations"" ( \t""Code"" INTEGER PRIMARY KEY, \t""Room"" TEXT, \t""CheckIn"" TEXT, \t""CheckOut"" TEXT, \t""Rate"" REAL, \t""LastName"" TEXT, \t""FirstName"" TEXT, \t""Adults"" INTEGER, \t""Kids"" INTEGER,\tFOREIGN KEY (Room) REFERENCES Rooms(RoomId));']"
6418,cre_Docs_and_Epenses,"SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",How many documents are there of each type?,"['SELECT' 'document_type_code' ',' 'count' '(' '*' ')' 'FROM' 'Documents'
 'GROUP' 'BY' 'document_type_code']","['select' 'document_type_code' ',' 'count' '(' '*' ')' 'from' 'documents'
 'group' 'by' 'document_type_code']",['How' 'many' 'documents' 'are' 'there' 'of' 'each' 'type' '?'],"['CREATE TABLE Ref_Document_Types ( Document_Type_Code CHAR(15) NOT NULL, Document_Type_Name VARCHAR(255) NOT NULL, Document_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Document_Type_Code) )', 'CREATE TABLE Ref_Budget_Codes ( Budget_Type_Code CHAR(15) NOT NULL, Budget_Type_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Budget_Type_Code) )', 'CREATE TABLE Projects ( Project_ID INTEGER NOT NULL, Project_Details VARCHAR(255), PRIMARY KEY (Project_ID) )', 'CREATE TABLE Documents ( Document_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Project_ID INTEGER NOT NULL, Document_Date DATETIME, Document_Name VARCHAR(255), Document_Description VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code), FOREIGN KEY (Project_ID) REFERENCES Projects (Project_ID) )', 'CREATE TABLE Statements ( Statement_ID INTEGER NOT NULL, Statement_Details VARCHAR(255), PRIMARY KEY (Statement_ID), FOREIGN KEY (Statement_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Documents_with_Expenses ( Document_ID INTEGER NOT NULL, Budget_Type_Code CHAR(15) NOT NULL, Document_Details VARCHAR(255), PRIMARY KEY (Document_ID), FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code), FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID) )', 'CREATE TABLE Accounts ( Account_ID INTEGER NOT NULL, Statement_ID INTEGER NOT NULL, Account_Details VARCHAR(255), PRIMARY KEY (Account_ID), FOREIGN KEY (Statement_ID) REFERENCES Statements (Statement_ID) )']"
6211,roller_coaster,SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common status of roller coasters.,"['SELECT' 'Status' 'FROM' 'roller_coaster' 'GROUP' 'BY' 'Status' 'ORDER'
 'BY' 'COUNT' '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 'status' 'from' 'roller_coaster' 'group' 'by' 'status' 'order'
 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Please' 'show' 'the' 'most' 'common' 'status' 'of' 'roller' 'coasters'
 '.']","['CREATE TABLE ""roller_coaster"" ( ""Roller_Coaster_ID"" int, ""Name"" text, ""Park"" text, ""Country_ID"" int, ""Length"" real, ""Height"" real, ""Speed"" text, ""Opened"" text, ""Status"" text, PRIMARY KEY (""Roller_Coaster_ID""), FOREIGN KEY (""Country_ID"") REFERENCES `country`(""Country_ID"") )', 'CREATE TABLE ""country"" ( ""Country_ID"" int, ""Name"" text, ""Population"" int, ""Area"" int, ""Languages"" text, PRIMARY KEY (""Country_ID"") )']"
5621,swimming,"SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'","Find the name and capacity of the stadium where the event named ""World Junior"" happened.","['SELECT' 't1.name' ',' 't1.capacity' 'FROM' 'stadium' 'AS' 't1' 'JOIN'
 'event' 'AS' 't2' 'ON' 't1.id' '=' 't2.stadium_id' 'WHERE' 't2.name' '='
 ""'World"" 'Junior' ""'""]","['select' 't1' '.' 'name' ',' 't1' '.' 'capacity' 'from' 'stadium' 'as'
 't1' 'join' 'event' 'as' 't2' 'on' 't1' '.' 'id' '=' 't2' '.'
 'stadium_id' 'where' 't2' '.' 'name' '=' 'value']","['Find' 'the' 'name' 'and' 'capacity' 'of' 'the' 'stadium' 'where' 'the'
 'event' 'named' '``' 'World' 'Junior' ""''"" 'happened' '.']","['CREATE TABLE ""swimmer"" ( ""ID"" int, ""name"" text, ""Nationality"" text, ""meter_100"" real, ""meter_200"" text, ""meter_300"" text, ""meter_400"" text, ""meter_500"" text, ""meter_600"" text, ""meter_700"" text, ""Time"" text, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""stadium"" ( ""ID"" int, ""name"" text, ""Capacity"" int, ""City"" text, ""Country"" text, ""Opening_year"" int, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""event"" ( ""ID"" int, ""Name"" text, ""Stadium_ID"" int, ""Year"" text, PRIMARY KEY (""ID""), FOREIGN KEY (`Stadium_ID`) REFERENCES `stadium`(`ID`) )', 'CREATE TABLE ""record"" ( ""ID"" int, ""Result"" text, ""Swimmer_ID"" int, ""Event_ID"" int, PRIMARY KEY (""Swimmer_ID"",""Event_ID""), FOREIGN KEY (`Event_ID`) REFERENCES `event`(`ID`), FOREIGN KEY (`Swimmer_ID`) REFERENCES `swimmer`(`ID`) )']"
517,allergy_1,"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",Show all allergy type with number of students affected.,"['SELECT' 'T2.allergytype' ',' 'count' '(' '*' ')' 'FROM' 'Has_allergy'
 'AS' 'T1' 'JOIN' 'Allergy_type' 'AS' 'T2' 'ON' 'T1.allergy' '='
 'T2.allergy' 'GROUP' 'BY' 'T2.allergytype']","['select' 't2' '.' 'allergytype' ',' 'count' '(' '*' ')' 'from'
 'has_allergy' 'as' 't1' 'join' 'allergy_type' 'as' 't2' 'on' 't1' '.'
 'allergy' '=' 't2' '.' 'allergy' 'group' 'by' 't2' '.' 'allergytype']","['Show' 'all' 'allergy' 'type' 'with' 'number' 'of' 'students' 'affected'
 '.']","['CREATE TABLE Allergy_Type ( Allergy VARCHAR(20) PRIMARY KEY, AllergyType VARCHAR(20) )', 'CREATE TABLE Has_Allergy ( StuID INTEGER, Allergy VARCHAR(20), FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(Allergy) REFERENCES Allergy_Type(Allergy) )', 'CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )']"
3435,hr_1,SELECT * FROM employees WHERE hire_date  <  '2002-06-21',display all the details from Employees table for those employees who was hired before 2002-06-21.,"['SELECT' '*' 'FROM' 'employees' 'WHERE' 'hire_date' '<' ""'2002-06-21"" ""'""]",['select' '*' 'from' 'employees' 'where' 'hire_date' '<' 'value'],"['display' 'all' 'the' 'details' 'from' 'Employees' 'table' 'for' 'those'
 'employees' 'who' 'was' 'hired' 'before' '2002-06-21' '.']","['CREATE TABLE `regions` ( `REGION_ID` decimal(5,0) NOT NULL, `REGION_NAME` varchar(25) DEFAULT NULL, PRIMARY KEY (`REGION_ID`) )', 'CREATE TABLE `countries` ( `COUNTRY_ID` varchar(2) NOT NULL, `COUNTRY_NAME` varchar(40) DEFAULT NULL, `REGION_ID` decimal(10,0) DEFAULT NULL, PRIMARY KEY (`COUNTRY_ID`), FOREIGN KEY (`REGION_ID`) REFERENCES regions (`REGION_ID`) )', ""CREATE TABLE `departments` ( `DEPARTMENT_ID` decimal(4,0) NOT NULL DEFAULT '0', `DEPARTMENT_NAME` varchar(30) NOT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `LOCATION_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`DEPARTMENT_ID`) )"", ""CREATE TABLE `jobs` ( `JOB_ID` varchar(10) NOT NULL DEFAULT '', `JOB_TITLE` varchar(35) NOT NULL, `MIN_SALARY` decimal(6,0) DEFAULT NULL, `MAX_SALARY` decimal(6,0) DEFAULT NULL, PRIMARY KEY (`JOB_ID`) )"", ""CREATE TABLE `employees` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL DEFAULT '0', `FIRST_NAME` varchar(20) DEFAULT NULL, `LAST_NAME` varchar(25) NOT NULL, `EMAIL` varchar(25) NOT NULL, `PHONE_NUMBER` varchar(20) DEFAULT NULL, `HIRE_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `SALARY` decimal(8,2) DEFAULT NULL, `COMMISSION_PCT` decimal(2,2) DEFAULT NULL, `MANAGER_ID` decimal(6,0) DEFAULT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )"", 'CREATE TABLE `job_history` ( `EMPLOYEE_ID` decimal(6,0) NOT NULL, `START_DATE` date NOT NULL, `END_DATE` date NOT NULL, `JOB_ID` varchar(10) NOT NULL, `DEPARTMENT_ID` decimal(4,0) DEFAULT NULL, PRIMARY KEY (`EMPLOYEE_ID`,`START_DATE`), FOREIGN KEY (`EMPLOYEE_ID`) REFERENCES employees(`EMPLOYEE_ID`), FOREIGN KEY (`DEPARTMENT_ID`) REFERENCES departments(`DEPARTMENT_ID`), FOREIGN KEY (`JOB_ID`) REFERENCES jobs(`JOB_ID`) )', ""CREATE TABLE `locations` ( `LOCATION_ID` decimal(4,0) NOT NULL DEFAULT '0', `STREET_ADDRESS` varchar(40) DEFAULT NULL, `POSTAL_CODE` varchar(12) DEFAULT NULL, `CITY` varchar(30) NOT NULL, `STATE_PROVINCE` varchar(25) DEFAULT NULL, `COUNTRY_ID` varchar(2) DEFAULT NULL, PRIMARY KEY (`LOCATION_ID`), FOREIGN KEY (`COUNTRY_ID`) REFERENCES countries(`COUNTRY_ID`) )""]"
1819,small_bank_1,"SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC","What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?","['SELECT' 'T2.balance' ',' 'T3.balance' ',' 'T1.name' 'FROM' 'accounts'
 'AS' 'T1' 'JOIN' 'checking' 'AS' 'T2' 'ON' 'T1.custid' '=' 'T2.custid'
 'JOIN' 'savings' 'AS' 'T3' 'ON' 'T1.custid' '=' 'T3.custid' 'ORDER' 'BY'
 'T2.balance' '+' 'T3.balance' 'DESC']","['select' 't2' '.' 'balance' ',' 't3' '.' 'balance' ',' 't1' '.' 'name'
 'from' 'accounts' 'as' 't1' 'join' 'checking' 'as' 't2' 'on' 't1' '.'
 'custid' '=' 't2' '.' 'custid' 'join' 'savings' 'as' 't3' 'on' 't1' '.'
 'custid' '=' 't3' '.' 'custid' 'order' 'by' 't2' '.' 'balance' '+' 't3'
 '.' 'balance' 'desc']","['What' 'are' 'the' 'names' ',' 'checking' 'balances' ',' 'and' 'savings'
 'balances' 'of' 'customers' ',' 'ordered' 'by' 'the' 'total' 'of'
 'checking' 'and' 'savings' 'balances' 'descending' '?']","['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
5617,swimming,"SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",List countries that have more than one swimmer.,"['SELECT' 'nationality' ',' 'count' '(' '*' ')' 'FROM' 'swimmer' 'GROUP'
 'BY' 'nationality' 'HAVING' 'count' '(' '*' ')' '>' '1']","['select' 'nationality' ',' 'count' '(' '*' ')' 'from' 'swimmer' 'group'
 'by' 'nationality' 'having' 'count' '(' '*' ')' '>' 'value']",['List' 'countries' 'that' 'have' 'more' 'than' 'one' 'swimmer' '.'],"['CREATE TABLE ""swimmer"" ( ""ID"" int, ""name"" text, ""Nationality"" text, ""meter_100"" real, ""meter_200"" text, ""meter_300"" text, ""meter_400"" text, ""meter_500"" text, ""meter_600"" text, ""meter_700"" text, ""Time"" text, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""stadium"" ( ""ID"" int, ""name"" text, ""Capacity"" int, ""City"" text, ""Country"" text, ""Opening_year"" int, PRIMARY KEY (""ID"") )', 'CREATE TABLE ""event"" ( ""ID"" int, ""Name"" text, ""Stadium_ID"" int, ""Year"" text, PRIMARY KEY (""ID""), FOREIGN KEY (`Stadium_ID`) REFERENCES `stadium`(`ID`) )', 'CREATE TABLE ""record"" ( ""ID"" int, ""Result"" text, ""Swimmer_ID"" int, ""Event_ID"" int, PRIMARY KEY (""Swimmer_ID"",""Event_ID""), FOREIGN KEY (`Event_ID`) REFERENCES `event`(`ID`), FOREIGN KEY (`Swimmer_ID`) REFERENCES `swimmer`(`ID`) )']"
5367,tracking_software_problems,"SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",Which product has the most problems? Give me the number of problems and the product name.,"['SELECT' 'count' '(' '*' ')' ',' 'T1.product_name' 'FROM' 'product' 'AS'
 'T1' 'JOIN' 'problems' 'AS' 'T2' 'ON' 'T1.product_id' '=' 'T2.product_id'
 'GROUP' 'BY' 'T1.product_name' 'ORDER' 'BY' 'count' '(' '*' ')' 'DESC'
 'LIMIT' '1']","['select' 'count' '(' '*' ')' ',' 't1' '.' 'product_name' 'from' 'product'
 'as' 't1' 'join' 'problems' 'as' 't2' 'on' 't1' '.' 'product_id' '=' 't2'
 '.' 'product_id' 'group' 'by' 't1' '.' 'product_name' 'order' 'by'
 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Which' 'product' 'has' 'the' 'most' 'problems' '?' 'Give' 'me' 'the'
 'number' 'of' 'problems' 'and' 'the' 'product' 'name' '.']","['CREATE TABLE `Problem_Category_Codes` ( `problem_category_code` VARCHAR(20) PRIMARY KEY, `problem_category_description` VARCHAR(80) )', 'CREATE TABLE `Problem_Log` ( `problem_log_id` INTEGER PRIMARY KEY, `assigned_to_staff_id` INTEGER NOT NULL, `problem_id` INTEGER NOT NULL, `problem_category_code` VARCHAR(20) NOT NULL, `problem_status_code` VARCHAR(20) NOT NULL, `log_entry_date` DATETIME, `log_entry_description` VARCHAR(255), `log_entry_fix` VARCHAR(255), `other_log_details` VARCHAR(255), FOREIGN KEY (`problem_category_code` ) REFERENCES `Problem_Category_Codes`(`problem_category_code` ),FOREIGN KEY (`assigned_to_staff_id` ) REFERENCES `Staff`(`staff_id` ),FOREIGN KEY (`problem_id` ) REFERENCES `Problems`(`problem_id` ),FOREIGN KEY (`problem_status_code` ) REFERENCES `Problem_Status_Codes`(`problem_status_code` ) )', 'CREATE TABLE `Problem_Status_Codes` ( `problem_status_code` VARCHAR(20) PRIMARY KEY, `problem_status_description` VARCHAR(80) )', 'CREATE TABLE `Product` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(80), `product_details` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_first_name` VARCHAR(80), `staff_last_name` VARCHAR(80), `other_staff_details` VARCHAR(255) )', 'CREATE TABLE `Problems` ( `problem_id` INTEGER PRIMARY KEY, `product_id` INTEGER NOT NULL, `closure_authorised_by_staff_id` INTEGER NOT NULL, `reported_by_staff_id` INTEGER NOT NULL, `date_problem_reported` DATETIME NOT NULL, `date_problem_closed` DATETIME, `problem_description` VARCHAR(255), `other_problem_details` VARCHAR(255), FOREIGN KEY (`closure_authorised_by_staff_id` ) REFERENCES `Staff`(`staff_id` ), FOREIGN KEY (`product_id` ) REFERENCES `Product`(`product_id` ), FOREIGN KEY (`reported_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) )']"
2844,customer_deliveries,SELECT count(*) FROM customers,Find the number of customers in total.,['SELECT' 'count' '(' '*' ')' 'FROM' 'customers'],['select' 'count' '(' '*' ')' 'from' 'customers'],['Find' 'the' 'number' 'of' 'customers' 'in' 'total' '.'],"['CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `product_name` VARCHAR(20), `product_price` DECIMAL(19,4), `product_description` VARCHAR(255) )', 'CREATE TABLE `Addresses` ( `address_id` INTEGER PRIMARY KEY, `address_details` VARCHAR(80), `city` VARCHAR(50), `zip_postcode` VARCHAR(20), `state_province_county` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `payment_method` VARCHAR(10) NOT NULL, `customer_name` VARCHAR(80), `customer_phone` VARCHAR(80), `customer_email` VARCHAR(80), `date_became_customer` DATETIME )', 'CREATE TABLE `Regular_Orders` ( `regular_order_id` INTEGER PRIMARY KEY, `distributer_id` INTEGER NOT NULL, FOREIGN KEY (`distributer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Regular_Order_Products` ( `regular_order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`regular_order_id` ) REFERENCES `Regular_Orders`(`regular_order_id` ) )', 'CREATE TABLE `Actual_Orders` ( `actual_order_id` INTEGER PRIMARY KEY, `order_status_code` VARCHAR(10) NOT NULL, `regular_order_id` INTEGER NOT NULL, `actual_order_date` DATETIME, FOREIGN KEY (`regular_order_id` ) REFERENCES `Regular_Orders`(`regular_order_id` ) )', 'CREATE TABLE `Actual_Order_Products` ( `actual_order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`actual_order_id` ) REFERENCES `Actual_Orders`(`actual_order_id` ) )', 'CREATE TABLE `Customer_Addresses` ( `customer_id` INTEGER NOT NULL, `address_id` INTEGER NOT NULL, `date_from` DATETIME NOT NULL, `address_type` VARCHAR(10) NOT NULL, `date_to` DATETIME, FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ), FOREIGN KEY (`address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Delivery_Routes` ( `route_id` INTEGER PRIMARY KEY, `route_name` VARCHAR(50), `other_route_details` VARCHAR(255) )', 'CREATE TABLE `Delivery_Route_Locations` ( `location_code` VARCHAR(10) PRIMARY KEY, `route_id` INTEGER NOT NULL, `location_address_id` INTEGER NOT NULL, `location_name` VARCHAR(50), FOREIGN KEY (`location_address_id` ) REFERENCES `Addresses`(`address_id` ), FOREIGN KEY (`route_id` ) REFERENCES `Delivery_Routes`(`route_id` ) )', 'CREATE TABLE `Trucks` ( `truck_id` INTEGER PRIMARY KEY, `truck_licence_number` VARCHAR(20), `truck_details` VARCHAR(255) )', 'CREATE TABLE `Employees` ( `employee_id` INTEGER PRIMARY KEY, `employee_address_id` INTEGER NOT NULL, `employee_name` VARCHAR(80), `employee_phone` VARCHAR(80), FOREIGN KEY (`employee_address_id` ) REFERENCES `Addresses`(`address_id` ) )', 'CREATE TABLE `Order_Deliveries` ( `location_code` VARCHAR(10) NOT NULL, `actual_order_id` INTEGER NOT NULL, `delivery_status_code` VARCHAR(10) NOT NULL, `driver_employee_id` INTEGER NOT NULL, `truck_id` INTEGER NOT NULL, `delivery_date` DATETIME, FOREIGN KEY (`truck_id` ) REFERENCES `Trucks`(`truck_id` ), FOREIGN KEY (`actual_order_id` ) REFERENCES `Actual_Orders`(`actual_order_id` ), FOREIGN KEY (`location_code` ) REFERENCES `Delivery_Route_Locations`(`location_code` ), FOREIGN KEY (`driver_employee_id` ) REFERENCES `Employees`(`employee_id` ) )']"
1244,apartment_rentals,SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2,Show the addresses of the buildings that have apartments with more than 2 bathrooms.,"['SELECT' 'T1.building_address' 'FROM' 'Apartment_Buildings' 'AS' 'T1'
 'JOIN' 'Apartments' 'AS' 'T2' 'ON' 'T1.building_id' '=' 'T2.building_id'
 'WHERE' 'T2.bathroom_count' '>' '2']","['select' 't1' '.' 'building_address' 'from' 'apartment_buildings' 'as'
 't1' 'join' 'apartments' 'as' 't2' 'on' 't1' '.' 'building_id' '=' 't2'
 '.' 'building_id' 'where' 't2' '.' 'bathroom_count' '>' 'value']","['Show' 'the' 'addresses' 'of' 'the' 'buildings' 'that' 'have'
 'apartments' 'with' 'more' 'than' '2' 'bathrooms' '.']","['CREATE TABLE Apartment_Buildings ( building_id INTEGER NOT NULL, building_short_name CHAR(15), building_full_name VARCHAR(80), building_description VARCHAR(255), building_address VARCHAR(255), building_manager VARCHAR(50), building_phone VARCHAR(80), PRIMARY KEY (building_id), UNIQUE (building_id) )', 'CREATE TABLE Apartments ( apt_id INTEGER NOT NULL , building_id INTEGER NOT NULL, apt_type_code CHAR(15), apt_number CHAR(10), bathroom_count INTEGER, bedroom_count INTEGER, room_count CHAR(5), PRIMARY KEY (apt_id), UNIQUE (apt_id), FOREIGN KEY (building_id) REFERENCES Apartment_Buildings (building_id) )', 'CREATE TABLE Apartment_Facilities ( apt_id INTEGER NOT NULL, facility_code CHAR(15) NOT NULL, PRIMARY KEY (apt_id, facility_code), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id) )', 'CREATE TABLE Guests ( guest_id INTEGER NOT NULL , gender_code CHAR(1), guest_first_name VARCHAR(80), guest_last_name VARCHAR(80), date_of_birth DATETIME, PRIMARY KEY (guest_id), UNIQUE (guest_id) )', 'CREATE TABLE Apartment_Bookings ( apt_booking_id INTEGER NOT NULL, apt_id INTEGER, guest_id INTEGER NOT NULL, booking_status_code CHAR(15) NOT NULL, booking_start_date DATETIME, booking_end_date DATETIME, PRIMARY KEY (apt_booking_id), UNIQUE (apt_booking_id), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (guest_id) REFERENCES Guests (guest_id) )', 'CREATE TABLE View_Unit_Status ( apt_id INTEGER, apt_booking_id INTEGER, status_date DATETIME NOT NULL, available_yn BIT, PRIMARY KEY (status_date), FOREIGN KEY (apt_id) REFERENCES Apartments (apt_id), FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id) )']"
2651,local_govt_mdm,"SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'","What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","['SELECT' 'T1.council_tax_id' 'FROM' 'Rent_Arrears' 'AS' 'T1' 'JOIN'
 'CMI_Cross_References' 'AS' 'T2' 'ON' 'T1.cmi_cross_ref_id' '='
 'T2.cmi_cross_ref_id' 'JOIN' 'Customer_Master_Index' 'AS' 'T3' 'ON'
 'T3.master_customer_id' '=' 'T2.master_customer_id' 'WHERE'
 'T3.cmi_details' '!' '=' ""'Schmidt"" ',' 'Kertzmann' 'and' 'Lubowitz' ""'""]","['select' 't1' '.' 'council_tax_id' 'from' 'rent_arrears' 'as' 't1' 'join'
 'cmi_cross_references' 'as' 't2' 'on' 't1' '.' 'cmi_cross_ref_id' '='
 't2' '.' 'cmi_cross_ref_id' 'join' 'customer_master_index' 'as' 't3' 'on'
 't3' '.' 'master_customer_id' '=' 't2' '.' 'master_customer_id' 'where'
 't3' '.' 'cmi_details' '!' '=' 'value']","['What' 'are' 'the' 'renting' 'arrears' 'tax' 'ids' 'related' 'to' 'the'
 'customer' 'master' 'index' 'whose' 'detail' 'is' 'not' ""'Schmidt"" ','
 'Kertzmann' 'and' 'Lubowitz' ""'"" '?']","['CREATE TABLE Customer_Master_Index ( master_customer_id INTEGER NOT NULL, cmi_details VARCHAR(255), PRIMARY KEY (master_customer_id) )', 'CREATE TABLE CMI_Cross_References ( cmi_cross_ref_id INTEGER NOT NULL, master_customer_id INTEGER NOT NULL, source_system_code CHAR(15) NOT NULL, PRIMARY KEY (cmi_cross_ref_id), FOREIGN KEY (master_customer_id) REFERENCES Customer_Master_Index (master_customer_id) )', 'CREATE TABLE Council_Tax ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Business_Rates ( business_rates_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (business_rates_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Benefits_Overpayments ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Parking_Fines ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Rent_Arrears ( council_tax_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (council_tax_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )', 'CREATE TABLE Electoral_Register ( electoral_register_id INTEGER NOT NULL, cmi_cross_ref_id INTEGER NOT NULL, PRIMARY KEY (electoral_register_id), FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id) )']"
1642,wedding,SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015,Show all church names except for those that had a wedding in year 2015.,"['SELECT' 'name' 'FROM' 'church' 'EXCEPT' 'SELECT' 'T1.name' 'FROM'
 'church' 'AS' 'T1' 'JOIN' 'wedding' 'AS' 'T2' 'ON' 'T1.church_id' '='
 'T2.church_id' 'WHERE' 'T2.year' '=' '2015']","['select' 'name' 'from' 'church' 'except' 'select' 't1' '.' 'name' 'from'
 'church' 'as' 't1' 'join' 'wedding' 'as' 't2' 'on' 't1' '.' 'church_id'
 '=' 't2' '.' 'church_id' 'where' 't2' '.' 'year' '=' 'value']","['Show' 'all' 'church' 'names' 'except' 'for' 'those' 'that' 'had' 'a'
 'wedding' 'in' 'year' '2015' '.']","['CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Country"" text, ""Is_Male"" text, ""Age"" int, PRIMARY KEY (""People_ID"") )', 'CREATE TABLE ""church"" ( ""Church_ID"" int, ""Name"" text, ""Organized_by"" text, ""Open_Date"" int, ""Continuation_of"" text, PRIMARY KEY (""Church_ID"") )', 'CREATE TABLE ""wedding"" ( ""Church_ID"" int, ""Male_ID"" int, ""Female_ID"" int, ""Year"" int, PRIMARY KEY (""Church_ID"",""Male_ID"",""Female_ID""), FOREIGN KEY (""Church_ID"") REFERENCES `church`(""Church_ID""), FOREIGN KEY (""Male_ID"") REFERENCES `people`(""People_ID""), FOREIGN KEY (""Female_ID"") REFERENCES `people`(""People_ID"") )']"
3143,assets_maintenance,"SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",Which part fault requires the most number of skills to fix? List part id and name.,"['SELECT' 'T1.part_id' ',' 'T1.part_name' 'FROM' 'Parts' 'AS' 'T1' 'JOIN'
 'Part_Faults' 'AS' 'T2' 'ON' 'T1.part_id' '=' 'T2.part_id' 'JOIN'
 'Skills_Required_To_Fix' 'AS' 'T3' 'ON' 'T2.part_fault_id' '='
 'T3.part_fault_id' 'GROUP' 'BY' 'T1.part_id' 'ORDER' 'BY' 'count' '(' '*'
 ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'part_id' ',' 't1' '.' 'part_name' 'from' 'parts' 'as'
 't1' 'join' 'part_faults' 'as' 't2' 'on' 't1' '.' 'part_id' '=' 't2' '.'
 'part_id' 'join' 'skills_required_to_fix' 'as' 't3' 'on' 't2' '.'
 'part_fault_id' '=' 't3' '.' 'part_fault_id' 'group' 'by' 't1' '.'
 'part_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Which' 'part' 'fault' 'requires' 'the' 'most' 'number' 'of' 'skills'
 'to' 'fix' '?' 'List' 'part' 'id' 'and' 'name' '.']","['CREATE TABLE `Third_Party_Companies` ( `company_id` INTEGER PRIMARY KEY , `company_type` VARCHAR(5) NOT NULL, `company_name` VARCHAR(255), `company_address` VARCHAR(255), `other_company_details` VARCHAR(255) )', 'CREATE TABLE `Maintenance_Contracts` ( `maintenance_contract_id` INTEGER PRIMARY KEY, `maintenance_contract_company_id` INTEGER NOT NULL, `contract_start_date` DATETIME, `contract_end_date` DATETIME, `other_contract_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Parts` ( `part_id` INTEGER PRIMARY KEY, `part_name` VARCHAR(255), `chargeable_yn` VARCHAR(1), `chargeable_amount` VARCHAR(20), `other_part_details` VARCHAR(255) )', 'CREATE TABLE `Skills` ( `skill_id` INTEGER PRIMARY KEY, `skill_code` VARCHAR(20), `skill_description` VARCHAR(255) )', 'CREATE TABLE `Staff` ( `staff_id` INTEGER PRIMARY KEY, `staff_name` VARCHAR(255), `gender` VARCHAR(1), `other_staff_details` VARCHAR(255) )', 'CREATE TABLE `Assets` ( `asset_id` INTEGER PRIMARY KEY, `maintenance_contract_id` INTEGER NOT NULL, `supplier_company_id` INTEGER NOT NULL, `asset_details` VARCHAR(255), `asset_make` VARCHAR(20), `asset_model` VARCHAR(20), `asset_acquired_date` DATETIME, `asset_disposed_date` DATETIME, `other_asset_details` VARCHAR(255), FOREIGN KEY (`maintenance_contract_id` ) REFERENCES `Maintenance_Contracts`(`maintenance_contract_id` ), FOREIGN KEY (`supplier_company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Asset_Parts` ( `asset_id` INTEGER NOT NULL, `part_id` INTEGER NOT NULL, FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ) )', 'CREATE TABLE `Maintenance_Engineers` ( `engineer_id` INTEGER PRIMARY KEY, `company_id` INTEGER NOT NULL, `first_name` VARCHAR(50), `last_name` VARCHAR(50), `other_details` VARCHAR(255), FOREIGN KEY (`company_id` ) REFERENCES `Third_Party_Companies`(`company_id` ) )', 'CREATE TABLE `Engineer_Skills` ( `engineer_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) )', 'CREATE TABLE `Fault_Log` ( `fault_log_entry_id` INTEGER PRIMARY KEY, `asset_id` INTEGER NOT NULL, `recorded_by_staff_id` INTEGER NOT NULL, `fault_log_entry_datetime` DATETIME, `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`asset_id` ) REFERENCES `Assets`(`asset_id` ), FOREIGN KEY (`recorded_by_staff_id` ) REFERENCES `Staff`(`staff_id` ) )', 'CREATE TABLE `Engineer_Visits` ( `engineer_visit_id` INTEGER PRIMARY KEY, `contact_staff_id` INTEGER, `engineer_id` INTEGER NOT NULL, `fault_log_entry_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, `visit_start_datetime` DATETIME, `visit_end_datetime` DATETIME, `other_visit_details` VARCHAR(255), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ), FOREIGN KEY (`engineer_id` ) REFERENCES `Maintenance_Engineers`(`engineer_id` ), FOREIGN KEY (`contact_staff_id` ) REFERENCES `Staff`(`staff_id` ) )', 'CREATE TABLE `Part_Faults` ( `part_fault_id` INTEGER PRIMARY KEY, `part_id` INTEGER NOT NULL, `fault_short_name` VARCHAR(20), `fault_description` VARCHAR(255), `other_fault_details` VARCHAR(255), FOREIGN KEY (`part_id` ) REFERENCES `Parts`(`part_id` ) )', 'CREATE TABLE `Fault_Log_Parts` ( `fault_log_entry_id` INTEGER NOT NULL, `part_fault_id` INTEGER NOT NULL, `fault_status` VARCHAR(10) NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`fault_log_entry_id` ) REFERENCES `Fault_Log`(`fault_log_entry_id` ) )', 'CREATE TABLE `Skills_Required_To_Fix` ( `part_fault_id` INTEGER NOT NULL, `skill_id` INTEGER NOT NULL, FOREIGN KEY (`part_fault_id` ) REFERENCES `Part_Faults`(`part_fault_id` ), FOREIGN KEY (`skill_id` ) REFERENCES `Skills`(`skill_id` ) )']"
1879,wrestler,"SELECT Team FROM Elimination WHERE Eliminated_By  =  ""Orton"" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  ""Benjamin""",What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?,"['SELECT' 'Team' 'FROM' 'Elimination' 'WHERE' 'Eliminated_By' '=' '``'
 'Orton' ""''"" 'INTERSECT' 'SELECT' 'Team' 'FROM' 'Elimination' 'WHERE'
 'Eliminated_By' '=' '``' 'Benjamin' ""''""]","['select' 'team' 'from' 'elimination' 'where' 'eliminated_by' '=' 'value'
 'intersect' 'select' 'team' 'from' 'elimination' 'where' 'eliminated_by'
 '=' 'value']","['What' 'are' 'the' 'teams' 'that' 'have' 'both' 'wrestlers' 'eliminated'
 'by' 'Orton' 'and' 'wrestlers' 'eliminated' 'by' 'Benjamin' '?']","['CREATE TABLE ""wrestler"" ( ""Wrestler_ID"" int, ""Name"" text, ""Reign"" text, ""Days_held"" text, ""Location"" text, ""Event"" text, PRIMARY KEY (""Wrestler_ID"") )', 'CREATE TABLE ""Elimination"" ( ""Elimination_ID"" text, ""Wrestler_ID"" text, ""Team"" text, ""Eliminated_By"" text, ""Elimination_Move"" text, ""Time"" text, PRIMARY KEY (""Elimination_ID""), FOREIGN KEY (""Wrestler_ID"") REFERENCES ""wrestler""(""Wrestler_ID"") )']"
1527,insurance_and_eClaims,SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1,What is the name of the claim processing stage that most of the claims are on?,"['SELECT' 't2.claim_status_name' 'FROM' 'claims_processing' 'AS' 't1'
 'JOIN' 'claims_processing_stages' 'AS' 't2' 'ON' 't1.claim_stage_id' '='
 't2.claim_stage_id' 'GROUP' 'BY' 't1.claim_stage_id' 'ORDER' 'BY' 'count'
 '(' '*' ')' 'DESC' 'LIMIT' '1']","['select' 't2' '.' 'claim_status_name' 'from' 'claims_processing' 'as'
 't1' 'join' 'claims_processing_stages' 'as' 't2' 'on' 't1' '.'
 'claim_stage_id' '=' 't2' '.' 'claim_stage_id' 'group' 'by' 't1' '.'
 'claim_stage_id' 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'claim' 'processing' 'stage' 'that'
 'most' 'of' 'the' 'claims' 'are' 'on' '?']","['CREATE TABLE Customers ( Customer_ID INTEGER NOT NULL, Customer_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Customer_ID) )', 'CREATE TABLE Staff ( Staff_ID INTEGER NOT NULL, Staff_Details VARCHAR(255) NOT NULL, PRIMARY KEY (Staff_ID) )', 'CREATE TABLE Policies ( Policy_ID INTEGER NOT NULL, Customer_ID INTEGER NOT NULL, Policy_Type_Code CHAR(15) NOT NULL, Start_Date DATETIME, End_Date DATETIME, PRIMARY KEY (Policy_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID) )', 'CREATE TABLE Claim_Headers ( Claim_Header_ID INTEGER NOT NULL, Claim_Status_Code CHAR(15) NOT NULL, Claim_Type_Code CHAR(15) NOT NULL, Policy_ID INTEGER NOT NULL, Date_of_Claim DATETIME, Date_of_Settlement DATETIME, Amount_Claimed DECIMAL(20,4), Amount_Piad DECIMAL(20,4), PRIMARY KEY (Claim_Header_ID), FOREIGN KEY (Policy_ID) REFERENCES Policies (Policy_ID) )', 'CREATE TABLE Claims_Documents ( Claim_ID INTEGER NOT NULL, Document_Type_Code CHAR(15) NOT NULL, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID, Document_Type_Code), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff (Staff_ID) )', 'CREATE TABLE Claims_Processing_Stages ( Claim_Stage_ID INTEGER NOT NULL, Next_Claim_Stage_ID INTEGER, Claim_Status_Name VARCHAR(255) NOT NULL, Claim_Status_Description VARCHAR(255) NOT NULL, PRIMARY KEY (Claim_Stage_ID) )', 'CREATE TABLE Claims_Processing ( Claim_Processing_ID INTEGER NOT NULL, Claim_ID INTEGER NOT NULL, Claim_Outcome_Code CHAR(15) NOT NULL, Claim_Stage_ID INTEGER NOT NULL, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID), FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID), FOREIGN KEY (Staff_ID) REFERENCES Staff (Staff_ID) )']"
5171,cre_Drama_Workshop_Groups,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film',Give me the description of the service type that offers not only the photo product but also the film product.,"['SELECT' 'T1.Service_Type_Description' 'FROM' 'Ref_Service_Types' 'AS'
 'T1' 'JOIN' 'Services' 'AS' 'T2' 'ON' 'T1.Service_Type_Code' '='
 'T2.Service_Type_Code' 'WHERE' 'T2.Product_Name' '=' ""'photo"" ""'""
 'INTERSECT' 'SELECT' 'T1.Service_Type_Description' 'FROM'
 'Ref_Service_Types' 'AS' 'T1' 'JOIN' 'Services' 'AS' 'T2' 'ON'
 'T1.Service_Type_Code' '=' 'T2.Service_Type_Code' 'WHERE'
 'T2.Product_Name' '=' ""'film"" ""'""]","['select' 't1' '.' 'service_type_description' 'from' 'ref_service_types'
 'as' 't1' 'join' 'services' 'as' 't2' 'on' 't1' '.' 'service_type_code'
 '=' 't2' '.' 'service_type_code' 'where' 't2' '.' 'product_name' '='
 'value' 'intersect' 'select' 't1' '.' 'service_type_description' 'from'
 'ref_service_types' 'as' 't1' 'join' 'services' 'as' 't2' 'on' 't1' '.'
 'service_type_code' '=' 't2' '.' 'service_type_code' 'where' 't2' '.'
 'product_name' '=' 'value']","['Give' 'me' 'the' 'description' 'of' 'the' 'service' 'type' 'that'
 'offers' 'not' 'only' 'the' 'photo' 'product' 'but' 'also' 'the' 'film'
 'product' '.']","['CREATE TABLE Ref_Payment_Methods ( payment_method_code CHAR(10) NOT NULL, payment_method_description VARCHAR(80), PRIMARY KEY (payment_method_code), UNIQUE (payment_method_code) )', 'CREATE TABLE Ref_Service_Types ( Service_Type_Code CHAR(15) NOT NULL, Parent_Service_Type_Code CHAR(15), Service_Type_Description VARCHAR(255), PRIMARY KEY (Service_Type_Code), UNIQUE (Service_Type_Code) )', 'CREATE TABLE Addresses ( Address_ID VARCHAR(100) NOT NULL, Line_1 VARCHAR(255), Line_2 VARCHAR(255), City_Town VARCHAR(255), State_County VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Address_ID), UNIQUE (Address_ID) )', 'CREATE TABLE Products ( Product_ID VARCHAR(100) NOT NULL, Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Product_Description VARCHAR(255), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Product_ID), UNIQUE (Product_ID) )', 'CREATE TABLE Marketing_Regions ( Marketing_Region_Code CHAR(15) NOT NULL, Marketing_Region_Name VARCHAR(255) NOT NULL, Marketing_Region_Descriptrion VARCHAR(255) NOT NULL, Other_Details VARCHAR(255), PRIMARY KEY (Marketing_Region_Code), UNIQUE (Marketing_Region_Code) )', 'CREATE TABLE Clients ( Client_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Email_Address VARCHAR(255), Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Client_ID), UNIQUE (Client_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Drama_Workshop_Groups ( Workshop_Group_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Currency_Code CHAR(15) NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Workshop_Group_ID), UNIQUE (Workshop_Group_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Performers ( Performer_ID INTEGER NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Performer_ID), UNIQUE (Performer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Customers ( Customer_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Customer_Name VARCHAR(255), Customer_Phone VARCHAR(255), Customer_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Customer_ID), UNIQUE (Customer_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID) )', 'CREATE TABLE Stores ( Store_ID VARCHAR(100) NOT NULL, Address_ID INTEGER NOT NULL, Marketing_Region_Code CHAR(15) NOT NULL, Store_Name VARCHAR(255), Store_Phone VARCHAR(255), Store_Email_Address VARCHAR(255), Other_Details VARCHAR(255), PRIMARY KEY (Store_ID), UNIQUE (Store_ID), FOREIGN KEY (Address_ID) REFERENCES Addresses (Address_ID), FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code) )', 'CREATE TABLE Bookings ( Booking_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Workshop_Group_ID VARCHAR(100) NOT NULL, Status_Code CHAR(15) NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Booking_ID), UNIQUE (Booking_ID), FOREIGN KEY (Customer_ID) REFERENCES Clients (Client_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID) )', 'CREATE TABLE Performers_in_Bookings ( Order_ID INTEGER NOT NULL, Performer_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Performer_ID), FOREIGN KEY (Performer_ID) REFERENCES Performers (Performer_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID) )', 'CREATE TABLE Customer_Orders ( Order_ID INTEGER NOT NULL , Customer_ID INTEGER NOT NULL, Store_ID INTEGER NOT NULL, Order_Date DATETIME NOT NULL, Planned_Delivery_Date DATETIME NOT NULL, Actual_Delivery_Date DATETIME NOT NULL, Other_Order_Details VARCHAR(255), PRIMARY KEY (Order_ID), UNIQUE (Order_ID), FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY (Store_ID) REFERENCES Stores (Store_ID) )', 'CREATE TABLE Order_Items ( Order_Item_ID INTEGER NOT NULL , Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), PRIMARY KEY (Order_Item_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Product_ID) REFERENCES Products (Product_ID) )', 'CREATE TABLE Invoices ( Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, payment_method_code CHAR(15), Product_ID INTEGER NOT NULL, Order_Quantity VARCHAR(288), Other_Item_Details VARCHAR(255), Order_Item_ID INTEGER NOT NULL, PRIMARY KEY (Invoice_ID), FOREIGN KEY (Order_ID) REFERENCES Customer_Orders (Order_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code) )', 'CREATE TABLE Services ( Service_ID INTEGER NOT NULL, Service_Type_Code CHAR(15), Workshop_Group_ID INTEGER NOT NULL, Product_Description VARCHAR(255), Product_Name VARCHAR(255), Product_Price DECIMAL(20,4), Other_Product_Service_Details VARCHAR(255), PRIMARY KEY (Service_ID), UNIQUE (Service_ID), FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID), FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code) )', 'CREATE TABLE Bookings_Services ( Order_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, PRIMARY KEY (Order_ID, Product_ID), FOREIGN KEY (Order_ID) REFERENCES Bookings (Booking_ID), FOREIGN KEY (Product_ID) REFERENCES Services (Service_ID) )', 'CREATE TABLE Invoice_Items ( Invoice_Item_ID INTEGER NOT NULL , Invoice_ID INTEGER NOT NULL, Order_ID INTEGER NOT NULL, Order_Item_ID INTEGER NOT NULL, Product_ID INTEGER NOT NULL, Order_Quantity INTEGER, Other_Item_Details VARCHAR(255), PRIMARY KEY (Invoice_Item_ID), FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items (Order_Item_ID), FOREIGN KEY (Invoice_ID) REFERENCES Invoices (Invoice_ID), FOREIGN KEY (Order_ID, Product_ID) REFERENCES Bookings_Services (Order_ID,Product_ID) )']"
2467,movie_1,"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",What is highest rating for the most recent movie and when was it released?,"['SELECT' 'max' '(' 'T1.stars' ')' ',' 'T2.year' 'FROM' 'Rating' 'AS' 'T1'
 'JOIN' 'Movie' 'AS' 'T2' 'ON' 'T1.mID' '=' 'T2.mID' 'WHERE' 'T2.year' '='
 '(' 'SELECT' 'max' '(' 'YEAR' ')' 'FROM' 'Movie' ')']","['select' 'max' '(' 't1' '.' 'stars' ')' ',' 't2' '.' 'year' 'from'
 'rating' 'as' 't1' 'join' 'movie' 'as' 't2' 'on' 't1' '.' 'mid' '=' 't2'
 '.' 'mid' 'where' 't2' '.' 'year' '=' '(' 'select' 'max' '(' 'year' ')'
 'from' 'movie' ')']","['What' 'is' 'highest' 'rating' 'for' 'the' 'most' 'recent' 'movie' 'and'
 'when' 'was' 'it' 'released' '?']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
2246,machine_repair,"SELECT Team ,  COUNT(*) FROM technician GROUP BY Team","For each team, how many technicians are there?","['SELECT' 'Team' ',' 'COUNT' '(' '*' ')' 'FROM' 'technician' 'GROUP' 'BY'
 'Team']","['select' 'team' ',' 'count' '(' '*' ')' 'from' 'technician' 'group' 'by'
 'team']","['For' 'each' 'team' ',' 'how' 'many' 'technicians' 'are' 'there' '?']","['CREATE TABLE ""repair"" ( ""repair_ID"" int, ""name"" text, ""Launch_Date"" text, ""Notes"" text, PRIMARY KEY (""repair_ID"") )', 'CREATE TABLE ""machine"" ( ""Machine_ID"" int, ""Making_Year"" int, ""Class"" text, ""Team"" text, ""Machine_series"" text, ""value_points"" real, ""quality_rank"" int, PRIMARY KEY (""Machine_ID"") )', 'CREATE TABLE ""technician"" ( ""technician_id"" real, ""Name"" text, ""Team"" text, ""Starting_Year"" real, ""Age"" int, PRIMARY Key (""technician_id"") )', 'CREATE TABLE ""repair_assignment"" ( ""technician_id"" int, ""repair_ID"" int, ""Machine_ID"" int, PRIMARY Key (""technician_id"",""repair_ID"",""Machine_ID""), FOREIGN KEY (`technician_id`) REFERENCES `technician`(`technician_id`), FOREIGN KEY (`repair_ID`) REFERENCES `repair`(`repair_ID`), FOREIGN KEY (`Machine_ID`) REFERENCES `machine`(`Machine_ID`) )']"
6000,game_1,SELECT count(DISTINCT sportname) FROM Sportsinfo,How many different types of sports do we offer?,['SELECT' 'count' '(' 'DISTINCT' 'sportname' ')' 'FROM' 'Sportsinfo'],['select' 'count' '(' 'distinct' 'sportname' ')' 'from' 'sportsinfo'],['How' 'many' 'different' 'types' 'of' 'sports' 'do' 'we' 'offer' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
1636,wedding,SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30,How many female people are older than 30 in our record?,"['SELECT' 'count' '(' '*' ')' 'FROM' 'people' 'WHERE' 'is_male' '=' ""'F""
 ""'"" 'AND' 'age' '>' '30']","['select' 'count' '(' '*' ')' 'from' 'people' 'where' 'is_male' '='
 'value' 'and' 'age' '>' 'value']","['How' 'many' 'female' 'people' 'are' 'older' 'than' '30' 'in' 'our'
 'record' '?']","['CREATE TABLE ""people"" ( ""People_ID"" int, ""Name"" text, ""Country"" text, ""Is_Male"" text, ""Age"" int, PRIMARY KEY (""People_ID"") )', 'CREATE TABLE ""church"" ( ""Church_ID"" int, ""Name"" text, ""Organized_by"" text, ""Open_Date"" int, ""Continuation_of"" text, PRIMARY KEY (""Church_ID"") )', 'CREATE TABLE ""wedding"" ( ""Church_ID"" int, ""Male_ID"" int, ""Female_ID"" int, ""Year"" int, PRIMARY KEY (""Church_ID"",""Male_ID"",""Female_ID""), FOREIGN KEY (""Church_ID"") REFERENCES `church`(""Church_ID""), FOREIGN KEY (""Male_ID"") REFERENCES `people`(""People_ID""), FOREIGN KEY (""Female_ID"") REFERENCES `people`(""People_ID"") )']"
5999,game_1,SELECT count(DISTINCT sportname) FROM Sportsinfo,How many sports do we have?,['SELECT' 'count' '(' 'DISTINCT' 'sportname' ')' 'FROM' 'Sportsinfo'],['select' 'count' '(' 'distinct' 'sportname' ')' 'from' 'sportsinfo'],['How' 'many' 'sports' 'do' 'we' 'have' '?'],"['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
5483,voter_2,"SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  ""F""",What are the first and last names of all the female students who have president votes?,"['SELECT' 'DISTINCT' 'T1.Fname' ',' 'T1.LName' 'FROM' 'STUDENT' 'AS' 'T1'
 'JOIN' 'VOTING_RECORD' 'AS' 'T2' 'ON' 'T1.StuID' '=' 'T2.President_VOTE'
 'WHERE' 'T1.sex' '=' '``' 'F' ""''""]","['select' 'distinct' 't1' '.' 'fname' ',' 't1' '.' 'lname' 'from'
 'student' 'as' 't1' 'join' 'voting_record' 'as' 't2' 'on' 't1' '.'
 'stuid' '=' 't2' '.' 'president_vote' 'where' 't1' '.' 'sex' '=' 'value']","['What' 'are' 'the' 'first' 'and' 'last' 'names' 'of' 'all' 'the' 'female'
 'students' 'who' 'have' 'president' 'votes' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Voting_record ( StuID INTEGER, Registration_Date VARCHAR(12), Election_Cycle VARCHAR(12), President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER, FOREIGN KEY(StuID) REFERENCES Student(StuID), FOREIGN KEY(President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Vice_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Secretary_Vote) REFERENCES Student(StuID), FOREIGN KEY(Treasurer_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_President_Vote) REFERENCES Student(StuID), FOREIGN KEY(Class_Senator_Vote) REFERENCES Student(StuID) )']"
963,medicine_enzyme_interaction,"SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",What is the id and trade name of the medicines can interact with at least 3 enzymes?,"['SELECT' 'T1.id' ',' 'T1.trade_name' 'FROM' 'medicine' 'AS' 'T1' 'JOIN'
 'medicine_enzyme_interaction' 'AS' 'T2' 'ON' 'T2.medicine_id' '=' 'T1.id'
 'GROUP' 'BY' 'T1.id' 'HAVING' 'COUNT' '(' '*' ')' '>' '=' '3']","['select' 't1' '.' 'id' ',' 't1' '.' 'trade_name' 'from' 'medicine' 'as'
 't1' 'join' 'medicine_enzyme_interaction' 'as' 't2' 'on' 't2' '.'
 'medicine_id' '=' 't1' '.' 'id' 'group' 'by' 't1' '.' 'id' 'having'
 'count' '(' '*' ')' '>' '=' 'value']","['What' 'is' 'the' 'id' 'and' 'trade' 'name' 'of' 'the' 'medicines' 'can'
 'interact' 'with' 'at' 'least' '3' 'enzymes' '?']","['CREATE TABLE ""medicine"" ( ""id"" int, ""name"" text, ""Trade_Name"" text, ""FDA_approved"" text, primary key (""id"") )', 'CREATE TABLE ""enzyme"" ( ""id"" int, ""name"" text, ""Location"" text, ""Product"" text, ""Chromosome"" text, ""OMIM"" int, ""Porphyria"" text, primary key (""id"") )', 'CREATE TABLE ""medicine_enzyme_interaction"" ( ""enzyme_id"" int, ""medicine_id"" int, ""interaction_type"" text, primary key (""enzyme_id"", ""medicine_id""), foreign key (""enzyme_id"") references `enzyme`(""id""), foreign key (""medicine_id"") references `medicine`(""id"") )']"
1120,climbing,SELECT Name FROM mountain ORDER BY Name ASC,What are the names of mountains in ascending alphabetical order?,['SELECT' 'Name' 'FROM' 'mountain' 'ORDER' 'BY' 'Name' 'ASC'],['select' 'name' 'from' 'mountain' 'order' 'by' 'name' 'asc'],"['What' 'are' 'the' 'names' 'of' 'mountains' 'in' 'ascending'
 'alphabetical' 'order' '?']","['CREATE TABLE ""mountain"" ( ""Mountain_ID"" int, ""Name"" text, ""Height"" real, ""Prominence"" real, ""Range"" text, ""Country"" text, PRIMARY KEY (""Mountain_ID"") )', 'CREATE TABLE ""climber"" ( ""Climber_ID"" int, ""Name"" text, ""Country"" text, ""Time"" text, ""Points"" real, ""Mountain_ID"" int, PRIMARY KEY (""Climber_ID""), FOREIGN KEY (""Mountain_ID"") REFERENCES ""mountain""(""Mountain_ID"") )']"
4356,tracking_grants_for_research,"SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",Which project made the most number of outcomes? List the project details and the project id.,"['SELECT' 'T1.project_details' ',' 'T1.project_id' 'FROM' 'Projects' 'AS'
 'T1' 'JOIN' 'Project_outcomes' 'AS' 'T2' 'ON' 'T1.project_id' '='
 'T2.project_id' 'GROUP' 'BY' 'T1.project_id' 'ORDER' 'BY' 'count' '(' '*'
 ')' 'DESC' 'LIMIT' '1']","['select' 't1' '.' 'project_details' ',' 't1' '.' 'project_id' 'from'
 'projects' 'as' 't1' 'join' 'project_outcomes' 'as' 't2' 'on' 't1' '.'
 'project_id' '=' 't2' '.' 'project_id' 'group' 'by' 't1' '.' 'project_id'
 'order' 'by' 'count' '(' '*' ')' 'desc' 'limit' 'value']","['Which' 'project' 'made' 'the' 'most' 'number' 'of' 'outcomes' '?' 'List'
 'the' 'project' 'details' 'and' 'the' 'project' 'id' '.']","['CREATE TABLE `Document_Types` ( `document_type_code` VARCHAR(10) PRIMARY KEY, `document_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Documents` ( `document_id` INTEGER PRIMARY KEY, `document_type_code` VARCHAR(10), `grant_id` INTEGER NOT NULL, `sent_date` DATETIME NOT NULL, `response_received_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`document_type_code` ) REFERENCES `Document_Types`(`document_type_code` ), FOREIGN KEY (`grant_id` ) REFERENCES `Grants`(`grant_id` ) )', 'CREATE TABLE `Grants` ( `grant_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `grant_amount` DECIMAL(19,4) NOT NULL DEFAULT 0, `grant_start_date` DATETIME NOT NULL, `grant_end_date` DATETIME NOT NULL, `other_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Organisation_Types` ( `organisation_type` VARCHAR(10) PRIMARY KEY, `organisation_type_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Organisations` ( `organisation_id` INTEGER PRIMARY KEY, `organisation_type` VARCHAR(10) NOT NULL, `organisation_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_type` ) REFERENCES `Organisation_Types`(`organisation_type` ) )', 'CREATE TABLE `Project_Outcomes` ( `project_id` INTEGER NOT NULL, `outcome_code` VARCHAR(10) NOT NULL, `outcome_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`outcome_code` ) REFERENCES `Research_Outcomes`(`outcome_code` ) )', 'CREATE TABLE `Project_Staff` ( `staff_id` DOUBLE PRIMARY KEY, `project_id` INTEGER NOT NULL, `role_code` VARCHAR(10) NOT NULL, `date_from` DATETIME, `date_to` DATETIME, `other_details` VARCHAR(255), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ),FOREIGN KEY (`role_code` ) REFERENCES `Staff_Roles`(`role_code` ) )', 'CREATE TABLE `Projects` ( `project_id` INTEGER PRIMARY KEY, `organisation_id` INTEGER NOT NULL, `project_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Research_Outcomes` ( `outcome_code` VARCHAR(10) PRIMARY KEY, `outcome_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Research_Staff` ( `staff_id` INTEGER PRIMARY KEY, `employer_organisation_id` INTEGER NOT NULL, `staff_details` VARCHAR(255) NOT NULL, FOREIGN KEY (`employer_organisation_id` ) REFERENCES `Organisations`(`organisation_id` ) )', 'CREATE TABLE `Staff_Roles` ( `role_code` VARCHAR(10) PRIMARY KEY, `role_description` VARCHAR(255) NOT NULL )', 'CREATE TABLE `Tasks` ( `task_id` INTEGER PRIMARY KEY, `project_id` INTEGER NOT NULL, `task_details` VARCHAR(255) NOT NULL, `eg Agree Objectives` VARCHAR(1), FOREIGN KEY (`project_id` ) REFERENCES `Projects`(`project_id` ) )']"
742,customers_card_transactions,"SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type","What are the different transaction types, and how many transactions of each have taken place?","['SELECT' 'transaction_type' ',' 'count' '(' '*' ')' 'FROM'
 'Financial_transactions' 'GROUP' 'BY' 'transaction_type']","['select' 'transaction_type' ',' 'count' '(' '*' ')' 'from'
 'financial_transactions' 'group' 'by' 'transaction_type']","['What' 'are' 'the' 'different' 'transaction' 'types' ',' 'and' 'how'
 'many' 'transactions' 'of' 'each' 'have' 'taken' 'place' '?']","['CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255) )', 'CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(20), `customer_last_name` VARCHAR(20), `customer_address` VARCHAR(255), `customer_phone` VARCHAR(255), `customer_email` VARCHAR(255), `other_customer_details` VARCHAR(255) )', 'CREATE TABLE `Customers_Cards` ( `card_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `card_type_code` VARCHAR(15) NOT NULL, `card_number` VARCHAR(80), `date_valid_from` DATETIME, `date_valid_to` DATETIME, `other_card_details` VARCHAR(255) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `previous_transaction_id` INTEGER, `account_id` INTEGER NOT NULL, `card_id` INTEGER NOT NULL, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DOUBLE NULL, `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`card_id` ) REFERENCES `Customers_Cards`(`card_id` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )']"
1624,customers_and_invoices,"SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",How many different products correspond to each order id?,"['SELECT' 'order_id' ',' 'count' '(' 'DISTINCT' 'product_id' ')' 'FROM'
 'Order_items' 'GROUP' 'BY' 'order_id']","['select' 'order_id' ',' 'count' '(' 'distinct' 'product_id' ')' 'from'
 'order_items' 'group' 'by' 'order_id']","['How' 'many' 'different' 'products' 'correspond' 'to' 'each' 'order' 'id'
 '?']","['CREATE TABLE `Customers` ( `customer_id` INTEGER PRIMARY KEY, `customer_first_name` VARCHAR(50), `customer_middle_initial` VARCHAR(1), `customer_last_name` VARCHAR(50), `gender` VARCHAR(1), `email_address` VARCHAR(255), `login_name` VARCHAR(80), `login_password` VARCHAR(20), `phone_number` VARCHAR(255), `town_city` VARCHAR(50), `state_county_province` VARCHAR(50), `country` VARCHAR(50) )', 'CREATE TABLE `Orders` ( `order_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_order_placed` DATETIME NOT NULL, `order_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Invoices` ( `invoice_number` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `invoice_date` DATETIME, FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Accounts` ( `account_id` INTEGER PRIMARY KEY, `customer_id` INTEGER NOT NULL, `date_account_opened` DATETIME, `account_name` VARCHAR(50), `other_account_details` VARCHAR(255), FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ) )', 'CREATE TABLE `Product_Categories` ( `production_type_code` VARCHAR(15) PRIMARY KEY, `product_type_description` VARCHAR(80), `vat_rating` DECIMAL(19,4) )', 'CREATE TABLE `Products` ( `product_id` INTEGER PRIMARY KEY, `parent_product_id` INTEGER, `production_type_code` VARCHAR(15) NOT NULL, `unit_price` DECIMAL(19,4), `product_name` VARCHAR(80), `product_color` VARCHAR(20), `product_size` VARCHAR(20), FOREIGN KEY (`production_type_code` ) REFERENCES `Product_Categories`(`production_type_code` ) )', 'CREATE TABLE `Financial_Transactions` ( `transaction_id` INTEGER NOT NULL , `account_id` INTEGER NOT NULL, `invoice_number` INTEGER, `transaction_type` VARCHAR(15) NOT NULL, `transaction_date` DATETIME, `transaction_amount` DECIMAL(19,4), `transaction_comment` VARCHAR(255), `other_transaction_details` VARCHAR(255), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`account_id` ) REFERENCES `Accounts`(`account_id` ) )', 'CREATE TABLE `Order_Items` ( `order_item_id` INTEGER PRIMARY KEY, `order_id` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_quantity` VARCHAR(50), `other_order_item_details` VARCHAR(255), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ), FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ) )', 'CREATE TABLE `Invoice_Line_Items` ( `order_item_id` INTEGER NOT NULL, `invoice_number` INTEGER NOT NULL, `product_id` INTEGER NOT NULL, `product_title` VARCHAR(80), `product_quantity` VARCHAR(50), `product_price` DECIMAL(19,4), `derived_product_cost` DECIMAL(19,4), `derived_vat_payable` DECIMAL(19,4), `derived_total_cost` DECIMAL(19,4), FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ), FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ), FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ) )']"
3972,hospital_1,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000,Find the physicians who are trained in a procedure that costs more than 5000.,"['SELECT' 'T1.name' 'FROM' 'physician' 'AS' 'T1' 'JOIN' 'trained_in' 'AS'
 'T2' 'ON' 'T1.employeeid' '=' 'T2.physician' 'JOIN' 'procedures' 'AS'
 'T3' 'ON' 'T3.code' '=' 'T2.treatment' 'WHERE' 'T3.cost' '>' '5000']","['select' 't1' '.' 'name' 'from' 'physician' 'as' 't1' 'join' 'trained_in'
 'as' 't2' 'on' 't1' '.' 'employeeid' '=' 't2' '.' 'physician' 'join'
 'procedures' 'as' 't3' 'on' 't3' '.' 'code' '=' 't2' '.' 'treatment'
 'where' 't3' '.' 'cost' '>' 'value']","['Find' 'the' 'physicians' 'who' 'are' 'trained' 'in' 'a' 'procedure'
 'that' 'costs' 'more' 'than' '5000' '.']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
2040,party_people,SELECT count(*) FROM region,Count the number of regions.,['SELECT' 'count' '(' '*' ')' 'FROM' 'region'],['select' 'count' '(' '*' ')' 'from' 'region'],['Count' 'the' 'number' 'of' 'regions' '.'],"['CREATE TABLE ""region"" ( ""Region_ID"" int, ""Region_name"" text, ""Date"" text, ""Label"" text, ""Format"" text, ""Catalogue"" text, PRIMARY KEY (""Region_ID"") )', 'CREATE TABLE ""party"" ( ""Party_ID"" int, ""Minister"" text, ""Took_office"" text, ""Left_office"" text, ""Region_ID"" int, ""Party_name"" text, PRIMARY KEY (""Party_ID""), FOREIGN KEY (`Region_ID`) REFERENCES `region`(`Region_ID`) )', 'CREATE TABLE ""member"" ( ""Member_ID"" int, ""Member_Name"" text, ""Party_ID"" text, ""In_office"" text, PRIMARY KEY (""Member_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`) )', 'CREATE TABLE ""party_events"" ( ""Event_ID"" int, ""Event_Name"" text, ""Party_ID"" int, ""Member_in_charge_ID"" int, PRIMARY KEY (""Event_ID""), FOREIGN KEY (`Party_ID`) REFERENCES `party`(`Party_ID`), FOREIGN KEY (`Member_in_charge_ID`) REFERENCES `member`(`Member_ID`) )']"
5314,manufactory_1,"SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",Find the number of different products that are produced by companies at different headquarter cities.,"['SELECT' 'count' '(' 'DISTINCT' 'T1.name' ')' ',' 'T2.Headquarter' 'FROM'
 'products' 'AS' 'T1' 'JOIN' 'manufacturers' 'AS' 'T2' 'ON'
 'T1.Manufacturer' '=' 'T2.code' 'GROUP' 'BY' 'T2.Headquarter']","['select' 'count' '(' 'distinct' 't1' '.' 'name' ')' ',' 't2' '.'
 'headquarter' 'from' 'products' 'as' 't1' 'join' 'manufacturers' 'as'
 't2' 'on' 't1' '.' 'manufacturer' '=' 't2' '.' 'code' 'group' 'by' 't2'
 '.' 'headquarter']","['Find' 'the' 'number' 'of' 'different' 'products' 'that' 'are' 'produced'
 'by' 'companies' 'at' 'different' 'headquarter' 'cities' '.']","['CREATE TABLE Manufacturers ( Code INTEGER, Name VARCHAR(255) NOT NULL, Headquarter VARCHAR(255) NOT NULL, Founder VARCHAR(255) NOT NULL, Revenue REAL, PRIMARY KEY (Code) )', 'CREATE TABLE Products ( Code INTEGER, Name VARCHAR(255) NOT NULL , Price DECIMAL NOT NULL , Manufacturer INTEGER NOT NULL, PRIMARY KEY (Code), FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code) )']"
3032,loan_1,"SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",Find the name and account balance of the customer whose name includes the letter ‘a’.,"['SELECT' 'cust_name' ',' 'acc_bal' 'FROM' 'customer' 'WHERE' 'cust_name'
 'LIKE' ""'"" '%' 'a' '%' ""'""]","['select' 'cust_name' ',' 'acc_bal' 'from' 'customer' 'where' 'cust_name'
 'like' 'value']","['Find' 'the' 'name' 'and' 'account' 'balance' 'of' 'the' 'customer'
 'whose' 'name' 'includes' 'the' 'letter' '‘a’' '.']","['CREATE TABLE bank ( branch_ID int PRIMARY KEY, bname varchar(20), no_of_customers int, city varchar(10), state varchar(20))', 'CREATE TABLE customer ( cust_ID varchar(3) PRIMARY KEY, cust_name varchar(20), acc_type char(1), acc_bal int, no_of_loans int, credit_score int, branch_ID int, state varchar(20), FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID))', 'CREATE TABLE loan ( loan_ID varchar(3) PRIMARY KEY, loan_type varchar(15), cust_ID varchar(3), branch_ID varchar(3), amount int, FOREIGN KEY(branch_ID) REFERENCES bank(branch_ID), FOREIGN KEY(Cust_ID) REFERENCES customer(Cust_ID))']"
3925,hospital_1,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,What is the id of the patient who stayed in room 111 most recently?,"['SELECT' 'patient' 'FROM' 'stay' 'WHERE' 'room' '=' '111' 'ORDER' 'BY'
 'staystart' 'DESC' 'LIMIT' '1']","['select' 'patient' 'from' 'stay' 'where' 'room' '=' 'value' 'order' 'by'
 'staystart' 'desc' 'limit' 'value']","['What' 'is' 'the' 'id' 'of' 'the' 'patient' 'who' 'stayed' 'in' 'room'
 '111' 'most' 'recently' '?']","['CREATE TABLE Physician ( EmployeeID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, SSN INTEGER NOT NULL, CONSTRAINT pk_physician PRIMARY KEY(EmployeeID) )', 'CREATE TABLE Department ( DepartmentID INTEGER NOT NULL, Name VARCHAR(30) NOT NULL, Head INTEGER NOT NULL, CONSTRAINT pk_Department PRIMARY KEY(DepartmentID), CONSTRAINT fk_Department_Physician_EmployeeID FOREIGN KEY(Head) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Affiliated_With ( Physician INTEGER NOT NULL, Department INTEGER NOT NULL, PrimaryAffiliation BOOLEAN NOT NULL, CONSTRAINT fk_Affiliated_With_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Affiliated_With_Department_DepartmentID FOREIGN KEY(Department) REFERENCES Department(DepartmentID), PRIMARY KEY(Physician, Department) )', 'CREATE TABLE Procedures ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Cost REAL NOT NULL )', 'CREATE TABLE Trained_In ( Physician INTEGER NOT NULL, Treatment INTEGER NOT NULL, CertificationDate DATETIME NOT NULL, CertificationExpires DATETIME NOT NULL, CONSTRAINT fk_Trained_In_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Trained_In_Procedures_Code FOREIGN KEY(Treatment) REFERENCES Procedures(Code), PRIMARY KEY(Physician, Treatment) )', 'CREATE TABLE Patient ( SSN INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Address VARCHAR(30) NOT NULL, Phone VARCHAR(30) NOT NULL, InsuranceID INTEGER NOT NULL, PCP INTEGER NOT NULL, CONSTRAINT fk_Patient_Physician_EmployeeID FOREIGN KEY(PCP) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Nurse ( EmployeeID INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Position VARCHAR(30) NOT NULL, Registered BOOLEAN NOT NULL, SSN INTEGER NOT NULL )', 'CREATE TABLE Appointment ( AppointmentID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, PrepNurse INTEGER, Physician INTEGER NOT NULL, Start DATETIME NOT NULL, End DATETIME NOT NULL, ExaminationRoom TEXT NOT NULL, CONSTRAINT fk_Appointment_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Appointment_Nurse_EmployeeID FOREIGN KEY(PrepNurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_Appointment_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID) )', 'CREATE TABLE Medication ( Code INTEGER PRIMARY KEY NOT NULL, Name VARCHAR(30) NOT NULL, Brand VARCHAR(30) NOT NULL, Description VARCHAR(30) NOT NULL )', 'CREATE TABLE Prescribes ( Physician INTEGER NOT NULL, Patient INTEGER NOT NULL, Medication INTEGER NOT NULL, Date DATETIME NOT NULL, Appointment INTEGER, Dose VARCHAR(30) NOT NULL, PRIMARY KEY(Physician, Patient, Medication, Date), CONSTRAINT fk_Prescribes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Prescribes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Prescribes_Medication_Code FOREIGN KEY(Medication) REFERENCES Medication(Code), CONSTRAINT fk_Prescribes_Appointment_AppointmentID FOREIGN KEY(Appointment) REFERENCES Appointment(AppointmentID) )', 'CREATE TABLE Block ( BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, PRIMARY KEY(BlockFloor, BlockCode) )', 'CREATE TABLE Room ( RoomNumber INTEGER PRIMARY KEY NOT NULL, RoomType VARCHAR(30) NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, Unavailable BOOLEAN NOT NULL, CONSTRAINT fk_Room_Block_PK FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE On_Call ( Nurse INTEGER NOT NULL, BlockFloor INTEGER NOT NULL, BlockCode INTEGER NOT NULL, OnCallStart DATETIME NOT NULL, OnCallEnd DATETIME NOT NULL, PRIMARY KEY(Nurse, BlockFloor, BlockCode, OnCallStart, OnCallEnd), CONSTRAINT fk_OnCall_Nurse_EmployeeID FOREIGN KEY(Nurse) REFERENCES Nurse(EmployeeID), CONSTRAINT fk_OnCall_Block_Floor FOREIGN KEY(BlockFloor, BlockCode) REFERENCES Block(BlockFloor, BlockCode) )', 'CREATE TABLE Stay ( StayID INTEGER PRIMARY KEY NOT NULL, Patient INTEGER NOT NULL, Room INTEGER NOT NULL, StayStart DATETIME NOT NULL, StayEnd DATETIME NOT NULL, CONSTRAINT fk_Stay_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Stay_Room_Number FOREIGN KEY(Room) REFERENCES Room(RoomNumber) )', 'CREATE TABLE Undergoes ( Patient INTEGER NOT NULL, Procedures INTEGER NOT NULL, Stay INTEGER NOT NULL, DateUndergoes DATETIME NOT NULL, Physician INTEGER NOT NULL, AssistingNurse INTEGER, PRIMARY KEY(Patient, Procedures, Stay, DateUndergoes), CONSTRAINT fk_Undergoes_Patient_SSN FOREIGN KEY(Patient) REFERENCES Patient(SSN), CONSTRAINT fk_Undergoes_Procedures_Code FOREIGN KEY(Procedures) REFERENCES Procedures(Code), CONSTRAINT fk_Undergoes_Stay_StayID FOREIGN KEY(Stay) REFERENCES Stay(StayID), CONSTRAINT fk_Undergoes_Physician_EmployeeID FOREIGN KEY(Physician) REFERENCES Physician(EmployeeID), CONSTRAINT fk_Undergoes_Nurse_EmployeeID FOREIGN KEY(AssistingNurse) REFERENCES Nurse(EmployeeID) )']"
6179,music_4,SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1,What is the famous release date of the artist with the oldest age?,"['SELECT' 'Famous_Release_date' 'FROM' 'artist' 'ORDER' 'BY' 'Age' 'DESC'
 'LIMIT' '1']","['select' 'famous_release_date' 'from' 'artist' 'order' 'by' 'age' 'desc'
 'limit' 'value']","['What' 'is' 'the' 'famous' 'release' 'date' 'of' 'the' 'artist' 'with'
 'the' 'oldest' 'age' '?']","['CREATE TABLE ""artist"" ( ""Artist_ID"" int, ""Artist"" text, ""Age"" int, ""Famous_Title"" text, ""Famous_Release_date"" text, PRIMARY KEY (""Artist_ID"") )', 'CREATE TABLE ""volume"" ( ""Volume_ID"" int, ""Volume_Issue"" text, ""Issue_Date"" text, ""Weeks_on_Top"" real, ""Song"" text, ""Artist_ID"" int, PRIMARY KEY (""Volume_ID""), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`) )', 'CREATE TABLE ""music_festival"" ( ""ID"" int, ""Music_Festival"" text, ""Date_of_ceremony"" text, ""Category"" text, ""Volume"" int, ""Result"" text, PRIMARY KEY (`ID`), FOREIGN KEY (`Volume`) REFERENCES `volume`(`Volume_ID`) )']"
1803,small_bank_1,"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?,"['SELECT' 'T1.name' ',' 'T2.balance' 'FROM' 'accounts' 'AS' 'T1' 'JOIN'
 'checking' 'AS' 'T2' 'ON' 'T1.custid' '=' 'T2.custid' 'JOIN' 'savings'
 'AS' 'T3' 'ON' 'T1.custid' '=' 'T3.custid' 'ORDER' 'BY' 'T3.balance'
 'LIMIT' '1']","['select' 't1' '.' 'name' ',' 't2' '.' 'balance' 'from' 'accounts' 'as'
 't1' 'join' 'checking' 'as' 't2' 'on' 't1' '.' 'custid' '=' 't2' '.'
 'custid' 'join' 'savings' 'as' 't3' 'on' 't1' '.' 'custid' '=' 't3' '.'
 'custid' 'order' 'by' 't3' '.' 'balance' 'limit' 'value']","['What' 'are' 'the' 'names' 'and' 'balances' 'of' 'checking' 'accounts'
 'belonging' 'to' 'the' 'customer' 'with' 'the' 'lowest' 'savings'
 'balance' '?']","['CREATE TABLE ACCOUNTS ( custid BIGINT NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL )', 'CREATE TABLE SAVINGS ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )', 'CREATE TABLE CHECKING ( custid BIGINT NOT NULL PRIMARY KEY, balance FLOAT NOT NULL, FOREIGN KEY (custid) REFERENCES ACCOUNTS (custid) )']"
2482,movie_1,SELECT name FROM Reviewer UNION SELECT title FROM Movie,Return all reviewer names and movie names together in a single list.,['SELECT' 'name' 'FROM' 'Reviewer' 'UNION' 'SELECT' 'title' 'FROM' 'Movie'],['select' 'name' 'from' 'reviewer' 'union' 'select' 'title' 'from' 'movie'],"['Return' 'all' 'reviewer' 'names' 'and' 'movie' 'names' 'together' 'in'
 'a' 'single' 'list' '.']","['CREATE TABLE Movie( mID int primary key, title text, year int, director text )', 'CREATE TABLE Reviewer( rID int primary key, name text)', 'CREATE TABLE Rating( rID int, mID int, stars int, ratingDate date, FOREIGN KEY (mID) references Movie(mID), FOREIGN KEY (rID) references Reviewer(rID) )']"
2870,icfp_1,"SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""","What is the name of the institution that ""Matthias Blume"" belongs to?","['SELECT' 'DISTINCT' 't3.name' 'FROM' 'authors' 'AS' 't1' 'JOIN'
 'authorship' 'AS' 't2' 'ON' 't1.authid' '=' 't2.authid' 'JOIN' 'inst'
 'AS' 't3' 'ON' 't2.instid' '=' 't3.instid' 'WHERE' 't1.fname' '=' '``'
 'Matthias' ""''"" 'AND' 't1.lname' '=' '``' 'Blume' ""''""]","['select' 'distinct' 't3' '.' 'name' 'from' 'authors' 'as' 't1' 'join'
 'authorship' 'as' 't2' 'on' 't1' '.' 'authid' '=' 't2' '.' 'authid'
 'join' 'inst' 'as' 't3' 'on' 't2' '.' 'instid' '=' 't3' '.' 'instid'
 'where' 't1' '.' 'fname' '=' 'value' 'and' 't1' '.' 'lname' '=' 'value']","['What' 'is' 'the' 'name' 'of' 'the' 'institution' 'that' '``' 'Matthias'
 'Blume' ""''"" 'belongs' 'to' '?']","['CREATE TABLE Inst ( instID INTEGER, name TEXT, country TEXT, -- the home country of the institution (this is obviously an impoverished model) PRIMARY KEY (instID) )', 'CREATE TABLE Authors ( authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID) )', 'CREATE TABLE Papers ( paperID INTEGER, title TEXT, PRIMARY KEY (paperID) )', 'CREATE TABLE Authorship ( authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID, instID, paperID), FOREIGN KEY (authID) REFERENCES Authors (authID), FOREIGN KEY (instID) REFERENCES Inst (instID), FOREIGN KEY (paperID) REFERENCES Papers (paperID) )']"
6040,game_1,"SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",What are ids and total number of hours played for each game?,"['SELECT' 'gameid' ',' 'sum' '(' 'hours_played' ')' 'FROM' 'Plays_games'
 'GROUP' 'BY' 'gameid']","['select' 'gameid' ',' 'sum' '(' 'hours_played' ')' 'from' 'plays_games'
 'group' 'by' 'gameid']","['What' 'are' 'ids' 'and' 'total' 'number' 'of' 'hours' 'played' 'for'
 'each' 'game' '?']","['CREATE TABLE Student ( StuID INTEGER PRIMARY KEY, LName VARCHAR(12), Fname VARCHAR(12), Age INTEGER, Sex VARCHAR(1), Major INTEGER, Advisor INTEGER, city_code VARCHAR(3) )', 'CREATE TABLE Video_Games ( GameID INTEGER PRIMARY KEY, GName VARCHAR(40), GType VARCHAR(40) )', 'CREATE TABLE Plays_Games ( StuID INTEGER, GameID INTEGER, Hours_Played INTEGER, FOREIGN KEY(GameID) REFERENCES Video_Games(GameID), FOREIGN KEY(StuID) REFERENCES Student(StuID) )', 'CREATE TABLE SportsInfo ( StuID INTEGER, SportName VARCHAR(32), HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship VARCHAR(1), FOREIGN KEY(StuID) REFERENCES Student(StuID) )']"
